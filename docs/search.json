[{"path":"https://github.com/stnava/simlr_nhanes/articles/simlr_nhanes.html","id":"nhanes-example","dir":"Articles","previous_headings":"","what":"NHANES example","title":"simlr: nhanes application explained","text":"five publicly available data categories : - Demographics (DEMO) - Dietary (DIET) - Examination (EXAM) - Laboratory (LAB) - Questionnaire (Q). abbreviated forms parentheses may substituted long form nhanesA commands. INDFMPIR: Poverty Income Ratio (0 = income, higher values = higher income relative poverty threshold). • INDHHIN2: Annual Household Income (categorized ranges). • DMDEDUC2: Education Level (adults 20+ years). • OCD390G: Employment Status (occupation questionnaire).","code":"## simpleWarning in download.file(url, tf, mode = \"wb\", quiet = TRUE): downloaded length 0 != reported length 1245 ##  ##  ## simpleWarning in download.file(url, tf, mode = \"wb\", quiet = TRUE): downloaded length 0 != reported length 1245 ##  ##   Male Female  ##   1469   1545 ## character(0) #################################### colcats=rep(\"Basic\",ncol(fdata)) colcats[ colnames(fdata) %in%  c(\"ridageyr\",\"riagendr\",\"race\",\"dmdeduc2\",\"INDFMPIR\") ]='demog' bpname=getNamesFromDataframe( \"BPX\",fdata) bmname=getNamesFromDataframe( \"BMX\",fdata) colcats[ colnames(fdata) %in%  c(bmname,bpname,\"Testosterone\",\"TotChol\",\"Diabetes\" ) ]='physical' colcats[ colnames(fdata) %in%   c(   getNamesFromDataframe( \"DPQ\", fdata ),    getNamesFromDataframe( \"SLQ\", fdata ) )  ]='mentalhealth' x=c('LC','.x','.y','URDUMMAL','LBXVDE','LBX4CE') colcats[ colnames(fdata) %in%  getNamesFromDataframe( \"LBX\", fdata, exclusions=x ) ]='exposures' colcats[ colnames(fdata) %in%  getNamesFromDataframe( \"LBD\", fdata, exclusions=x ) ]='exposures' #colcats[ colnames(fdata) %in%  getNamesFromDataframe( \"URX\", fdata, exclusions=x ) ]='exposures' # colcats[ colnames(fdata) %in%  getNamesFromDataframe( \"URD\", fdata, exclusions=x ) ]='exposures' # colcats[ colnames(fdata) %in%  getNamesFromDataframe( \"LBC\", fdata, exclusions=x ) ]='exposures' colcats[ colnames(fdata) %in%  getNamesFromDataframe( \"DR1T\", fdata ) ]='diet' # colcats[ colnames(fdata) %in%  getNamesFromDataframe( \"cfd\", fdata )[-1] ]='digitspan' tbl=table(colcats) ############## nh_list=list() knm=names(tbl)[-1] mycc = complete.cases( fdata[ , colcats %in% 'demog' ]) mycc = complete.cases( fdata[ , colcats %in% 'exposures' ]) table(mycc) ## mycc ## FALSE  TRUE  ##  2135   462 doimp=TRUE for ( k in knm ) {     print(k)     if ( doimp ) {       temp0 = impute_data( fdata[ ,colcats==k] )     } else temp0=(fdata[mycc,colcats==k])     temp = data.frame(convert_to_numeric_matrix( temp0 ))     for ( j in 1:ncol(temp) ) {         hist( temp[,j], main=colnames(temp)[j]) #        Sys.sleep(1)         }     nh_list[[length(nh_list)+1]]=data.matrix( ( temp ) )     print(colnames(nh_list[[length(nh_list)]])) #    nh_list[[length(nh_list)]]=impute_and_report_na(nh_list[[length(nh_list)]] )     } ## [1] \"demog\" ## [1] \"ridageyr\"   \"dmdeduc2\"   \"INDFMPIR\"   \"riagendr_1\" \"riagendr_2\" ## [6] \"race_1\"     \"race_2\"     \"race_3\"     \"race_4\"     ## [1] \"dietommunity.supply\"      \"DR1TWS_Well.or.rain.cistern\"  ## [69] \"DR1TWS_Spring\"                \"DR1TWS_Don.t.drink.tap.water\" ## [71] \"DR1TWS_Don.t.know\"            ## [1] \"exposures\" ##  [1] \"LBXBPB\"   \"LBDBPBSI\" \"LBXBCD\"   \"LBDBCDSI\" \"LBXTHG\"   \"LBDTHGSI\" ##  [7] \"LBXBSE\"   \"LBDBSESI\" \"LBXBMN\"   \"LBDBMNSI\" \"LBX2DF\"   \"LBXV06\"   ## [13] \"LBXV1D\"   \"LBXV2A\"   \"LBXV3B\"   \"LBXV4C\"   \"LBXVBZ\"   \"LBXVCB\"   ## [19] \"LBXVCT\"   \"LBXVDB\"   \"LBXVEB\"   \"LBXVFN\"   \"LBXVIPB\"  \"LBXVMC\"   ## [25] \"LBXVNB\"   \"LBXVOX\"   \"LBXVTC\"   \"LBXVTE\"   \"LBXVXY\"   \"LBXSCU\"   ## [31] \"LBDSCUSI\" \"LBXSSE\"   \"LBDSSESI\" \"LBXSZN\"   \"LBDSZNSI\" \"LBXIHG\"   ## [37] \"LBDIHGSI\" \"LBXBGE\"   \"LBXBGM\"   ## [1] \"mentalhealth\" ##  [1] \"DPQ010\" \"DPQ020\" \"DPQ030\" \"DPQ040\" \"DPQ050\" \"DPQ060\" \"DPQ070\" \"DPQ080\" ##  [9] \"DPQ090\" \"DPQ100\" \"SLQ050\" \"SLQ060\" ## [1] \"physical\" ##  [1] \"BPXPLS\"            \"BPXML1\"            \"BPXSY1\"            ##  [4] \"BPXDI1\"            \"BPXSY2\"            \"BPXDI2\"            ##  [7] \"BPXSY3\"            \"BPXDI3\"            \"BMXWT\"             ## [10] \"BMXHT\"             \"BMXBMI\"            \"BMXLEG\"            ## [13] \"BMXARML\"           \"BMXARMC\"           \"BMXWAIST\"          ## [16] \"BMXSAD1\"           \"BMXSAD2\"           \"BPXPULS_Regular\"   ## [19] \"BPXPULS_Irregular\" \"BPXPTY_Radial\"     \"BPXPTY_Brachial\" names(nh_list)=knm ##### ################################################################################ # regs <- regularizeSimlr(nh_list,fraction=0.15,sigma=rep(1.0,length(nh_list))) # regs <- regularizeSimlr(nh_list) regs=list() wdemog=which( knm == 'demog') for ( wdemog in 1:length(nh_list) ) regs[[ wdemog]]=diag( ncol(nh_list[[wdemog]])) initu=initializeSimlr( nh_list, k=round(max_columns_list(nh_list)), jointReduction=TRUE ) initu=initializeSimlr( nh_list, k=min_columns_list(nh_list), jointReduction=TRUE ) initu=initializeSimlr( nh_list, k=round(min_columns_list(nh_list)*2), jointReduction=TRUE ) resultNH <- simlr( nh_list,          iterations=25,         sparsenessQuantiles=rep(0.8,length(nh_list)),         positivities=rep(\"positive\",length(nh_list)),          energyType='regression', mixAlg='ica', #        energyType='cca', mixAlg='svd',         scale=c(\"centerAndScale\", \"whiten\",  \"np\"),         constraint=\"Stiefelx10x10\",         initialUMatrix=initu, verbose=T ) ## [1] \"Stiefel\" \"10\"      \"10\"      ## [1] \"     <0> BUILD-V <0> BUILD-V <0> BUILD-V <0> BUILD-V <0>    \" ## [1] \"initialDataTerm: 1.14616014056659  <o> mixer: ica  <o> E:  regression\" ## [1] \"Iteration: 1 bestEv: 6.6144364542225 bestIt: 1 CE: 6.6144364542225 featOrth: 0.040652268476362\" ## [1] \"Iteration: 2 bestEv: 0.172168990436699 bestIt: 2 CE: 0.172168990436699 featOrth: 0.0110231975851054\" ## [1] \"Iteration: 3 bestEv: 0.0557347612729529 bestIt: 3 CE: 0.0557347612729529 featOrth: 0.00593660604496206\" ## [1] \"Iteration: 4 bestEv: 0.0160826083343218 bestIt: 4 CE: 0.0160826083343219 featOrth: 0.00155509430320964\" ## [1] \"Iteration: 5 bestEv: 0.0152743509501418 bestIt: 5 CE: 0.0152743509501418 featOrth: 0.00152882288121397\" ## [1] \"Iteration: 6 bestEv: 0.00231983599509618 bestIt: 6 CE: 0.00231983599509618 featOrth: 0.000141402330419976\" ## [1] \"Iteration: 7 bestEv: 0.00106632684786268 bestIt: 7 CE: 0.00106632684786268 featOrth: 1.24549675889812e-05\" ## [1] \"Iteration: 8 bestEv: 0.000969383002094735 bestIt: 8 CE: 0.000969383002094735 featOrth: 8.24506552245683e-06\" ## [1] \"Iteration: 9 bestEv: 0.000888733461521805 bestIt: 9 CE: 0.000888733461521805 featOrth: 6.27482794400545e-06\" ## [1] \"Iteration: 10 bestEv: 0.000812321664653679 bestIt: 10 CE: 0.000812321664653679 featOrth: 5.96449026751145e-06\" ## [1] \"Iteration: 11 bestEv: 0.000812321664653679 bestIt: 10 CE: 0.000821158671203225 featOrth: 5.92667195082105e-06\" ## [1] \"Iteration: 12 bestEv: 0.000785046688938895 bestIt: 12 CE: 0.000785046688938894 featOrth: 6.35467236595237e-06\" ## [1] \"Iteration: 13 bestEv: 0.00076679280456548 bestIt: 13 CE: 0.00076679280456548 featOrth: 4.74757436384902e-06\" ## [1] \"Iteration: 14 bestEv: 0.000741025995149963 bestIt: 14 CE: 0.000741025995149963 featOrth: 3.928088103831e-06\" ## [1] \"Iteration: 15 bestEv: 0.000741025995149963 bestIt: 14 CE: 0.000741873490142953 featOrth: 3.75937744585596e-06\" ## [1] \"Iteration: 16 bestEv: 0.000704613150769644 bestIt: 16 CE: 0.000704613150769644 featOrth: 1.24421770227602e-06\" ## [1] \"Iteration: 17 bestEv: 0.000700135693934767 bestIt: 17 CE: 0.000700135693934767 featOrth: 6.81153475789711e-07\" ## [1] \"Iteration: 18 bestEv: 0.000698905751105107 bestIt: 18 CE: 0.000698905751105107 featOrth: 6.92176163092218e-07\" ## [1] \"Iteration: 19 bestEv: 0.000697246344233688 bestIt: 19 CE: 0.000697246344233688 featOrth: 3.61687245024115e-07\" ## [1] \"Iteration: 20 bestEv: 0.000697246344233688 bestIt: 19 CE: 0.000698191583520209 featOrth: 3.7935723001703e-07\" ## [1] \"Iteration: 21 bestEv: 0.000697246344233688 bestIt: 19 CE: 0.000698165026211065 featOrth: 3.63174803662746e-07\" ## [1] \"Iteration: 22 bestEv: 0.000697246344233688 bestIt: 19 CE: 0.000700452959691897 featOrth: 3.82971777706358e-07\" ## fastICA produced NaN - svd instead ## fastICA produced NaN - svd instead ## [1] \"Iteration: 23 bestEv: 0.000683235759773637 bestIt: 23 CE: 0.000683235759773637 featOrth: 3.66183675678397e-07\" ## fastICA produced NaN - svd instead ## fastICA produced NaN - svd instead ## [1] \"Iteration: 24 bestEv: 0.000683235759773637 bestIt: 23 CE: 0.000683235759773637 featOrth: 3.66183675678397e-07\" ## fastICA produced NaN - svd instead ## fastICA produced NaN - svd instead ## [1] \"Iteration: 25 bestEv: 0.000683235759773637 bestIt: 23 CE: 0.000683235759773637 featOrth: 3.66183675678397e-07\" ##################################################### # drwwrd projlist=list() mysimk=ncol(initu) for ( k in 2:length(nh_list)) {     rownames(resultNH$v[[k]])=colnames( nh_list[[k]])     ux=data.frame(nh_list[[k]] %*% abs(resultNH$v[[k]][,1:mysimk]))     colnames(ux)=paste0(names(nh_list)[k],1:ncol(ux))     projlist[[length(projlist)+1]]=ux     names( projlist )[length(projlist)]=knm[k] } simdf=simdf2=dplyr::bind_cols(projlist) cognames = c(   \"z_cerad_re\", \"z_animal_re\",      \"z_delayed_re\",    \"z_global_re\",     \"z_digit_re\" #  \"z_cerad_age\", \"z_animal_age\",     \"z_digit_age\",      \"z_delayed_age\",    \"z_global_age\", #  \"z_cerad_edu\", \"z_animal_edu\",     \"z_digit_edu\",      \"z_delayed_edu\",    \"z_global_edu\" ) # cognames=c(\"cerad_sum\",\"cfdast\",\"cfdds\") dnames = c( \"riagendr\", \"ridageyr\", \"race\", \"dmdeduc2\", \"INDFMPIR\",'wtint2yr','wtmec2yr') if ( doimp ) {   simdf2[,dnames]=fdata[,dnames]   simdf2[,cognames]=fdata[,cognames]   } else {   simdf2[,dnames]=fdata[mycc,dnames]   simdf2[,cognames]=fdata[mycc,cognames]   } ################################# covars=\" ~ riagendr + ridageyr + race + dmdeduc2 + INDFMPIR + \" covars=\" ~ riagendr + ridageyr + race + dmdeduc2 +  \" ############################# for ( kk in 1:ncol(initu)) {   bform = paste0( cognames[length(cognames)], covars, \"1\" )   myform = paste0( cognames[length(cognames)], covars,paste0( paste0(names(projlist),kk), collapse='+'))   tempdf = simdf2[,]   bmdl = lm( bform, data=tempdf )   mdl = lm( myform, data=tempdf ) #  if (doimp) mdl = lm( myform, data=tempdf, weights=tempdf$wtint2yr ) else mdl = lm( myform, data=tempdf, weights=tempdf$wtint2yr  )   myanv = anova( bmdl, mdl )   if ( myanv$Pr[2] < 1e-4 ) {     print( tail( coefficients( summary( mdl ) ), 4 ))     print( myanv$Pr[2] )     print( cognames[length(cognames)])     for ( k in names(projlist) ) {       print( k )       print( interpret_simlr_vector2( resultNH$v[[k]], kk, n2show=3, shortnames=F ) )       visreg::visreg(mdl, paste0(k,kk) )       } #    Sys.sleep(3)   } } ##                    Estimate   Std. Error   t value     Pr(>|t|) ## diet1          2.872693e+04 9.101821e+03  3.156174 1.616923e-03 ## exposures1    -1.354318e+10 7.287623e+09 -1.858381 6.322850e-02 ## mentalhealth1 -2.550555e+04 2.795154e+03 -9.124918 1.405695e-19 ## physical1      2.581258e+06 6.508983e+05  3.965686 7.517176e-05 ## [1] 7.605136e-23 ## [1] \"z_digit_re\" ## [1] \"diet\" ##  DR1TALCO  DR1TCAFF  DR1TMOIS  ## 1.0000000 0.9705797 0.9111442 ## [1] \"exposures\" ##    LBXVCB    LBXVTE    LBXV06  ## 1.0000000 0.8224730 0.2562445 ## [1] \"mentalhealth\" ##       DPQ080       DPQ070       DPQ050  ## 1.000000e+00 5.385390e-01 5.174881e-06 ## [1] \"physical\" ##           BMXWT           BMXHT BPXPULS_Regular  ##       1.0000000       0.4884987       0.4002257 ##                    Estimate   Std. Error   t value     Pr(>|t|) ## diet2          8.620111e+06    1858402.6  4.638452 3.685018e-06 ## exposures2    -1.011156e+10 3314343472.7 -3.050848 2.305131e-03 ## mentalhealth2 -3.155817e+08   47091855.8 -6.701407 2.524463e-11 ## physical2      9.695452e+05     712327.2  1.361095 1.736022e-01 ## [1] 2.467896e-15 ## [1] \"z_digit_re\" ## [1] \"diet\" ##      DR1TP182      DR1TSFAT DR1TWS_Spring  ##     1.0000000     0.9704370     0.8402352 ## [1] \"exposures\" ##    LBXVFN    LBXBCD  LBDBCDSI  ## 1.0000000 0.9484425 0.9454202 ## [1] \"mentalhealth\" ##     DPQ100     DPQ060     DPQ090  ## 1.00000000 0.35883938 0.02875094 ## [1] \"physical\" ##     BMXWT   BMXSAD1    BPXSY1  ## 1.0000000 0.4237398 0.3679295 ##                    Estimate   Std. Error   t value     Pr(>|t|) ## diet3          2.583143e+05 6.596647e+04  3.915843 9.241884e-05 ## exposures3    -1.334611e+10 2.853400e+09 -4.677264 3.056796e-06 ## mentalhealth3 -3.351359e+09 3.979433e+08 -8.421700 6.063129e-17 ## physical3      1.404689e+09 4.240175e+08  3.312809 9.363578e-04 ## [1] 2.925169e-24 ## [1] \"z_digit_re\" ## [1] \"diet\" ##  DR1TS180  DR1TTHEO  DR1TCARB  ## 1.0000000 0.4551461 0.3823076 ## [1] \"exposures\" ##  LBDBCDSI    LBXBCD    LBXBPB  ## 1.0000000 0.9958922 0.5937601 ## [1] \"mentalhealth\" ##     DPQ080     DPQ010     DPQ090  ## 1.00000000 0.08340466 0.01637281 ## [1] \"physical\" ##   BMXSAD2    BMXLEG     BMXHT  ## 1.0000000 0.8070293 0.6818085 ##                  Estimate   Std. Error    t value     Pr(>|t|) ## diet4             1279458 5.042495e+05  2.5373514 1.122776e-02 ## exposures4     -809491480 2.197603e+10 -0.0368352 9.706192e-01 ## mentalhealth4 -4501598327 6.529995e+08 -6.8937237 6.804541e-12 ## physical4         1364133 4.900837e+05  2.7834694 5.417186e-03 ## [1] 3.123883e-12 ## [1] \"z_digit_re\" ## [1] \"diet\" ##  DR1TPFAT  DR1TCHOL  DR1TP182  ## 1.0000000 0.9738002 0.8846508 ## [1] \"exposures\" ##  LBDBPBSI  LBDIHGSI    LBXIHG  ## 1.0000000 0.7822016 0.7559483 ## [1] \"mentalhealth\" ##     DPQ100     DPQ060     DPQ080  ## 1.00000000 0.44005417 0.08119528 ## [1] \"physical\" ##   BMXARMC    BMXBMI     BMXWT  ## 1.0000000 0.9376358 0.6523645 ##                    Estimate   Std. Error   t value     Pr(>|t|) ## diet5          1.276108e+01 3.538727e+00  3.606122 3.166877e-04 ## exposures5    -4.301232e+09 9.698622e+08 -4.434890 9.596795e-06 ## mentalhealth5 -9.916429e+07 1.716897e+07 -5.775785 8.575819e-09 ## physical5      5.400367e+09 1.666809e+09  3.239943 1.210692e-03 ## [1] 9.984441e-17 ## [1] \"z_digit_re\" ## [1] \"diet\" ##  DR1TSODI  DR1TPHOS  DR1TKCAL  ## 1.0000000 0.4770085 0.4725999 ## [1] \"exposures\" ##  LBDBCDSI    LBXBCD    LBXBPB  ## 1.0000000 0.9937034 0.2555726 ## [1] \"mentalhealth\" ##      DPQ060      DPQ020      DPQ100  ## 1.000000000 0.445730928 0.003215018 ## [1] \"physical\" ##     BMXLEG      BMXWT    BMXARML  ## 1.00000000 0.10660915 0.08853836 ##                    Estimate   Std. Error   t value     Pr(>|t|) ## diet6          1.060398e+04 9.475792e+03  1.119060 2.632185e-01 ## exposures6    -2.121016e+09 4.548748e+08 -4.662856 3.276966e-06 ## mentalhealth6 -5.903367e+06 1.923765e+06 -3.068653 2.172564e-03 ## physical6     -1.652918e+09 5.090203e+08 -3.247254 1.180140e-03 ## [1] 9.54149e-09 ## [1] \"z_digit_re\" ## [1] \"diet\" ##  DR1TCOPP  DR1TS040   DR1TRET  ## 1.0000000 0.5834027 0.2969126 ## [1] \"exposures\" ##    LBXBCD  LBDBCDSI    LBX2DF  ## 1.0000000 0.9958432 0.3568357 ## [1] \"mentalhealth\" ##      DPQ030      DPQ060      DPQ080  ## 1.000000000 0.250739705 0.001209046 ## [1] \"physical\" ##         BMXARMC          BPXML1 BPXPULS_Regular  ##       1.0000000       0.8270684       0.1211476 ##                    Estimate   Std. Error   t value     Pr(>|t|) ## diet7          2.385341e+06 6.777457e+05  3.519521 4.397905e-04 ## exposures7     6.674102e+11 5.382555e+11  1.239951 2.151062e-01 ## mentalhealth7 -6.056613e+09 6.757043e+08 -8.963408 5.890596e-19 ## physical7      1.840834e+05 3.499808e+04  5.259813 1.560116e-07 ## [1] 5.697063e-25 ## [1] \"z_digit_re\" ## [1] \"diet\" ##  DR1TS160  DR1TCHOL  DR1TSELE  ## 1.0000000 0.9830445 0.9059701 ## [1] \"exposures\" ##   LBXVIPB    LBXV2A    LBXVMC  ## 1.0000000 0.5598344 0.1582093 ## [1] \"mentalhealth\" ##    DPQ080    DPQ100    DPQ050  ## 1.0000000 0.3000322 0.2341561 ## [1] \"physical\" ##     BMXHT    BMXLEG   BMXARML  ## 1.0000000 0.5752537 0.5158005 ##                    Estimate   Std. Error   t value     Pr(>|t|) ## diet9          4.089725e+03 4.070036e+03  1.004838 3.150691e-01 ## exposures9    -3.412979e+08 2.154281e+08 -1.584278 1.132528e-01 ## mentalhealth9 -5.384857e+09 6.312259e+08 -8.530794 2.435948e-17 ## physical9      3.158843e+06 2.643658e+06  1.194876 2.322452e-01 ## [1] 1.478301e-15 ## [1] \"z_digit_re\" ## [1] \"diet\" ##  DR1TNUMF  DR1TCHOL  DR1TSELE  ## 1.0000000 0.4056538 0.3907842 ## [1] \"exposures\" ##    LBXSCU  LBDSCUSI  LBDBMNSI  ## 1.0000000 0.9957080 0.4177809 ## [1] \"mentalhealth\" ##    DPQ070    DPQ080    DPQ100  ## 1.0000000 0.3064859 0.1577040 ## [1] \"physical\" ##    BMXBMI   BMXSAD1   BMXSAD2  ## 1.0000000 0.7178173 0.5513058 ##                     Estimate   Std. Error     t value     Pr(>|t|) ## diet10          7.384179e+02 4.260304e+02  1.73325150 8.317018e-02 ## exposures10    -1.469781e+07 1.853356e+09 -0.00793038 9.936732e-01 ## mentalhealth10 -2.376689e+08 2.871335e+07 -8.27729683 1.993844e-16 ## physical10      1.369160e+06 1.304222e+06  1.04978990 2.939128e-01 ## [1] 1.407364e-14 ## [1] \"z_digit_re\" ## [1] \"diet\" ##  DR1TCALC    DR1TFA   DR1TVB2  ## 1.0000000 0.3573604 0.2539536 ## [1] \"exposures\" ##    LBXBGM  LBDTHGSI    LBXTHG  ## 1.0000000 0.9525770 0.8595439 ## [1] \"mentalhealth\" ##      DPQ080      DPQ050      DPQ060  ## 1.000000000 0.221907747 0.002352086 ## [1] \"physical\" ##  BMXWAIST   BMXARMC    BMXBMI  ## 1.0000000 0.6123321 0.3687869 ##                     Estimate   Std. Error     t value     Pr(>|t|) ## diet11          5.698534e+02 2.753171e+04  0.02069807 9.834881e-01 ## exposures11    -2.901086e+10 6.071193e+09 -4.77844403 1.865393e-06 ## mentalhealth11 -3.102640e+07 8.750333e+06 -3.54573911 3.984646e-04 ## physical11      1.117834e+05 6.576860e+05  0.16996470 8.650512e-01 ## [1] 2.888227e-07 ## [1] \"z_digit_re\" ## [1] \"diet\" ##    DR1TVC  DR1TS040  DR1TFIBE  ## 1.0000000 0.6655489 0.6456036 ## [1] \"exposures\" ##  LBDBPBSI    LBXBPB    LBXBCD  ## 1.0000000 0.9890296 0.6206306 ## [1] \"mentalhealth\" ##      SLQ060      DPQ040      DPQ090  ## 1.000000000 0.445985999 0.001275512 ## [1] \"physical\" ##    BMXARMC     BPXML1     BPXDI2  ## 1.00000000 0.10107972 0.05338767 ##                     Estimate   Std. Error    t value     Pr(>|t|) ## diet12          9.401062e+04 2.649862e+04  3.5477549 3.954423e-04 ## exposures12    -2.047509e+10 4.416156e+09 -4.6364060 3.721356e-06 ## mentalhealth12 -6.289464e+07 8.935969e+06 -7.0383683 2.481706e-12 ## physical12     -2.028743e+05 6.240549e+05 -0.3250904 7.451389e-01 ## [1] 1.227059e-17 ## [1] \"z_digit_re\" ## [1] \"diet\" ##                DR1TALCO                DR1TMAGN DR1TWS_Community.supply  ##               1.0000000               0.5722973               0.5223815 ## [1] \"exposures\" ##  LBDBCDSI    LBXBCD    LBXVDB  ## 1.0000000 0.9878016 0.4957165 ## [1] \"mentalhealth\" ##     DPQ010     DPQ100     SLQ050  ## 1.00000000 0.63346955 0.00382018 ## [1] \"physical\" ##   BMXSAD1   BMXSAD2  BMXWAIST  ## 1.0000000 0.9501323 0.6845514 ##                     Estimate   Std. Error     t value     Pr(>|t|) ## diet13              94212.97 6.024158e+04  1.56391924 1.179589e-01 ## exposures13     302228317.28 4.667022e+09  0.06475828 9.483715e-01 ## mentalhealth13 -222647677.47 2.613010e+07 -8.52073551 2.650800e-17 ## physical13         768468.24 3.392598e+05  2.26513197 2.358698e-02 ## [1] 4.251969e-16 ## [1] \"z_digit_re\" ## [1] \"diet\" ##  DR1TS120  DR1TP184  DR1TS080  ## 1.0000000 0.9881430 0.4243682 ## [1] \"exposures\" ##    LBXVBZ  LBDSCUSI    LBX2DF  ## 1.0000000 0.5290172 0.5224601 ## [1] \"mentalhealth\" ##      DPQ080      DPQ100      DPQ010  ## 1.000000000 0.529410851 0.006474847 ## [1] \"physical\" ##   BMXARMC    BMXBMI   BMXSAD1  ## 1.0000000 0.4755779 0.1738212 ##                   Estimate Std. Error    t value     Pr(>|t|) ## diet14            24714722    4935597  5.0074435 5.887055e-07 ## exposures14     3548786489 5014649337  0.7076839 4.792054e-01 ## mentalhealth14 -3390337990  444921274 -7.6200851 3.533879e-14 ## physical14      2749491118 1153805739  2.3829758 1.724515e-02 ## [1] 8.816321e-18 ## [1] \"z_digit_re\" ## [1] \"diet\" ##  DR1TALCO  DR1TMAGN  DR1TNUMF  ## 1.0000000 0.9683565 0.9426186 ## [1] \"exposures\" ##    LBXVTE  LBDSSESI    LBXSSE  ## 1.0000000 0.8518694 0.8457661 ## [1] \"mentalhealth\" ##     DPQ080     SLQ050     DPQ040  ## 1.00000000 0.53507056 0.03541329 ## [1] \"physical\" ##          BMXBMI         BMXARMC BPXPULS_Regular  ##       1.0000000       0.2762456       0.1541291 ##                     Estimate   Std. Error   t value     Pr(>|t|) ## diet15          1.314845e+04 9.730601e+03  1.351248 1.767342e-01 ## exposures15     5.318892e+06 2.055927e+06  2.587102 9.732817e-03 ## mentalhealth15 -1.017536e+09 2.211978e+08 -4.600118 4.425981e-06 ## physical15     -1.604315e+09 6.166489e+08 -2.601666 9.330124e-03 ## [1] 1.197074e-07 ## [1] \"z_digit_re\" ## [1] \"diet\" ##  DR1TMAGN  DR1TNUMF  DR1TALCO  ## 1.0000000 0.9496531 0.7517837 ## [1] \"exposures\" ##  LBDBSESI    LBXBSE    LBXBGE  ## 1.0000000 0.9029906 0.6420251 ## [1] \"mentalhealth\" ##    DPQ040    DPQ030    DPQ010  ## 1.0000000 0.2573740 0.1120082 ## [1] \"physical\" ##    BPXSY1    BPXDI1    BPXSY2  ## 1.0000000 0.6757993 0.3490460 ##                     Estimate   Std. Error   t value     Pr(>|t|) ## diet16          1.632785e+05 1.448843e+05  1.126958 2.598650e-01 ## exposures16    -3.189492e+10 1.526798e+10 -2.089007 3.680461e-02 ## mentalhealth16 -6.855945e+07 1.569154e+07 -4.369199 1.296198e-05 ## physical16     -6.859429e+05 3.144541e+05 -2.181377 2.924533e-02 ## [1] 8.075095e-06 ## [1] \"z_digit_re\" ## [1] \"diet\" ##  DR1TALCO  DR1TTHEO  DR1TS180  ## 1.0000000 0.9796572 0.9755861 ## [1] \"exposures\" ##    LBXBPB  LBDBPBSI    LBXV4C  ## 1.0000000 0.9055280 0.7386177 ## [1] \"mentalhealth\" ##     SLQ050     DPQ080     DPQ050  ## 1.00000000 0.29833758 0.01282615 ## [1] \"physical\" ##    BPXPLS    BMXBMI    BPXML1  ## 1.0000000 0.9842341 0.3497796 ##                    Estimate   Std. Error    t value     Pr(>|t|) ## diet18             36952.58     15721.71  2.3504174 1.882712e-02 ## exposures18     16432606.19 142818756.24  0.1150592 9.084072e-01 ## mentalhealth18 -62778284.21   9515631.83 -6.5973847 5.057262e-11 ## physical18       2568041.65    770691.19  3.3321280 8.739718e-04 ## [1] 5.7835e-12 ## [1] \"z_digit_re\" ## [1] \"diet\" ##  DR1TNUMF  DR1TFIBE    DR1TVC  ## 1.0000000 0.5120932 0.4873270 ## [1] \"exposures\" ##   LBDSCUSI     LBXSCU     LBXBCD  ## 1.00000000 0.99923423 0.01242772 ## [1] \"mentalhealth\" ##      DPQ020      DPQ010      DPQ060  ## 1.000000000 0.418305543 0.002167218 ## [1] \"physical\" ##   BMXARML    BMXBMI     BMXHT  ## 1.0000000 0.1579495 0.0843773 ####################### ########################################################################################## # https://wwwn.cdc.gov/nchs/nhanes/search/default.aspx # > interpret_simlr_vector2( resultNH$v[['exposures']], 1, n2show=5, shortnames=F ) #   LBXVBZ    LBXVOX    LBXVFN    LBX2DF  # benzene, Xylene, furan, Dimethylfuran # 1.0000000 0.3346728 0.1868323 0.0586727  ##########################################################################################"},{"path":"https://github.com/stnava/simlr_nhanes/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Brian Avants. Maintainer.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"c, \"Avants\", role=c, ) e (2025). simlr.nhanes: SiMLR example using NHANES data. R package version 1.0.0, https://github.com/stnava/simlr_nhanes.","code":"@Manual{,   title = {simlr.nhanes: SiMLR example using NHANES data},   author = {{c} and {\"Avants\"} and {role=c} and email=\"stnava@gmail.com\") )},   year = {2025},   note = {R package version 1.0.0},   url = {https://github.com/stnava/simlr_nhanes}, }"},{"path":"https://github.com/stnava/simlr_nhanes/index.html","id":"simlr_nhanes","dir":"","previous_headings":"","what":"Helper package for simlr NHANES example analyses","title":"Helper package for simlr NHANES example analyses","text":"documentation page ","code":""},{"path":"https://github.com/stnava/simlr_nhanes/index.html","id":"simlr-nhanes","dir":"","previous_headings":"","what":"SiMLR NHANES","title":"Helper package for simlr NHANES example analyses","text":"TODO Data sources: NHANES raw CAPRA curated data nhanesA Code sources: haven ","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Formula Factors — check_formula_factors","title":"Check Formula Factors — check_formula_factors","text":"Identifies factor variables formula fewer two levels.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Formula Factors — check_formula_factors","text":"","code":"check_formula_factors(formula, dataframe)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Formula Factors — check_formula_factors","text":"formula formula object. dataframe data frame containing variables formula.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Formula Factors — check_formula_factors","text":"vector factor variable names fewer two levels.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Formula Factors — check_formula_factors","text":"","code":"check_formula_factors(mpg ~ cyl + gear, mtcars) #> character(0)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"Converts data frame categorical numeric columns numeric matrix, using one-hot encoding categorical variables.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"","code":"convert_to_numeric_matrix(df)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"df data frame.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"numeric matrix.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"","code":"df <- data.frame(a = c(1, 2), b = c(\"yes\", \"no\")) convert_to_numeric_matrix(df) #>      a b_no b_yes #> [1,] 1    0     1 #> [2,] 2    1     0"},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Count Unique Values and Filter Columns — count_unique_values","title":"Count Unique Values and Filter Columns — count_unique_values","text":"Counts unique values column data frame retains columns exceeding specified threshold.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count Unique Values and Filter Columns — count_unique_values","text":"","code":"count_unique_values(df, threshold)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count Unique Values and Filter Columns — count_unique_values","text":"df data frame. threshold integer specifying minimum number unique values retain column.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count Unique Values and Filter Columns — count_unique_values","text":"data frame filtered columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count Unique Values and Filter Columns — count_unique_values","text":"","code":"df <- data.frame(a = c(1, 1, 2), b = c(\"x\", \"y\", \"z\")) count_unique_values(df, 1) #> a : 2 unique values #> b : 3 unique values #>   a b #> 1 1 x #> 2 1 y #> 3 2 z"},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Regression Formula — create_formula","title":"Create Regression Formula — create_formula","text":"Creates regression formula data frame, excluding specified columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Regression Formula — create_formula","text":"","code":"create_formula(dataframe, outcome, exclusions)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Regression Formula — create_formula","text":"dataframe input data frame. outcome outcome variable. exclusions vector columns exclude formula.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Regression Formula — create_formula","text":"formula object regression.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Regression Formula — create_formula","text":"","code":"create_formula(mtcars, \"mpg\", exclusions = c(\"cyl\", \"gear\")) #> mpg ~ disp + hp + drat + wt + qsec + vs + am + carb #> <environment: 0x12256ff78>"},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Columns with High NA Percentage — filter_na_columns","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"Filters columns data frame higher percentage NA values specified threshold.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"","code":"filter_na_columns(df, max_na_percent = 0.2)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"df data frame. max_na_percent Maximum allowed proportion NA values per column. Default 0.2.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"data frame filtered columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"","code":"filter_na_columns(data.frame(a = c(1, NA, 3), b = c(NA, NA, 3)), max_na_percent = 0.5) #>    a #> 1  1 #> 2 NA #> 3  3"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute Missing Values and Report NA Counts — impute_and_report_na","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"function imputes missing values matrix column means reports count missing values per column.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"","code":"impute_and_report_na(mat)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"mat numeric matrix.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"matrix imputed values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"","code":"mat <- matrix(c(1, NA, 3, 4, 5, NA), ncol = 2) impute_and_report_na(mat) #> No missing values detected. #>      [,1] [,2] #> [1,]    1    4 #> [2,]   NA    5 #> [3,]    3   NA"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute Missing Data — impute_data","title":"Impute Missing Data — impute_data","text":"Imputes missing values data frame. Numeric columns imputed median, categorical columns frequent category.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute Missing Data — impute_data","text":"","code":"impute_data(df)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute Missing Data — impute_data","text":"df data frame missing values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute Missing Data — impute_data","text":"data frame imputed values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute Missing Data — impute_data","text":"","code":"impute_data(data.frame(a = c(1, NA, 3), b = c(\"x\", \"y\", NA))) #>   a b #> 1 1 x #> 2 2 y #> 3 3 x"},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"Maps specific frequency categories numeric values, error handling invalid categories.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"","code":"map_freq_to_numeric(df, colname)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"df data frame containing column mapped. colname name column mapped.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"numeric vector mapped values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"","code":"map_freq_to_numeric(data.frame(freq = c(\"Not at all\", \"Several days\")), \"freq\") #> [1] 0 1"},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"function generates new matrix applying random linear transformation given latent matrix adding Gaussian noise.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"","code":"matrix_from_latent(latent_matrix, target_p, noise_sd = 0.3)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"latent_matrix numeric matrix representing latent structure (n x k). target_p integer specifying number columns output matrix. noise_sd numeric value indicating standard deviation Gaussian noise added. Default 0.3.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"numeric matrix dimensions (n x target_p), generated latent matrix random linear transformation added Gaussian noise.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"","code":"latent <- matrix(rnorm(20), nrow = 5, ncol = 4) generated_matrix <- matrix_from_latent(latent, target_p = 3, noise_sd = 0.2) print(generated_matrix) #>            [,1]        [,2]       [,3] #> [1,] -0.8420428 -2.26384990 -1.4360201 #> [2,] -1.4226564  0.01670062  2.9901238 #> [3,] -3.9410985 -6.29693119  4.4003814 #> [4,]  2.4102664  1.54497778 -0.5047176 #> [5,] -1.5365092  0.60855535  0.2409585"},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"function loops list matrices returns maximum number columns found across matrices list.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"","code":"max_columns_list(matrix_list)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"matrix_list list containing matrices. Non-matrix elements ignored warning.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"integer representing maximum number columns across matrices list.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"","code":"mat1 <- matrix(1:6, nrow = 2) mat2 <- matrix(1:12, nrow = 3) mat3 <- matrix(1:4, nrow = 2) max_columns_list(list(mat1, mat2, mat3)) # Returns 2 #> [1] 4"},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"Merges columns type two data frames based common column names.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"","code":"merge_same_type_columns(df1, df2)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"df1 First data frame. df2 Second data frame.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"merged data frame containing matching columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"","code":"merge_same_type_columns(data.frame(a = 1:3), data.frame(a = 4:6)) #> Error in bind_rows(df1[, matching_columns, drop = FALSE], df2[, matching_columns,     drop = FALSE]): could not find function \"bind_rows\""},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"function loops list matrices returns minimum number columns found across matrices list.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"","code":"min_columns_list(matrix_list)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"matrix_list list containing matrices. Non-matrix elements ignored warning.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"integer representing minimum number columns across matrices list.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"","code":"mat1 <- matrix(1:6, nrow = 2) mat2 <- matrix(1:12, nrow = 3) mat3 <- matrix(1:4, nrow = 2) min_columns_list(list(mat1, mat2, mat3)) # Returns 2 #> [1] 2"},{"path":"https://github.com/stnava/simlr_nhanes/reference/nhanescog.html","id":null,"dir":"Reference","previous_headings":"","what":"NHANES cognition data — nhanescog","title":"NHANES cognition data — nhanescog","text":"NHANES cognition data","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/nhanescog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NHANES cognition data — nhanescog","text":"","code":"nhanescog"},{"path":"https://github.com/stnava/simlr_nhanes/reference/nhanescog.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"NHANES cognition data — nhanescog","text":"Curated nhanes cognition data CAPRA","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/nhanescog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NHANES cognition data — nhanescog","text":"","code":"if (FALSE) { # \\dontrun{  data(\"nhanescog_2011_2014\") } # }"},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and Filter XPT File — read_and_filter_xpt","title":"Read and Filter XPT File — read_and_filter_xpt","text":"Reads XPT file, converts data frame, renames first column \"ID\", filters based unique value counts.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and Filter XPT File — read_and_filter_xpt","text":"","code":"read_and_filter_xpt(file_path, threshold = 100)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and Filter XPT File — read_and_filter_xpt","text":"file_path Path XPT file. threshold Numeric threshold filter columns based unique value counts. Default 100.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and Filter XPT File — read_and_filter_xpt","text":"data frame filtered columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and Filter XPT File — read_and_filter_xpt","text":"","code":"read_and_filter_xpt(\"data.xpt\", threshold = 50) #> Error in read_xpt(file_path): could not find function \"read_xpt\""}]
