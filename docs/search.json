[{"path":"https://github.com/stnava/simlr_nhanes/articles/simlr_nhanes.html","id":"nhanes-example","dir":"Articles","previous_headings":"","what":"NHANES example","title":"simlr: nhanes application explained","text":"five publicly available data categories : - Demographics (DEMO) - Dietary (DIET) - Examination (EXAM) - Laboratory (LAB) - Questionnaire (Q). abbreviated forms parentheses may substituted long form nhanesA commands. INDFMPIR: Poverty Income Ratio (0 = income, higher values = higher income relative poverty threshold). • INDHHIN2: Annual Household Income (categorized ranges). • DMDEDUC2: Education Level (adults 20+ years). • OCD390G: Employment Status (occupation questionnaire).","code":"# Demographic data (e.g., 2011-2012 cycle) demo_data <- nhanes('DEMO_G') cog_data <- nhanes('CFQ_G') depression_data <- nhanes('DPQ_G') sleep_data <- nhanes('SLQ_G') bp = nhanes( \"BPX_G\") bm = nhanes( \"BMX_G\") env_data <- nhanes('PBCD_G')  # Example for phthalates and blood metals  # Demographic data (e.g., 2013-2014 cycle) demo_data13 <- nhanes('DEMO_H') cog_data13<- nhanes('CFQ_H') depression_data13 <- nhanes('DPQ_H') sleep_data13 <- nhanes('SLQ_H') bp13 = nhanes( \"BPX_H\") bm13 = nhanes( \"BMX_H\") env_data13 <- nhanes('PBCD_H')  # Example for phthalates and blood metals   phdata <- nhanes('PHTHTE_G')  # Example for phthalates and blood metals phdata13 <- nhanes('PHTHTE_H')  # Example for phthalates and blood metals # pfasd <- nhanes('SSPFAS_G')  # Example for phthalates and blood metals # pfasd13 <- nhanes('SSPFAS_H')  # Example for phthalates and blood metals vocd <- nhanes('VOCWB_G')  # Example for phthalates and blood metals vocd13 <- nhanes('VOCWB_H')  # Example for phthalates and blood metals hvmt <- nhanes('UAS_G')  # Example for phthalates and blood metals hvmt13 <- nhanes('UAS_H')  # Example for phthalates and blood metals pst <- nhanes('PSTPOL_G')  # Example for phthalates and blood metals pst13 <- nhanes('PSTPOL_H')  # Example for phthalates and blood metals pfc <- nhanes('PFC_G')  # Example for phthalates and blood metals pfc13 <- nhanes('PFC_H')  # Example for phthalates and blood metals ## simpleWarning in download.file(url, tf, mode = \"wb\", quiet = TRUE): downloaded length 0 != reported length 1245 mm <- nhanes('UHM_G')  # Example for phthalates and blood metals mm13 <- nhanes('UHM_H')  # Example for phthalates and blood metals ## simpleWarning in download.file(url, tf, mode = \"wb\", quiet = TRUE): downloaded length 0 != reported length 1245 cu <- nhanes('CUSEZN_G')  # Example for phthalates and blood metals cu13 <- nhanes('CUSEZN_H')  # Example for phthalates and blood metals ig <- nhanes('IHgEM_G')  # Example for phthalates and blood metals ig13 <- nhanes('IHgEM_H')  # Example for phthalates and blood metals uh <- nhanes('UHG_G')  # Example for phthalates and blood metals uh13 <- nhanes('UHG_H')  # Example for phthalates and blood metals   merge_nhanes_data <- function( joinid, nacol,  ...) {   datasets <- list(...)   dfout <- Reduce(function(x, y) {     left_join(x, y, by = joinid)  # Adjust \"ID\" to your common column name   }, datasets)   dfout = dfout[ !is.na( dfout[,nacol] ), ]   return( dfout ) }  merged_data <- merge_nhanes_data( 'SEQN', 'CFDDS',   merge_same_type_columns(cog_data, cog_data13),   merge_same_type_columns(demo_data,demo_data13),   merge_same_type_columns(depression_data,depression_data13),   merge_same_type_columns(sleep_data,sleep_data13),   merge_same_type_columns(bp,bp13),   merge_same_type_columns(bm,bm13),   merge_same_type_columns(env_data, env_data13),   merge_same_type_columns(phdata, phdata13),   merge_same_type_columns(vocd, vocd13),   merge_same_type_columns(cu, cu13),   merge_same_type_columns(ig, ig13),   merge_same_type_columns(uh, uh13),   mm, #  merge_same_type_columns(pst, pst13) ) #  merge_same_type_columns(pfc, pfc13) ,   merge_same_type_columns(hvmt, hvmt13))  table(merged_data$RIAGENDR) ##  ##   Male Female  ##   1469   1545 idata = impute_data(merged_data) idata = idata[ idata$BPXDI1 > 20 & idata$BPXDI2 > 20 & idata$BPXDI3 > 20 & idata$BPXDI4 > 20,  ] fdata <- filter_na_columns(merged_data, max_na_percent = 0.5)  # Removes columns with >10% NAs fdata = fdata[ na2f(fdata$BPXDI1 > 20 & fdata$BPXDI2 > 20 & fdata$BPXDI3 > 20 ),  ]  myform =  create_formula( fdata, 'CFDDS', c('SEQN', 'RIDAGEMN','RIDRETH3', 'CFASTAT', 'CFDCRNC', 'CFDCIT', 'CFDCST', 'CFDAPP', 'CFDAST', 'CFALANG', 'BPAARM', 'CFDCCS', 'CFDCST', 'CFDCIT', 'CFDCSR', 'CFDCIR', 'CFDCST', 'CFDCIT', 'CFDARNC', 'INDHHIN2','DMDHRBR4','INDFMIN2','PEASCST1','PEASCCT1','PEASCTM1','BPACSZ','BPXML1','URXMBP','URXMC1','URDUMMAL','SLD010H','LBXBMN','URXCNP','URXECP','URXMHH','URXMHP','URXMHNC','LBXV06','LBXV2A','LBXV3B','LBXV4C','LBXVCB','LBXVEB','LBXVCB','LBXVIPB','LBXVMC','LBXVOX','LBXVTC','LBXVTE','LBXVXY','URXUAS5','URXUAB','URXUAC','URXUMMA','URXUAS3','LBXBSE', # getNamesFromDataframe( 'DPQ',depression_data, exclusions=c('DPQ080','DPQ030''DPQ080',)), getNamesFromDataframe( 'DPQ',depression_data, exclusions=c('DPQ100')), getNamesFromDataframe( 'URXUCR',fdata ), getNamesFromDataframe( 'BMXSAD',fdata ), getNamesFromDataframe( 'BPAEN',fdata ), getNamesFromDataframe( 'BPXP',fdata ), getNamesFromDataframe( 'DMD',fdata ), getNamesFromDataframe( 'DMDHHSZ',fdata ), getNamesFromDataframe( 'WT',fdata ), getNamesFromDataframe( 'SDM',fdata ), getNamesFromDataframe( 'DMQ',fdata ), getNamesFromDataframe( 'FIA',fdata ), getNamesFromDataframe( 'MIA',fdata ), getNamesFromDataframe( 'AIA',fdata ), getNamesFromDataframe( 'DMDCIT',fdata ), getNamesFromDataframe( 'DMDYRS',fdata ), getNamesFromDataframe( 'RIDE',fdata ), getNamesFromDataframe( 'CFDCST',fdata ), getNamesFromDataframe( 'SDDSRVY', fdata ), getNamesFromDataframe( 'CFDCIT',fdata ), getNamesFromDataframe( 'LC',fdata ), getNamesFromDataframe( 'SI',fdata ) ) ) problematic_factors <- check_formula_factors(myform, df) print(problematic_factors) ## character(0) idata2=impute_data(fdata ) mdl = lm( myform, data=idata2) summary( mdl ) ##  ## Call: ## lm(formula = myform, data = idata2) ##  ## Residuals: ##     Min      1Q  Median      3Q     Max  ## -57.065  -8.746  -0.149   8.751  51.405  ##  ## Coefficients: ##                                               Estimate Std. Error t value ## (Intercept)                                  41.200175   8.869718   4.645 ## RIAGENDRFemale                                7.748299   0.795036   9.746 ## RIDAGEYR                                     -0.778744   0.046964 -16.582 ## RIDRETH1Other Hispanic                       -1.810618   1.243582  -1.456 ## RIDRETH1Non-Hispanic White                   11.845160   1.081154  10.956 ## RIDRETH1Non-Hispanic Black                   -1.011377   1.162275  -0.870 ## RIDRETH1Other Race - Including Multi-Racial   9.752206   1.320450   7.386 ## INDFMPIR                                      3.043934   0.184266  16.519 ## DPQ100Somewhat difficult,                    -2.177083   0.821185  -2.651 ## DPQ100Very difficult,                        -5.849294   1.779775  -3.287 ## DPQ100Extremely difficult                    -6.132302   2.671340  -2.296 ## DPQ100Don't know                            -21.345618  13.441302  -1.588 ## DPQ100Refused                                -4.369821  13.473080  -0.324 ## SLQ050No                                      0.234108   0.637776   0.367 ## SLQ060No                                     -0.289101   0.905408  -0.319 ## SLQ060Don't know                            -18.227650   6.077810  -2.999 ## BPXSY1                                       -0.134809   0.044770  -3.011 ## BPXDI1                                       -0.070171   0.052973  -1.325 ## BPXSY2                                        0.106303   0.052752   2.015 ## BPXDI2                                        0.111459   0.059465   1.874 ## BPXSY3                                       -0.037299   0.048037  -0.776 ## BPXDI3                                        0.055670   0.055414   1.005 ## BMXHT                                         0.422215   0.058237   7.250 ## BMXBMI                                        0.482143   0.115525   4.173 ## BMXLEG                                       -0.081598   0.118799  -0.687 ## BMXARML                                      -0.433072   0.175115  -2.473 ## BMXARMC                                       0.008928   0.125241   0.071 ## BMXWAIST                                     -0.118319   0.055342  -2.138 ## BMDAVSAD                                     -0.371465   0.160727  -2.311 ## LBXBPB                                       -0.329628   0.201804  -1.633 ## LBXBCD                                       -3.169053   0.730773  -4.337 ## LBXTHG                                        1.200915   0.950518   1.263 ## LBXIHG                                        0.320148   1.682264   0.190 ## LBXBGE                                        9.464073   9.732142   0.972 ## LBXBGM                                       -1.144592   0.893582  -1.281 ##                                             Pr(>|t|)     ## (Intercept)                                 3.57e-06 *** ## RIAGENDRFemale                               < 2e-16 *** ## RIDAGEYR                                     < 2e-16 *** ## RIDRETH1Other Hispanic                       0.14552     ## RIDRETH1Non-Hispanic White                   < 2e-16 *** ## RIDRETH1Non-Hispanic Black                   0.38429     ## RIDRETH1Other Race - Including Multi-Racial 2.04e-13 *** ## INDFMPIR                                     < 2e-16 *** ## DPQ100Somewhat difficult,                    0.00807 **  ## DPQ100Very difficult,                        0.00103 **  ## DPQ100Extremely difficult                    0.02178 *   ## DPQ100Don't know                             0.11240     ## DPQ100Refused                                0.74571     ## SLQ050No                                     0.71360     ## SLQ060No                                     0.74952     ## SLQ060Don't know                             0.00273 **  ## BPXSY1                                       0.00263 **  ## BPXDI1                                       0.18540     ## BPXSY2                                       0.04399 *   ## BPXDI2                                       0.06099 .   ## BPXSY3                                       0.43755     ## BPXDI3                                       0.31518     ## BMXHT                                       5.49e-13 *** ## BMXBMI                                      3.10e-05 *** ## BMXLEG                                       0.49223     ## BMXARML                                      0.01346 *   ## BMXARMC                                      0.94317     ## BMXWAIST                                     0.03261 *   ## BMDAVSAD                                     0.02090 *   ## LBXBPB                                       0.10251     ## LBXBCD                                      1.50e-05 *** ## LBXTHG                                       0.20655     ## LBXIHG                                       0.84908     ## LBXBGE                                       0.33092     ## LBXBGM                                       0.20034     ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Residual standard error: 13.37 on 2562 degrees of freedom ## Multiple R-squared:  0.4155, Adjusted R-squared:  0.4078  ## F-statistic: 53.58 on 34 and 2562 DF,  p-value: < 2.2e-16 regs <- regularizeSimlr(nh_list,fraction=0.15,sigma=rep(1.0,length(nh_list))) regs <- regularizeSimlr(nh_list) regs[[2]]=diag(2) initu=initializeSimlr( nh_list, k=40, jointReduction=TRUE ) resultNH <- simlr(nh_list, iterations=100,          sparsenessQuantiles=rep(0.5,length(nh_list)),         positivities=rep(\"positive\",length(nh_list)),          energyType='regression', mixAlg='ica', #        energyType='cca', mixAlg='pca', #        scale=c(\"centerAndScale\", \"np\"),         scale=c( \"robust\", \"centerAndScale\", \"np\" ),         constraint=\"Stiefelx1000x1000\",         initialUMatrix=initu, verbose=T) ############### projlist=list() mysimk=2 for ( k in 1:length(nh_list)) {     rownames(resultNH$v[[k]])=colnames( nh_list[[k]])     ux=data.frame(nh_list[[k]] %*% abs(resultNH$v[[k]][,1:mysimk]))     colnames(ux)=paste0(names(nh_list)[k],1:ncol(ux))     projlist[[length(projlist)+1]]=ux } simdf=simdf2=dplyr::bind_cols(projlist) simdf2$CFDDS=nhan$CFDDS simdf2$CFDAST=nhan$CFDAST myform = paste0( \"CFDDS ~ \",paste0( colnames(simdf), collapse='+')) mdl = lm( myform, data=simdf2 ) print( summary( mdl ) ) ####################### interpret_simlr_vector2( resultNH$v[['exposures']], 1, n2show=5, shortnames=F ) interpret_simlr_vector2( resultNH$v[['exposures']], 2, n2show=5, shortnames=F ) # https://wwwn.cdc.gov/nchs/nhanes/search/default.aspx # > interpret_simlr_vector2( resultNH$v[['exposures']], 1, n2show=5, shortnames=F ) #   LBXVBZ    LBXVOX    LBXVFN    LBX2DF  # benzene, Xylene, furan, Dimethylfuran # 1.0000000 0.3346728 0.1868323 0.0586727  ####################### ###"},{"path":"https://github.com/stnava/simlr_nhanes/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Brian Avants. Maintainer.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"c, \"Avants\", role=c, ) e (2025). simlr.nhanes: SiMLR example using NHANES data. R package version 1.0.0, https://github.com/stnava/simlr_nhanes.","code":"@Manual{,   title = {simlr.nhanes: SiMLR example using NHANES data},   author = {{c} and {\"Avants\"} and {role=c} and email=\"stnava@gmail.com\") )},   year = {2025},   note = {R package version 1.0.0},   url = {https://github.com/stnava/simlr_nhanes}, }"},{"path":"https://github.com/stnava/simlr_nhanes/index.html","id":"simlr_nhanes","dir":"","previous_headings":"","what":"Helper package for simlr NHANES example analyses","title":"Helper package for simlr NHANES example analyses","text":"documentation page ","code":""},{"path":"https://github.com/stnava/simlr_nhanes/index.html","id":"simlr-nhanes","dir":"","previous_headings":"","what":"SiMLR NHANES","title":"Helper package for simlr NHANES example analyses","text":"TODO Data sources: NHANES raw CAPRA curated data nhanesA Code sources: haven ","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Formula Factors — check_formula_factors","title":"Check Formula Factors — check_formula_factors","text":"Identifies factor variables formula fewer two levels.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Formula Factors — check_formula_factors","text":"","code":"check_formula_factors(formula, dataframe)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Formula Factors — check_formula_factors","text":"formula formula object. dataframe data frame containing variables formula.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Formula Factors — check_formula_factors","text":"vector factor variable names fewer two levels.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Formula Factors — check_formula_factors","text":"","code":"check_formula_factors(mpg ~ cyl + gear, mtcars) #> character(0)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"Converts data frame categorical numeric columns numeric matrix, using one-hot encoding categorical variables.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"","code":"convert_to_numeric_matrix(df)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"df data frame.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"numeric matrix.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"","code":"df <- data.frame(a = c(1, 2), b = c(\"yes\", \"no\")) convert_to_numeric_matrix(df) #>      a b_no b_yes #> [1,] 1    0     1 #> [2,] 2    1     0"},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Count Unique Values and Filter Columns — count_unique_values","title":"Count Unique Values and Filter Columns — count_unique_values","text":"Counts unique values column data frame retains columns exceeding specified threshold.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count Unique Values and Filter Columns — count_unique_values","text":"","code":"count_unique_values(df, threshold)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count Unique Values and Filter Columns — count_unique_values","text":"df data frame. threshold integer specifying minimum number unique values retain column.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count Unique Values and Filter Columns — count_unique_values","text":"data frame filtered columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count Unique Values and Filter Columns — count_unique_values","text":"","code":"df <- data.frame(a = c(1, 1, 2), b = c(\"x\", \"y\", \"z\")) count_unique_values(df, 1) #> a : 2 unique values #> b : 3 unique values #>   a b #> 1 1 x #> 2 1 y #> 3 2 z"},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Regression Formula — create_formula","title":"Create Regression Formula — create_formula","text":"Creates regression formula data frame, excluding specified columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Regression Formula — create_formula","text":"","code":"create_formula(dataframe, outcome, exclusions)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Regression Formula — create_formula","text":"dataframe input data frame. outcome outcome variable. exclusions vector columns exclude formula.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Regression Formula — create_formula","text":"formula object regression.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Regression Formula — create_formula","text":"","code":"create_formula(mtcars, \"mpg\", exclusions = c(\"cyl\", \"gear\")) #> mpg ~ disp + hp + drat + wt + qsec + vs + am + carb #> <environment: 0x11b45f7e8>"},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Columns with High NA Percentage — filter_na_columns","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"Filters columns data frame higher percentage NA values specified threshold.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"","code":"filter_na_columns(df, max_na_percent = 0.2)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"df data frame. max_na_percent Maximum allowed proportion NA values per column. Default 0.2.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"data frame filtered columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"","code":"filter_na_columns(data.frame(a = c(1, NA, 3), b = c(NA, NA, 3)), max_na_percent = 0.5) #>    a #> 1  1 #> 2 NA #> 3  3"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute Missing Values and Report NA Counts — impute_and_report_na","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"function imputes missing values matrix column means reports count missing values per column.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"","code":"impute_and_report_na(mat)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"mat numeric matrix.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"matrix imputed values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"","code":"mat <- matrix(c(1, NA, 3, 4, 5, NA), ncol = 2) impute_and_report_na(mat) #> No missing values detected. #>      [,1] [,2] #> [1,]    1    4 #> [2,]   NA    5 #> [3,]    3   NA"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute Missing Data — impute_data","title":"Impute Missing Data — impute_data","text":"Imputes missing values data frame. Numeric columns imputed median, categorical columns frequent category.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute Missing Data — impute_data","text":"","code":"impute_data(df)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute Missing Data — impute_data","text":"df data frame missing values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute Missing Data — impute_data","text":"data frame imputed values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute Missing Data — impute_data","text":"","code":"impute_data(data.frame(a = c(1, NA, 3), b = c(\"x\", \"y\", NA))) #>   a b #> 1 1 x #> 2 2 y #> 3 3 x"},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"Maps specific frequency categories numeric values, error handling invalid categories.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"","code":"map_freq_to_numeric(df, colname)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"df data frame containing column mapped. colname name column mapped.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"numeric vector mapped values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"","code":"map_freq_to_numeric(data.frame(freq = c(\"Not at all\", \"Several days\")), \"freq\") #> [1] 0 1"},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"function generates new matrix applying random linear transformation given latent matrix adding Gaussian noise.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"","code":"matrix_from_latent(latent_matrix, target_p, noise_sd = 0.3)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"latent_matrix numeric matrix representing latent structure (n x k). target_p integer specifying number columns output matrix. noise_sd numeric value indicating standard deviation Gaussian noise added. Default 0.3.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"numeric matrix dimensions (n x target_p), generated latent matrix random linear transformation added Gaussian noise.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"","code":"latent <- matrix(rnorm(20), nrow = 5, ncol = 4) generated_matrix <- matrix_from_latent(latent, target_p = 3, noise_sd = 0.2) print(generated_matrix) #>            [,1]        [,2]       [,3] #> [1,] -0.8420428 -2.26384990 -1.4360201 #> [2,] -1.4226564  0.01670062  2.9901238 #> [3,] -3.9410985 -6.29693119  4.4003814 #> [4,]  2.4102664  1.54497778 -0.5047176 #> [5,] -1.5365092  0.60855535  0.2409585"},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"Merges columns type two data frames based common column names.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"","code":"merge_same_type_columns(df1, df2)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"df1 First data frame. df2 Second data frame.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"merged data frame containing matching columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"","code":"merge_same_type_columns(data.frame(a = 1:3), data.frame(a = 4:6)) #> Error in bind_rows(df1[, matching_columns, drop = FALSE], df2[, matching_columns,     drop = FALSE]): could not find function \"bind_rows\""},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and Filter XPT File — read_and_filter_xpt","title":"Read and Filter XPT File — read_and_filter_xpt","text":"Reads XPT file, converts data frame, renames first column \"ID\", filters based unique value counts.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and Filter XPT File — read_and_filter_xpt","text":"","code":"read_and_filter_xpt(file_path, threshold = 100)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and Filter XPT File — read_and_filter_xpt","text":"file_path Path XPT file. threshold Numeric threshold filter columns based unique value counts. Default 100.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and Filter XPT File — read_and_filter_xpt","text":"data frame filtered columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and Filter XPT File — read_and_filter_xpt","text":"","code":"read_and_filter_xpt(\"data.xpt\", threshold = 50) #> Error in read_xpt(file_path): could not find function \"read_xpt\""}]
