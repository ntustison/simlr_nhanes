[{"path":"https://github.com/stnava/simlr_nhanes/articles/simlr_nhanes.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"simlr: nhanes application explained","text":"extract distinct related types data NHANES. data types : demographics: age, sex, educational attainment; diet: measurements nutritional status; physical: blood pressure physical measurements; mental health: outcomes Patient Health Questionnaire-9; environmental exposures: metals related environmental toxins. combined SiMLR unsupervised dimensionality reduction. resulting low-dimensional representations used joint prediction cognitive outcomes. 400 subjects measurements available along environmental exposures.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/articles/simlr_nhanes.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"simlr: nhanes application explained","text":"Load relevant librarys.","code":"# Load necessary libraries library(ggplot2) library(ggfortify) library(gridExtra) library(ellipse) ##  ## Attaching package: 'ellipse' ## The following object is masked from 'package:graphics': ##  ##     pairs library(ANTsR) ## Warning: replacing previous import 'stats::filter' by 'dplyr::filter' when ## loading 'ANTsR' ## ANTsR 0.6.1 ## Environment variables set either in .Renviron or with a seed (e.g. XXX):  ## Sys.setenv(ANTS_RANDOM_SEED = XXX) ## Sys.setenv(ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS = 1) ## may influence reproducibility in some methods. See ## https://github.com/ANTsX/ANTs/wiki/antsRegistration-reproducibility-issues ## for more information.Also see *repro methods in antsRegistration. ##  ## Attaching package: 'ANTsR' ## The following objects are masked from 'package:stats': ##  ##     sd, var ## The following objects are masked from 'package:base': ##  ##     all, any, apply, max, min, prod, range, sum library(subtyper) ## Warning: replacing previous import 'ciTools::add_ci' by 'gtsummary::add_ci' ## when loading 'subtyper' ## Warning: replacing previous import 'dplyr::as_data_frame' by ## 'igraph::as_data_frame' when loading 'subtyper' ## Warning: replacing previous import 'dplyr::groups' by 'igraph::groups' when ## loading 'subtyper' ## Warning: replacing previous import 'dplyr::union' by 'igraph::union' when ## loading 'subtyper' ## Warning: replacing previous import 'gtsummary::add_ci' by 'ciTools::add_ci' ## when loading 'subtyper' ## Registered S3 methods overwritten by 'fmsb': ##   method    from ##   print.roc pROC ##   plot.roc  pROC ## Warning: replacing previous import 'gt::gt' by 'globaltest::gt' when loading ## 'subtyper' ## Warning: replacing previous import 'dplyr::rename' by 'plyr::rename' when ## loading 'subtyper' library( nhanesA ) library( simlr.nhanes ) library( dplyr ) ##  ## Attaching package: 'dplyr' ## The following object is masked from 'package:Biobase': ##  ##     combine ## The following objects are masked from 'package:BiocGenerics': ##  ##     combine, intersect, setdiff, union ## The following object is masked from 'package:gridExtra': ##  ##     combine ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union data(\"nhanescog_2011_2014\") dtname=\"/Users/stnava/Downloads/cleaned_nhanes_21743372/41731260_dictionary_nhanes.csv\" if ( file.exists( dtname ) ) {   nhanes_dict = read.csv( dtname )    }"},{"path":"https://github.com/stnava/simlr_nhanes/articles/simlr_nhanes.html","id":"nhanes-example","dir":"Articles","previous_headings":"","what":"NHANES example","title":"simlr: nhanes application explained","text":"download data fly merge together using embedded data well nhanesA package.  Define categories data can used identify low-dimensional representation based SiMLR objective. Run methods using reasonable defaults recommended prior work. Apply learned representations data matrices.","code":"## simpleWarning in download.file(url, tf, mode = \"wb\", quiet = TRUE): downloaded length 0 != reported length 1245 ##  ##  ## simpleWarning in download.file(url, tf, mode = \"wb\", quiet = TRUE): downloaded length 0 != reported length 1245 ##  ##   Male Female  ##   1469   1545 ## character(0) #################################### if ( TRUE ) {   fdatanum = convert_to_numeric_matrix( fdata )   tarcols = colnames(fdatanum)   grepper =multigrep( c(\"_NA\",\"limit\"),tarcols)    fdatanum = fdatanum[ , -grepper]   tarcols=tarcols[-grepper]   fdatanum = data.frame( (fdatanum))   colnames(fdatanum)=tarcols } colcats=rep(\"Basic\",ncol(fdatanum)) colcats[ colnames(fdatanum) %in%  c(\"ridageyr\",   getNamesFromDataframe(\"riagendr\",fdatanum),   getNamesFromDataframe(\"race\",fdatanum),   \"dmdeduc2\",\"INDFMPIR\") ]='demog' bpname=getNamesFromDataframe( \"BPX\",fdatanum) bmname=getNamesFromDataframe( \"BMX\",fdatanum) colcats[ colnames(fdatanum) %in%  c(bmname,bpname,\"Testosterone\",\"TotChol\",\"Diabetes\" ) ]='physical' colcats[ colnames(fdatanum) %in%   c(   getNamesFromDataframe( \"DPQ\", fdatanum ),    getNamesFromDataframe( \"SLQ\", fdatanum ) )  ]='mentalhealth' x=c('LC','.x','.y','URDUMMAL','LBXVDE','LBX4CE') colcats[ colnames(fdatanum) %in%  getNamesFromDataframe( \"LBX\", fdatanum, exclusions=x ) ]='exposures' colcats[ colnames(fdatanum) %in%  getNamesFromDataframe( \"LBD\", fdatanum, exclusions=x ) ]='exposures' colcats[ colnames(fdatanum) %in%  getNamesFromDataframe( \"URX\", fdatanum, exclusions=x ) ]='exposures' colcats[ colnames(fdatanum) %in%  getNamesFromDataframe( \"URD\", fdatanum, exclusions=x ) ]='exposures' colcats[ colnames(fdatanum) %in%  getNamesFromDataframe( \"LBC\", fdatanum, exclusions=x ) ]='exposures' colcats[ colnames(fdatanum) %in%  getNamesFromDataframe( \"DR1T\", fdatanum, exclusions='DR1TWS' ) ]='diet' # colcats[ colnames(fdatanum) %in%  getNamesFromDataframe( \"cfd\", fdatanum )[-1] ]='digitspan' tbl=table(colcats) for ( nm in names(tbl)) {   expmiss=colSums(is.na(fdatanum[ ,colcats == nm ]) )   colcats[ colnames(fdatanum) %in% names(expmiss)[ expmiss > 800 ]  ] = 'Basic'   } tbl=table(colcats) ############## nh_list=list() knm=names(tbl)[-c(1)] mycc = complete.cases( fdatanum[ , colcats %in% 'demog' ]) # mycc = !is.na(fdata$LBXTHG) # complete.cases( fdatanum[ , colcats %in% 'exposures' ]) table(mycc) ## mycc ## FALSE  TRUE  ##   210  2387 doimp=TRUE for ( k in knm ) {     print(k)     temp0=(fdatanum[mycc,colcats==k])     temp = data.frame(convert_to_numeric_matrix( temp0 ))     vv=apply( temp, 2, FUN=var, na.rm=T )     temp = temp[ , vv > 0 ]     if ( k %in% c('exposures','diet') | TRUE ) {       nn = colnames(temp)       for (  jj in 1:ncol(temp) ) { # temp = truncatehi(temp, nn[jj], t = 50, removeit = FALSE)         temp[ , nn[jj] ] = sqrt(temp[ , nn[jj] ]-min(temp[ , nn[jj] ],na.rm=T))         }       colnames(temp) = nn       temp = remove_perfectly_correlated( data.frame( temp ), tolerance=0.05 )       vv=apply( temp, 2, FUN=var, na.rm=T )       temp = temp[ , vv > 0 ]     }     for ( j in 1:ncol(temp) ) { #        hist( temp[,j], main=colnames(temp)[j]) #        Sys.sleep(1)         }     nh_list[[length(nh_list)+1]]=data.matrix( ( temp ) )     print(colnames(nh_list[[length(nh_list)]])) #    nh_list[[length(nh_list)]]=impute_and_report_na(nh_list[[length(nh_list)]] )     } ## [1] \"demog\" ## [1] \"ridageyr\"   \"dmdeduc2\"   \"INDFMPIR\"   \"riagendr_1\" \"race_1\"     ## [6] \"race_2\"     \"race_3\"     \"race_4\"     ## [1] \"diet\" ##  [1] \"DR1TNUMF\" \"DR1TKCAL\" \"DR1TPROT\" \"DR1TCARB\" \"DR1TSUGR\" \"DR1TFIBE\" ##  [7] \"DR1TTFAT\" \"DR1TSFAT\" \"DR1TPFAT\" \"DR1TCHOL\" \"DR1TATOC\" \"DR1TATOA\" ## [13] \"DR1TRET\"  \"DR1TVARA\" \"DR1TACAR\" \"DR1TBCAR\" \"DR1TCRYP\" \"DR1TLYCO\" ## [19] \"DR1TLZ\"   \"DR1TVB1\"  \"DR1TVB2\"  \"DR1TNIAC\" \"DR1TVB6\"  \"DR1TFOLA\" ## [25] \"DR1TFA\"   \"DR1TFF\"   \"DR1TCHL\"  \"DR1TVB12\" \"DR1TB12A\" \"DR1TVC\"   ## [31] \"DR1TVD\"   \"DR1TVK\"   \"DR1TCALC\" \"DR1TPHOS\" \"DR1TMAGN\" \"DR1TIRON\" ## [37] \"DR1TZINC\" \"DR1TCOPP\" \"DR1TSODI\" \"DR1TPOTA\" \"DR1TSELE\" \"DR1TCAFF\" ## [43] \"DR1TTHEO\" \"DR1TALCO\" \"DR1TMOIS\" \"DR1TS040\" \"DR1TS080\" \"DR1TS120\" ## [49] \"DR1TS140\" \"DR1TM161\" \"DR1TM201\" \"DR1TM221\" \"DR1TP183\" \"DR1TP184\" ## [55] \"DR1TP204\" \"DR1TP205\" \"DR1TP225\" \"DR1TP226\" ## [1] \"exposures\" ## [1] \"LBXBPB\" \"LBXBCD\" \"LBXTHG\" \"LBXBSE\" \"LBXBMN\" \"LBXIHG\" \"LBXBGE\" ## [1] \"mentalhealth\" ##  [1] \"DPQ010\" \"DPQ020\" \"DPQ030\" \"DPQ040\" \"DPQ050\" \"DPQ060\" \"DPQ070\" \"DPQ080\" ##  [9] \"DPQ090\" \"SLQ050\" \"SLQ060\" ## [1] \"physical\" ##  [1] \"BPXPLS\"          \"BPXML1\"          \"BPXSY1\"          \"BPXDI1\"          ##  [5] \"BPXSY2\"          \"BPXDI2\"          \"BPXSY3\"          \"BPXDI3\"          ##  [9] \"BMXWT\"           \"BMXHT\"           \"BMXBMI\"          \"BMXLEG\"          ## [13] \"BMXARML\"         \"BMXARMC\"         \"BMXWAIST\"        \"BMXSAD1\"         ## [17] \"BPXPULS_Regular\" \"BPXPTY_Radial\" names(nh_list)=knm ##### ################################################################################ # regs <- regularizeSimlr(nh_list,fraction=0.15,sigma=rep(1.0,length(nh_list))) # regs=list() wdemog=which( knm == 'demog') for ( wdemog in 1:length(nh_list) ) {   nh_list[[wdemog]]=antsrimpute( nh_list[[wdemog]] )   regs[[ wdemog]]=diag( ncol(nh_list[[wdemog]])) } # regs = regularizeSimlr(nh_list) names( regs ) = knm[ -1 ] initu=initializeSimlr( nh_list, k=round(max_columns_list(nh_list)), jointReduction=TRUE ) initu=initializeSimlr( nh_list, k=round(max_columns_list(nh_list)*0.8), jointReduction=TRUE ) ########################### ###########################  if ( ! exists(\"resultNH\") ) {   mysigns = rep(\"positive\",length(nh_list))   mysigns[ (knm) %in% c('exposures','diet') ]='either'   params = list( list() )   params[[1]][[1]] = c('cca','pca')   params[[1]][[2]] = c('centerAndScale','np')   params[[2]]=list()   params[[2]][[1]] = c('regression','ica')   params[[2]][[2]] = c('whiten','np')   pindex = 2   resultNH <- simlr( nh_list,          iterations=100,         sparsenessQuantiles=rep(0.5,length(nh_list)),         positivities=mysigns,          energyType=params[[pindex]][[1]][1], mixAlg=params[[pindex]][[1]][2],         scale=params[[pindex]][[2]],         constraint=\"Stiefelx10x10\",         randomSeed=99,         initialUMatrix=initu, verbose=T )   } ## [1] \"Stiefel\" \"10\"      \"10\"      ## [1] \"     <0> BUILD-V <0> BUILD-V <0> BUILD-V <0> BUILD-V <0>    \" ## [1] \"initialDataTerm: 2.62989681313549  <o> mixer: ica  <o> E:  regression\" ## [1] \"Iteration: 1 bestEv: 14.4059399643926 bestIt: 1 CE: 14.4059399643926 featOrth: 0.137441320516198\" ## [1] \"Iteration: 2 bestEv: 1.71436742077834 bestIt: 2 CE: 1.71436742077834 featOrth: 0.130745395408405\" ## [1] \"Iteration: 3 bestEv: 1.07827632965365 bestIt: 3 CE: 1.07827632965365 featOrth: 0.10902001631207\" ## [1] \"Iteration: 4 bestEv: 0.987946722907712 bestIt: 4 CE: 0.987946722907712 featOrth: 0.0990597953669404\" ## [1] \"Iteration: 5 bestEv: 0.950201586351703 bestIt: 5 CE: 0.950201586351703 featOrth: 0.0926611436879981\" ## [1] \"Iteration: 6 bestEv: 0.872628355997215 bestIt: 6 CE: 0.872628355997215 featOrth: 0.0877332967677394\" ## [1] \"Iteration: 7 bestEv: 0.798373817967933 bestIt: 7 CE: 0.798373817967933 featOrth: 0.080333228356766\" ## [1] \"Iteration: 8 bestEv: 0.67788814308418 bestIt: 8 CE: 0.67788814308418 featOrth: 0.067721926984851\" ## [1] \"Iteration: 9 bestEv: 0.60423460678298 bestIt: 9 CE: 0.60423460678298 featOrth: 0.060530322568825\" ## [1] \"Iteration: 10 bestEv: 0.537001484405108 bestIt: 10 CE: 0.537001484405108 featOrth: 0.0534485754935069\" ## [1] \"Iteration: 11 bestEv: 0.510695353081807 bestIt: 11 CE: 0.510695353081807 featOrth: 0.0507578575583826\" ## [1] \"Iteration: 12 bestEv: 0.476886656292718 bestIt: 12 CE: 0.476886656292718 featOrth: 0.0476243104170116\" ## [1] \"Iteration: 13 bestEv: 0.387188176319932 bestIt: 13 CE: 0.387188176319932 featOrth: 0.0386820190844655\" ## [1] \"Iteration: 14 bestEv: 0.366198316349536 bestIt: 14 CE: 0.366198316349536 featOrth: 0.0364743662040543\" ## [1] \"Iteration: 15 bestEv: 0.339282617800783 bestIt: 15 CE: 0.339282617800783 featOrth: 0.0338219409772607\" ## [1] \"Iteration: 16 bestEv: 0.322343694158017 bestIt: 16 CE: 0.322343694158017 featOrth: 0.0320920546118971\" ## [1] \"Iteration: 17 bestEv: 0.313567657553766 bestIt: 17 CE: 0.313567657553766 featOrth: 0.0312507976326073\" ## [1] \"Iteration: 18 bestEv: 0.308563155066892 bestIt: 18 CE: 0.308563155066892 featOrth: 0.0307225299872834\" ## [1] \"Iteration: 19 bestEv: 0.304545344346464 bestIt: 19 CE: 0.304545344346464 featOrth: 0.0302226221501555\" ## [1] \"Iteration: 20 bestEv: 0.292252463913407 bestIt: 20 CE: 0.292252463913407 featOrth: 0.0290705396734664\" ## [1] \"Iteration: 21 bestEv: 0.288134844975608 bestIt: 21 CE: 0.288134844975608 featOrth: 0.0286481378698642\" ## [1] \"Iteration: 22 bestEv: 0.281956158945781 bestIt: 22 CE: 0.281956158945781 featOrth: 0.0280514972705353\" ## [1] \"Iteration: 23 bestEv: 0.281333614246523 bestIt: 23 CE: 0.281333614246523 featOrth: 0.0279942039091028\" ## [1] \"Iteration: 24 bestEv: 0.276378044945376 bestIt: 24 CE: 0.276378044945376 featOrth: 0.0275127496530792\" ## [1] \"Iteration: 25 bestEv: 0.273314963494116 bestIt: 25 CE: 0.273314963494116 featOrth: 0.0272063823350215\" ## [1] \"Iteration: 26 bestEv: 0.272508767900418 bestIt: 26 CE: 0.272508767900418 featOrth: 0.027122926711206\" ## [1] \"Iteration: 27 bestEv: 0.269846260937601 bestIt: 27 CE: 0.269846260937601 featOrth: 0.0268519671760481\" ## [1] \"Iteration: 28 bestEv: 0.262815651781906 bestIt: 28 CE: 0.262815651781906 featOrth: 0.0231301062228915\" ## [1] \"Iteration: 29 bestEv: 0.219490166103559 bestIt: 29 CE: 0.219490166103559 featOrth: 0.0218164573445244\" ## [1] \"Iteration: 30 bestEv: 0.219377930240841 bestIt: 30 CE: 0.219377930240841 featOrth: 0.0218074759572753\" ## [1] \"Iteration: 31 bestEv: 0.214183183745514 bestIt: 31 CE: 0.214183183745514 featOrth: 0.0212955654100738\" ## [1] \"Iteration: 32 bestEv: 0.21403836089231 bestIt: 32 CE: 0.21403836089231 featOrth: 0.0212826286048762\" ## [1] \"Iteration: 33 bestEv: 0.196993480194893 bestIt: 33 CE: 0.196993480194893 featOrth: 0.0195741412131966\" ## [1] \"Iteration: 34 bestEv: 0.18328509531899 bestIt: 34 CE: 0.18328509531899 featOrth: 0.0182055789811528\" ## [1] \"Iteration: 35 bestEv: 0.183200135322205 bestIt: 35 CE: 0.183200135322205 featOrth: 0.0181997846788099\" ## [1] \"Iteration: 36 bestEv: 0.183065745674488 bestIt: 36 CE: 0.183065745674488 featOrth: 0.0181887811814881\" ## [1] \"Iteration: 37 bestEv: 0.182953344516318 bestIt: 37 CE: 0.182953344516318 featOrth: 0.0181797472817897\" ## [1] \"Iteration: 38 bestEv: 0.178124691528801 bestIt: 38 CE: 0.178124691528801 featOrth: 0.017700109984798\" ## [1] \"Iteration: 39 bestEv: 0.178075901794333 bestIt: 39 CE: 0.178075901794333 featOrth: 0.0176939616407453\" ## [1] \"Iteration: 40 bestEv: 0.173241429168419 bestIt: 40 CE: 0.173241429168419 featOrth: 0.0172110300531402\" ## [1] \"Iteration: 41 bestEv: 0.173214369718456 bestIt: 41 CE: 0.173214369718456 featOrth: 0.017209244693137\" ## [1] \"Iteration: 42 bestEv: 0.168809835570977 bestIt: 42 CE: 0.168809835570977 featOrth: 0.0167688288878424\" ## [1] \"Iteration: 43 bestEv: 0.168798439659657 bestIt: 43 CE: 0.168798439659657 featOrth: 0.0167685496864901\" ## [1] \"Iteration: 44 bestEv: 0.163416778276955 bestIt: 44 CE: 0.163416778276955 featOrth: 0.0162316558677796\" ## [1] \"Iteration: 45 bestEv: 0.163386145123184 bestIt: 45 CE: 0.163386145123184 featOrth: 0.0162293250839719\" ## [1] \"Iteration: 46 bestEv: 0.163367615583396 bestIt: 46 CE: 0.163367615583396 featOrth: 0.0162277477668695\" ## [1] \"Iteration: 47 bestEv: 0.158534513537579 bestIt: 47 CE: 0.158534513537579 featOrth: 0.015744033181664\" ## [1] \"Iteration: 48 bestEv: 0.140915578226435 bestIt: 48 CE: 0.140915578226435 featOrth: 0.0139832997052191\" ## [1] \"Iteration: 49 bestEv: 0.136632674164986 bestIt: 49 CE: 0.136632674164986 featOrth: 0.0135557292624059\" ## [1] \"Iteration: 50 bestEv: 0.136625825375904 bestIt: 50 CE: 0.136625825375904 featOrth: 0.0135539567528134\" ## [1] \"Iteration: 51 bestEv: 0.136605846861864 bestIt: 51 CE: 0.136605846861864 featOrth: 0.0135539567088718\" ## [1] \"Iteration: 52 bestEv: 0.133393930025251 bestIt: 52 CE: 0.133393930025251 featOrth: 0.013231766548129\" ## [1] \"Iteration: 53 bestEv: 0.121815231282171 bestIt: 53 CE: 0.121815231282171 featOrth: 0.0120744055716015\" ## [1] \"Iteration: 54 bestEv: 0.112272420395773 bestIt: 54 CE: 0.112272420395773 featOrth: 0.0111197917654773\" ## [1] \"Iteration: 55 bestEv: 0.10793520136675 bestIt: 55 CE: 0.10793520136675 featOrth: 0.0106866426847117\" ## [1] \"Iteration: 56 bestEv: 0.103074572859167 bestIt: 56 CE: 0.103074572859167 featOrth: 0.0102006074727999\" ## [1] \"Iteration: 57 bestEv: 0.10307405855512 bestIt: 57 CE: 0.10307405855512 featOrth: 0.010199979898903\" ## [1] \"Iteration: 58 bestEv: 0.103017743151182 bestIt: 58 CE: 0.103017743151182 featOrth: 0.0101943353411016\" ## [1] \"Iteration: 59 bestEv: 0.0924325582051188 bestIt: 59 CE: 0.0924325582051188 featOrth: 0.00913674408487939\" ## [1] \"Iteration: 60 bestEv: 0.092426803545498 bestIt: 60 CE: 0.092426803545498 featOrth: 0.00913615760840388\" ## [1] \"Iteration: 61 bestEv: 0.0924177440138596 bestIt: 61 CE: 0.0924177440138596 featOrth: 0.00913556950652335\" ## [1] \"Iteration: 62 bestEv: 0.0924094813073564 bestIt: 62 CE: 0.0924094813073564 featOrth: 0.00913560260934428\" ## [1] \"Iteration: 63 bestEv: 0.0924055133476095 bestIt: 63 CE: 0.0924055133476095 featOrth: 0.009135363119069\" ## [1] \"Iteration: 64 bestEv: 0.0870941632709072 bestIt: 64 CE: 0.0870941632709072 featOrth: 0.0086053264598772\" ## [1] \"Iteration: 65 bestEv: 0.0727777812140487 bestIt: 65 CE: 0.0727777812140486 featOrth: 0.00717338867145749\" ## [1] \"Iteration: 66 bestEv: 0.0727636037184751 bestIt: 66 CE: 0.0727636037184751 featOrth: 0.00717305944595617\" ## [1] \"Iteration: 67 bestEv: 0.0726183560984098 bestIt: 67 CE: 0.0726183560984098 featOrth: 0.00716135330173678\" ## [1] \"Iteration: 68 bestEv: 0.0671469773936359 bestIt: 68 CE: 0.0671469773936359 featOrth: 0.0066140401196575\" ## [1] \"Iteration: 69 bestEv: 0.0671391589449826 bestIt: 69 CE: 0.0671391589449826 featOrth: 0.00661395340421009\" ## [1] \"Iteration: 70 bestEv: 0.0671348662665583 bestIt: 70 CE: 0.0671348662665583 featOrth: 0.00661373472231999\" ## [1] \"Iteration: 71 bestEv: 0.0608423268924974 bestIt: 71 CE: 0.0608423268924974 featOrth: 0.00598452747198498\" ## [1] \"Iteration: 72 bestEv: 0.0570648568774 bestIt: 72 CE: 0.0570648568774 featOrth: 0.00560767154606059\" ## [1] \"Iteration: 73 bestEv: 0.0570648568774 bestIt: 72 CE: 0.0873197076176613 featOrth: 0.0056075756039286\" ## [1] \"Iteration: 74 bestEv: 0.0550970859572759 bestIt: 74 CE: 0.0550970859572759 featOrth: 0.00541027187001207\" ## [1] \"Iteration: 75 bestEv: 0.0522838495265217 bestIt: 75 CE: 0.0522838495265217 featOrth: 0.00512982253073375\" ## [1] \"Iteration: 76 bestEv: 0.0503202140840706 bestIt: 76 CE: 0.0503202140840706 featOrth: 0.004933518997875\" ## [1] \"Iteration: 77 bestEv: 0.0503202140840706 bestIt: 76 CE: 0.050322265345152 featOrth: 0.00493353134725908\" ## [1] \"Iteration: 78 bestEv: 0.0503115823799135 bestIt: 78 CE: 0.0503115823799135 featOrth: 0.00493353129862908\" ## [1] \"Iteration: 79 bestEv: 0.0476389488062793 bestIt: 79 CE: 0.0476389488062793 featOrth: 0.00466532960473309\" ## [1] \"Iteration: 80 bestEv: 0.0476389488062793 bestIt: 79 CE: 0.0476422579009312 featOrth: 0.00466532533292062\" ## [1] \"Iteration: 81 bestEv: 0.0449034942181222 bestIt: 81 CE: 0.0449034942181222 featOrth: 0.00439193203878587\" ## [1] \"Iteration: 82 bestEv: 0.044830242390364 bestIt: 82 CE: 0.044830242390364 featOrth: 0.00438446086817899\" ## [1] \"Iteration: 83 bestEv: 0.044830242390364 bestIt: 82 CE: 0.044830656292499 featOrth: 0.00438427513523537\" ## [1] \"Iteration: 84 bestEv: 0.0448261327880746 bestIt: 84 CE: 0.0448261327880746 featOrth: 0.00438416483181871\" ## [1] \"Iteration: 85 bestEv: 0.0424424430371664 bestIt: 85 CE: 0.0424424430371664 featOrth: 0.00414555102566834\" ## [1] \"Iteration: 86 bestEv: 0.0424400500156764 bestIt: 86 CE: 0.0424400500156764 featOrth: 0.00414553232342031\" ## [1] \"Iteration: 87 bestEv: 0.0424355773238859 bestIt: 87 CE: 0.0424355773238859 featOrth: 0.0041455784773815\" ## [1] \"Iteration: 88 bestEv: 0.0424355773238859 bestIt: 87 CE: 0.0424392398419575 featOrth: 0.00414560499200765\" ## [1] \"Iteration: 89 bestEv: 0.0402352965569645 bestIt: 89 CE: 0.0402352965569645 featOrth: 0.00392620426808978\" ## [1] \"Iteration: 90 bestEv: 0.0386483470494215 bestIt: 90 CE: 0.0386483470494215 featOrth: 0.00376773421692112\" ## [1] \"Iteration: 91 bestEv: 0.0301559657418322 bestIt: 91 CE: 0.0301559657418322 featOrth: 0.00291825165520952\" ## [1] \"Iteration: 92 bestEv: 0.0287338229041454 bestIt: 92 CE: 0.0287338229041454 featOrth: 0.00277621520109729\" ## [1] \"Iteration: 93 bestEv: 0.0287322976538284 bestIt: 93 CE: 0.0287322976538284 featOrth: 0.00277621347595765\" ## [1] \"Iteration: 94 bestEv: 0.027047021833802 bestIt: 94 CE: 0.027047021833802 featOrth: 0.00260707046144292\" ## [1] \"Iteration: 95 bestEv: 0.027047021833802 bestIt: 94 CE: 0.0553019281331094 featOrth: 0.00240822796390057\" ## [1] \"Iteration: 96 bestEv: 0.0238846421346667 bestIt: 96 CE: 0.0238846421346667 featOrth: 0.00229180179715985\" ## [1] \"Iteration: 97 bestEv: 0.0233582666366605 bestIt: 97 CE: 0.0233582666366605 featOrth: 0.00223851229409552\" ## [1] \"Iteration: 98 bestEv: 0.0228351644831962 bestIt: 98 CE: 0.0228351644831962 featOrth: 0.00218695811852158\" ## [1] \"Iteration: 99 bestEv: 0.0222570934795629 bestIt: 99 CE: 0.0222570934795629 featOrth: 0.00212885118240577\" ## [1] \"Iteration: 100 bestEv: 0.022254456672839 bestIt: 100 CE: 0.022254456672839 featOrth: 0.00212883853671226\" ##################################################### #                                          # #                     #                    # #                                          # ##################################################### #                                          # #                                          # ##################################################### # drwwrd projlist=list() mysimk=ncol(initu) for ( k in 1:length(nh_list)) rownames(resultNH$v[[k]])=colnames(nh_list[[k]]) simdf2=data.frame(fdatanum) simdf2=apply_simlr_matrices( simdf2, resultNH$v, n_limit=ncol(initu), robust=FALSE, center=TRUE,    scale=TRUE, absolute_value=mysigns=='positive', verbose=FALSE ) newnames=simdf2[[2]] simdf2=simdf2[[1]] cognames = c(   \"z_cerad_re\", \"z_animal_re\",      \"z_delayed_re\",    \"z_global_re\",     \"z_digit_re\" #  \"z_cerad_age\", \"z_animal_age\",     \"z_digit_age\",      \"z_delayed_age\",    \"z_global_age\", #  \"z_cerad_edu\", \"z_animal_edu\",     \"z_digit_edu\",      \"z_delayed_edu\",    \"z_global_edu\" ) # cognames=c(\"cerad_sum\",\"cfdast\",\"cfdds\") dnames = c( \"riagendr\", \"ridageyr\", \"race\", \"dmdeduc2\", \"INDFMPIR\",'wtint2yr','wtmec2yr') simdf2 = data.frame(simdf2) simdf2[,dnames]=fdata[,dnames] simdf2[,cognames]=fdata[,cognames] sep='PC' tocomp = c(\"dietPC1\",\"mentalhealthPC1\",'physicalPC1') mycc2 = complete.cases( simdf2[,tocomp]  ) simdf2=simdf2[mycc2,] for ( n in 'exposures' ) {     for ( v in 1:mysimk ) {       thiscol=paste0(n,sep,v)       if ( any( is.na( simdf2[,thiscol] ) )) { #        simdf2 = simlr_impute( data.frame(simdf2), knm, v, n, separator=sep ) #        simdf2[,thiscol]=antsrimpute(simdf2[,thiscol])       }     }   } thesena=is.na(simdf2) nn=colnames(simdf2) # simdf2 = data.frame( robustMatrixTransform(simdf2)) colnames(simdf2)=nn simdf2[thesena]=NA ################################## # Function to search NHANES variable descriptions search_nhanes_var <- function(var_name_in, dtname) {   # Use an environment to store the dictionary globally   if (!exists(\"nhanes_dict\", envir = .GlobalEnv)) {     if (file.exists(dtname)) {       assign(\"nhanes_dict\", read.csv(dtname, stringsAsFactors = FALSE), envir = .GlobalEnv)     } else {       stop(\"Dictionary file not found!\")     }   }      # Search for the variable name (case insensitive)   result <- unique(subset(nhanes_dict, grepl(var_name_in, nhanes_dict$variable_codename_use, ignore.case = TRUE))$variable_description_use)      # Return the first match if available   if (length(result) > 0) {     return(result[1])   } else {     return(\"Variable not found.\")   } }  covars=\" ~ riagendr + ridageyr + dmdeduc2  +\" # race adjusted scores covars=\" ~ 1 +\" # race adjusted scores covars=\" ~ riagendr + ridageyr  + dmdeduc2 + INDFMPIR + \" basep=1e-4 # rooter if ( ! exists(\"cogind\" ) ) cogind = length(cognames) ############################# pnames=knm[-1] nsig=0 for ( kk in 1:ncol(initu)) {   bform = paste0( cognames[cogind], covars, \"1\" )   myform = paste0( cognames[cogind], covars,paste0( paste0(pnames,sep,kk), collapse='+'))   tempdf = simdf2   for ( qq in knm ) {     tt=paste0(qq,sep,kk)     tempdf[ , tt]=psych::winsor( sqrt(tempdf[ , tt] - min(tempdf[ , tt],na.rm=T)), 0.005 ) #    if ( qq == 'exposures' ) tempdf[ , tt]=antsrimpute( tempdf[ , tt] )   }   mdl = lm( myform, data=tempdf )   bmdl = lm( bform, data=tempdf[names(predict(mdl)),] ) #  if (doimp) mdl = lm( myform, data=tempdf, weights=tempdf$wtint2yr ) else mdl = lm( myform, data=tempdf, weights=tempdf$wtint2yr  )   myanv = anova( bmdl, mdl )   if ( myanv$Pr[2] < basep/mysimk ) {     cat(\"*** result begin ***********************************\\n\")     print(\"individual coefficients\")     tailcoffs = tail( coefficients( summary( mdl ) ), 4 )     print( tailcoffs )     print( paste(\"multivar-ANOVA p-value\", insight::format_p(myanv$Pr[2],digits=4) ) )     print( cognames[cogind])     gglist=list()     for ( k in pnames ) {       print( paste(\"Simlr weights\", k ) )       ivec = interpret_simlr_vector2( resultNH$v[[k]], kk, n2show=3, shortnames=F )       print( ivec )       print( search_nhanes_var( names(ivec)[1] ) )       print( search_nhanes_var( names(ivec)[2] ) )       ttl = paste0(k,kk, \" \", insight::format_p(tailcoffs[paste0(k,sep,kk),\"Pr(>|t|)\"],digits=4)  )       gglist[[length(gglist)+1]]=visreg::visreg(mdl, paste0(k,sep,kk), gg=TRUE ) + ggtitle(ttl) + theme_minimal()       }     ( grid.arrange( grobs=gglist, nrow=2 ) )     nsig=nsig+1     cat(\"*** result end ***********************************\\n\\n\") #    Sys.sleep(3)   } } ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                   Estimate Std. Error   t value     Pr(>|t|) ## dietPC3          -890.9101   423.3313 -2.104522 3.550503e-02 ## exposuresPC3    -3742.5744  2935.0201 -1.275144 2.024628e-01 ## mentalhealthPC3 -3644.3625   830.8893 -4.386099 1.237524e-05 ## physicalPC3      1914.2826   566.3495  3.380037 7.440483e-04 ## [1] \"multivar-ANOVA p-value p = 8.0427e-07\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##   DR1TACAR    DR1TRET   DR1TLYCO  ## -1.0000000 -0.7532974  0.6160423  ## [1] \"Variable not found.\" ## [1] \"Variable not found.\" ## [1] \"Simlr weights exposures\" ##     LBXTHG     LBXBMN     LBXBSE  ## -1.0000000  0.7379510 -0.2234585  ## [1] \"Blood mercury, total (ug/L)\" ## [1] \"Blood manganese (ug/L)\" ## [1] \"Simlr weights mentalhealth\" ##    DPQ060    SLQ060    DPQ070  ## 1.0000000 0.8809100 0.7781053  ## [1] \"Variable not found.\" ## [1] \"Variable not found.\" ## [1] \"Simlr weights physical\" ##  BMXWAIST     BMXWT    BPXDI3  ## 1.0000000 0.5228697 0.3084241  ## [1] \"Waist Circumference (cm)\" ## [1] \"Weight (kg)\" ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                   Estimate Std. Error    t value     Pr(>|t|) ## dietPC6           282.9019   93.25514  3.0336337 2.459308e-03 ## exposuresPC6     2153.3081 2422.26874  0.8889633 3.741705e-01 ## mentalhealthPC6 -3297.2248  821.64522 -4.0129544 6.303129e-05 ## physicalPC6      2170.9473  658.57833  3.2964147 1.003003e-03 ## [1] \"multivar-ANOVA p-value p = 5.0900e-07\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TBCAR    DR1TLZ  DR1TPOTA  ## 1.0000000 0.6101053 0.4338191  ## [1] \"Variable not found.\" ## [1] \"Variable not found.\" ## [1] \"Simlr weights exposures\" ##     LBXBPB     LBXBSE     LBXBGE  ##  1.0000000  0.6234539 -0.1903010  ## [1] \"Blood lead replicate 1 (ug/dL)\" ## [1] \"Serum selenium replicate 2 (ug/L)\" ## [1] \"Simlr weights mentalhealth\" ##    DPQ010    DPQ050    DPQ080  ## 1.0000000 0.2728978 0.2483227  ## [1] \"Variable not found.\" ## [1] \"Variable not found.\" ## [1] \"Simlr weights physical\" ##     BMXWT  BMXWAIST     BMXHT  ## 1.0000000 0.5858274 0.3094896  ## [1] \"Weight (kg)\" ## [1] \"Waist Circumference (cm)\" ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate Std. Error   t value     Pr(>|t|) ## dietPC7            257.1785   76.70967  3.352622 8.211629e-04 ## exposuresPC7    -11000.2283 3399.17587 -3.236146 1.238962e-03 ## mentalhealthPC7  -5164.9168 1306.26346 -3.953963 8.058151e-05 ## physicalPC7        566.7359  409.56759  1.383742 1.666509e-01 ## [1] \"multivar-ANOVA p-value p = 4.3541e-08\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TMOIS  DR1TSODI  DR1TKCAL  ## 1.0000000 0.5030131 0.4652930  ## [1] \"Variable not found.\" ## [1] \"Variable not found.\" ## [1] \"Simlr weights exposures\" ##     LBXBPB     LBXBSE     LBXBCD  ##  1.0000000 -0.6658359  0.3978877  ## [1] \"Blood lead replicate 1 (ug/dL)\" ## [1] \"Serum selenium replicate 2 (ug/L)\" ## [1] \"Simlr weights mentalhealth\" ##    DPQ090    DPQ070    DPQ080  ## 1.0000000 0.6658940 0.5482837  ## [1] \"Variable not found.\" ## [1] \"Variable not found.\" ## [1] \"Simlr weights physical\" ##     BMXWT    BPXDI3    BPXDI1  ## 1.0000000 0.7274676 0.4588843  ## [1] \"Weight (kg)\" ## [1] \"Diastolic: Blood pressure (third reading) mm Hg\" ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate Std. Error   t value     Pr(>|t|) ## dietPC16           142.8935    47.0949  3.034161 0.0024550395 ## exposuresPC16    -6277.3147  1672.9249 -3.752299 0.0001821456 ## mentalhealthPC16 -2227.0477  1005.6878 -2.214452 0.0269530276 ## physicalPC16      2791.5679  1295.2811  2.155183 0.0313120251 ## [1] \"multivar-ANOVA p-value p = 7.7638e-07\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TLYCO    DR1TLZ  DR1TBCAR  ## 1.0000000 0.5552698 0.5242060  ## [1] \"Variable not found.\" ## [1] \"Variable not found.\" ## [1] \"Simlr weights exposures\" ##     LBXBCD     LBXBPB     LBXBSE  ##  1.0000000  0.5838986 -0.4024370  ## [1] \"Blood cadmium (ug/L)\" ## [1] \"Blood lead replicate 1 (ug/dL)\" ## [1] \"Simlr weights mentalhealth\" ##    SLQ060    SLQ050    DPQ010  ## 1.0000000 0.6686108 0.5443883  ## [1] \"Variable not found.\" ## [1] \"Variable not found.\" ## [1] \"Simlr weights physical\" ##     BMXWT    BPXDI3    BMXLEG  ## 1.0000000 0.9184115 0.8857831  ## [1] \"Weight (kg)\" ## [1] \"Diastolic: Blood pressure (third reading) mm Hg\" ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate Std. Error   t value     Pr(>|t|) ## dietPC17           132.2955    50.7334  2.607660 0.0092101312 ## exposuresPC17     1855.9396   526.6879  3.523794 0.0004386589 ## mentalhealthPC17 -3214.4708  1065.7091 -3.016274 0.0026036394 ## physicalPC17      1734.3586   643.1523  2.696653 0.0070852861 ## [1] \"multivar-ANOVA p-value p = 1.2208e-07\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TBCAR    DR1TLZ  DR1TACAR  ## 1.0000000 0.8308679 0.6342225  ## [1] \"Variable not found.\" ## [1] \"Variable not found.\" ## [1] \"Simlr weights exposures\" ##      LBXBSE      LBXBCD      LBXTHG  ##  1.00000000 -0.04945171  0.04571774  ## [1] \"Serum selenium replicate 2 (ug/L)\" ## [1] \"Blood cadmium (ug/L)\" ## [1] \"Simlr weights mentalhealth\" ##    DPQ070    DPQ090    DPQ020  ## 1.0000000 0.2470094 0.2263667  ## [1] \"Variable not found.\" ## [1] \"Variable not found.\" ## [1] \"Simlr weights physical\" ##     BMXWT  BMXWAIST   BMXARMC  ## 1.0000000 0.7853051 0.5258853  ## [1] \"Weight (kg)\" ## [1] \"Waist Circumference (cm)\" ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate Std. Error   t value     Pr(>|t|) ## dietPC25           284.1225    98.0796  2.896856 0.0038259133 ## exposuresPC25     -497.7451   160.8631 -3.094216 0.0020111377 ## mentalhealthPC25 -1032.7487   491.1136 -2.102871 0.0356493571 ## physicalPC25      1843.6483   541.9804  3.401688 0.0006879656 ## [1] \"multivar-ANOVA p-value p = 4.3785e-07\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TPOTA    DR1TVC  DR1TKCAL  ## 1.0000000 0.8665154 0.8284838  ## [1] \"Variable not found.\" ## [1] \"Variable not found.\" ## [1] \"Simlr weights exposures\" ##        LBXBSE        LBXBMN        LBXBCD  ## -1.000000e+00  2.884887e-04  8.893314e-05  ## [1] \"Serum selenium replicate 2 (ug/L)\" ## [1] \"Blood manganese (ug/L)\" ## [1] \"Simlr weights mentalhealth\" ##    DPQ040    DPQ050    DPQ020  ## 1.0000000 0.7685787 0.5553835  ## [1] \"Variable not found.\" ## [1] \"Variable not found.\" ## [1] \"Simlr weights physical\" ##     BMXHT     BMXWT    BPXDI2  ## 1.0000000 0.3247854 0.1661275  ## [1] \"Standing Height (cm)\" ## [1] \"Weight (kg)\" ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate Std. Error   t value     Pr(>|t|) ## dietPC27          -151.4569   54.86277 -2.760650 0.0058414904 ## exposuresPC27     6662.1065 2487.87366  2.677832 0.0074938824 ## mentalhealthPC27 -3550.1926  883.85776 -4.016701 0.0000620488 ## physicalPC27      1868.8324 1089.97688  1.714561 0.0866397856 ## [1] \"multivar-ANOVA p-value p = 1.0270e-06\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##   DR1TSODI   DR1TKCAL   DR1TPOTA  ## -1.0000000 -0.9095000 -0.7320329  ## [1] \"Variable not found.\" ## [1] \"Variable not found.\" ## [1] \"Simlr weights exposures\" ##     LBXBSE     LBXBMN     LBXIHG  ##  1.0000000 -0.9807334  0.7180764  ## [1] \"Serum selenium replicate 2 (ug/L)\" ## [1] \"Blood manganese (ug/L)\" ## [1] \"Simlr weights mentalhealth\" ##    DPQ050    DPQ010    DPQ020  ## 1.0000000 0.7469092 0.5804275  ## [1] \"Variable not found.\" ## [1] \"Variable not found.\" ## [1] \"Simlr weights physical\" ##  BMXWAIST   BMXSAD1    BMXLEG  ## 1.0000000 0.6889326 0.6712539  ## [1] \"Waist Circumference (cm)\" ## [1] \"Sagittal Abdominal Diameter 1st (cm)\" ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                   Estimate Std. Error   t value     Pr(>|t|) ## dietPC33           231.693   191.9444  1.207084 0.2275969138 ## exposuresPC33     3794.881  1020.3020  3.719370 0.0002073530 ## mentalhealthPC33 -2835.060   852.0581 -3.327308 0.0008988970 ## physicalPC33      3614.698  1081.9216  3.340998 0.0008560493 ## [1] \"multivar-ANOVA p-value p = 1.6786e-07\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##   DR1TALCO   DR1TLYCO   DR1TKCAL  ## -1.0000000 -0.7477215 -0.6456758  ## [1] \"Variable not found.\" ## [1] \"Variable not found.\" ## [1] \"Simlr weights exposures\" ##      LBXBSE      LBXTHG      LBXBCD  ##  1.00000000  0.26227845 -0.07927815  ## [1] \"Serum selenium replicate 2 (ug/L)\" ## [1] \"Blood mercury, total (ug/L)\" ## [1] \"Simlr weights mentalhealth\" ##    DPQ060    DPQ020    DPQ010  ## 1.0000000 0.8617951 0.4702769  ## [1] \"Variable not found.\" ## [1] \"Variable not found.\" ## [1] \"Simlr weights physical\" ##  BMXWAIST   BMXARMC    BPXDI3  ## 1.0000000 0.6113710 0.2724852  ## [1] \"Waist Circumference (cm)\" ## [1] \"Arm Circumference (cm)\" ## *** result end *********************************** print(nsig) ## [1] 8 ########################################################################################## ########################################################################################## # https://wwwn.cdc.gov/nchs/nhanes/search/default.aspx # > interpret_simlr_vector2( resultNH$v[['exposures']], 1, n2show=5, shortnames=F ) #   LBXVBZ    LBXVOX    LBXVFN    LBX2DF  # benzene, Xylene, furan, Dimethylfuran # 1.0000000 0.3346728 0.1868323 0.0586727  ##########################################################################################"},{"path":"https://github.com/stnava/simlr_nhanes/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Brian Avants. Maintainer.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"c, \"Avants\", role=c, ) e (2025). simlr.nhanes: SiMLR example using NHANES data. R package version 1.0.0, https://github.com/stnava/simlr_nhanes.","code":"@Manual{,   title = {simlr.nhanes: SiMLR example using NHANES data},   author = {{c} and {\"Avants\"} and {role=c} and email=\"stnava@gmail.com\") )},   year = {2025},   note = {R package version 1.0.0},   url = {https://github.com/stnava/simlr_nhanes}, }"},{"path":"https://github.com/stnava/simlr_nhanes/index.html","id":"simlr_nhanes","dir":"","previous_headings":"","what":"Helper package for simlr NHANES example analyses","title":"Helper package for simlr NHANES example analyses","text":"documentation page ","code":""},{"path":"https://github.com/stnava/simlr_nhanes/index.html","id":"simlr-nhanes","dir":"","previous_headings":"","what":"SiMLR NHANES","title":"Helper package for simlr NHANES example analyses","text":"TODO Data sources: NHANES raw CAPRA curated data nhanesA Code sources: haven ","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Formula Factors — check_formula_factors","title":"Check Formula Factors — check_formula_factors","text":"Identifies factor variables formula fewer two levels.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Formula Factors — check_formula_factors","text":"","code":"check_formula_factors(formula, dataframe)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Formula Factors — check_formula_factors","text":"formula formula object. dataframe data frame containing variables formula.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Formula Factors — check_formula_factors","text":"vector factor variable names fewer two levels.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Formula Factors — check_formula_factors","text":"","code":"check_formula_factors(mpg ~ cyl + gear, mtcars) #> character(0)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"Converts data frame categorical numeric columns numeric matrix, using one-hot encoding categorical variables.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"","code":"convert_to_numeric_matrix(df)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"df data frame.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"numeric matrix.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"","code":"df <- data.frame(a = c(1, 2), b = c(\"yes\", \"no\")) convert_to_numeric_matrix(df) #>      a b_no b_yes #> [1,] 1    0     1 #> [2,] 2    1     0"},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Count Unique Values and Filter Columns — count_unique_values","title":"Count Unique Values and Filter Columns — count_unique_values","text":"Counts unique values column data frame retains columns exceeding specified threshold.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count Unique Values and Filter Columns — count_unique_values","text":"","code":"count_unique_values(df, threshold)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count Unique Values and Filter Columns — count_unique_values","text":"df data frame. threshold integer specifying minimum number unique values retain column.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count Unique Values and Filter Columns — count_unique_values","text":"data frame filtered columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count Unique Values and Filter Columns — count_unique_values","text":"","code":"df <- data.frame(a = c(1, 1, 2), b = c(\"x\", \"y\", \"z\")) count_unique_values(df, 1) #> a : 2 unique values #> b : 3 unique values #>   a b #> 1 1 x #> 2 1 y #> 3 2 z"},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Regression Formula — create_formula","title":"Create Regression Formula — create_formula","text":"Creates regression formula data frame, excluding specified columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Regression Formula — create_formula","text":"","code":"create_formula(dataframe, outcome, exclusions)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Regression Formula — create_formula","text":"dataframe input data frame. outcome outcome variable. exclusions vector columns exclude formula.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Regression Formula — create_formula","text":"formula object regression.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Regression Formula — create_formula","text":"","code":"create_formula(mtcars, \"mpg\", exclusions = c(\"cyl\", \"gear\")) #> mpg ~ disp + hp + drat + wt + qsec + vs + am + carb #> <environment: 0x110030b00>"},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Columns with High NA Percentage — filter_na_columns","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"Filters columns data frame higher percentage NA values specified threshold.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"","code":"filter_na_columns(df, max_na_percent = 0.2)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"df data frame. max_na_percent Maximum allowed proportion NA values per column. Default 0.2.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"data frame filtered columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"","code":"filter_na_columns(data.frame(a = c(1, NA, 3), b = c(NA, NA, 3)), max_na_percent = 0.5) #>    a #> 1  1 #> 2 NA #> 3  3"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute Missing Values and Report NA Counts — impute_and_report_na","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"function imputes missing values matrix column means reports count missing values per column.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"","code":"impute_and_report_na(mat)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"mat numeric matrix.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"matrix imputed values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"","code":"mat <- matrix(c(1, NA, 3, 4, 5, NA), ncol = 2) impute_and_report_na(mat) #> No missing values detected. #>      [,1] [,2] #> [1,]    1    4 #> [2,]   NA    5 #> [3,]    3   NA"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute Missing Data — impute_data","title":"Impute Missing Data — impute_data","text":"Imputes missing values data frame. Numeric columns imputed median, categorical columns frequent category.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute Missing Data — impute_data","text":"","code":"impute_data(df)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute Missing Data — impute_data","text":"df data frame missing values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute Missing Data — impute_data","text":"data frame imputed values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute Missing Data — impute_data","text":"","code":"impute_data(data.frame(a = c(1, NA, 3), b = c(\"x\", \"y\", NA))) #>   a b #> 1 1 x #> 2 2 y #> 3 3 x"},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"Maps specific frequency categories numeric values, error handling invalid categories.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"","code":"map_freq_to_numeric(df, colname)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"df data frame containing column mapped. colname name column mapped.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"numeric vector mapped values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"","code":"map_freq_to_numeric(data.frame(freq = c(\"Not at all\", \"Several days\")), \"freq\") #> [1] 0 1"},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"function generates new matrix applying random linear transformation given latent matrix adding Gaussian noise.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"","code":"matrix_from_latent(latent_matrix, target_p, noise_sd = 0.3)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"latent_matrix numeric matrix representing latent structure (n x k). target_p integer specifying number columns output matrix. noise_sd numeric value indicating standard deviation Gaussian noise added. Default 0.3.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"numeric matrix dimensions (n x target_p), generated latent matrix random linear transformation added Gaussian noise.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"","code":"latent <- matrix(rnorm(20), nrow = 5, ncol = 4) generated_matrix <- matrix_from_latent(latent, target_p = 3, noise_sd = 0.2) print(generated_matrix) #>            [,1]        [,2]       [,3] #> [1,] -0.8420428 -2.26384990 -1.4360201 #> [2,] -1.4226564  0.01670062  2.9901238 #> [3,] -3.9410985 -6.29693119  4.4003814 #> [4,]  2.4102664  1.54497778 -0.5047176 #> [5,] -1.5365092  0.60855535  0.2409585"},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"function loops list matrices returns maximum number columns found across matrices list.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"","code":"max_columns_list(matrix_list)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"matrix_list list containing matrices. Non-matrix elements ignored warning.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"integer representing maximum number columns across matrices list.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"","code":"mat1 <- matrix(1:6, nrow = 2) mat2 <- matrix(1:12, nrow = 3) mat3 <- matrix(1:4, nrow = 2) max_columns_list(list(mat1, mat2, mat3)) # Returns 2 #> [1] 4"},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"Merges columns type two data frames based common column names.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"","code":"merge_same_type_columns(df1, df2)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"df1 First data frame. df2 Second data frame.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"merged data frame containing matching columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"","code":"merge_same_type_columns(data.frame(a = 1:3), data.frame(a = 4:6)) #>   a #> 1 1 #> 2 2 #> 3 3 #> 4 4 #> 5 5 #> 6 6"},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"function loops list matrices returns minimum number columns found across matrices list.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"","code":"min_columns_list(matrix_list)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"matrix_list list containing matrices. Non-matrix elements ignored warning.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"integer representing minimum number columns across matrices list.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"","code":"mat1 <- matrix(1:6, nrow = 2) mat2 <- matrix(1:12, nrow = 3) mat3 <- matrix(1:4, nrow = 2) min_columns_list(list(mat1, mat2, mat3)) # Returns 2 #> [1] 2"},{"path":"https://github.com/stnava/simlr_nhanes/reference/nhanescog.html","id":null,"dir":"Reference","previous_headings":"","what":"NHANES cognition data — nhanescog","title":"NHANES cognition data — nhanescog","text":"NHANES cognition data","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/nhanescog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NHANES cognition data — nhanescog","text":"","code":"nhanescog"},{"path":"https://github.com/stnava/simlr_nhanes/reference/nhanescog.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"NHANES cognition data — nhanescog","text":"Curated nhanes cognition data CAPRA","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/nhanescog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NHANES cognition data — nhanescog","text":"","code":"if (FALSE) { # \\dontrun{  data(\"nhanescog_2011_2014\") } # }"},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and Filter XPT File — read_and_filter_xpt","title":"Read and Filter XPT File — read_and_filter_xpt","text":"Reads XPT file, converts data frame, renames first column \"ID\", filters based unique value counts.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and Filter XPT File — read_and_filter_xpt","text":"","code":"read_and_filter_xpt(file_path, threshold = 100)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and Filter XPT File — read_and_filter_xpt","text":"file_path Path XPT file. threshold Numeric threshold filter columns based unique value counts. Default 100.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and Filter XPT File — read_and_filter_xpt","text":"data frame filtered columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and Filter XPT File — read_and_filter_xpt","text":"","code":"read_and_filter_xpt(\"data.xpt\", threshold = 50) #> Error in read_xpt(file_path): could not find function \"read_xpt\""},{"path":"https://github.com/stnava/simlr_nhanes/reference/remove_perfectly_correlated.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Perfectly Correlated Columns from a Data Frame — remove_perfectly_correlated","title":"Remove Perfectly Correlated Columns from a Data Frame — remove_perfectly_correlated","text":"function identifies columns data frame perfectly correlated (correlation coefficient 1 -1) removes second instance pair, ensuring two columns resulting data frame perfectly correlated.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/remove_perfectly_correlated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Perfectly Correlated Columns from a Data Frame — remove_perfectly_correlated","text":"","code":"remove_perfectly_correlated(df, tolerance = 1e-06)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/remove_perfectly_correlated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Perfectly Correlated Columns from a Data Frame — remove_perfectly_correlated","text":"df data frame containing numeric columns checked perfect correlation. tolerance float tolerance value","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/remove_perfectly_correlated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Perfectly Correlated Columns from a Data Frame — remove_perfectly_correlated","text":"data frame redundant perfectly correlated columns removed.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/remove_perfectly_correlated.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove Perfectly Correlated Columns from a Data Frame — remove_perfectly_correlated","text":"","code":"df <- data.frame(a = 1:5, b = 1:5, c = 5:1+rnorm(5), d = c(2, 1, 6, 8, 10)) remove_perfectly_correlated(df) #>   a         c  d #> 1 1 5.5777091  2 #> 2 2 4.1181949  1 #> 3 3 1.0882795  6 #> 4 4 2.8620865  8 #> 5 5 0.7567633 10"}]
