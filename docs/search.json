[{"path":"https://github.com/stnava/simlr_nhanes/articles/simlr_nhanes.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"simlr: nhanes application explained","text":"extract distinct related types data NHANES. data types : demographics: age, sex, educational attainment; diet: measurements nutritional status; physical: blood pressure physical measurements; mental health: outcomes Patient Health Questionnaire-9; environmental exposures: metals related environmental toxins. combined SiMLR unsupervised dimensionality reduction. resulting low-dimensional representations used joint prediction cognitive outcomes. 400 subjects measurements available along environmental exposures.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/articles/simlr_nhanes.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"simlr: nhanes application explained","text":"Load relevant librarys.","code":"# Load necessary libraries library(ggplot2) library(ggfortify) library(ellipse) ##  ## Attaching package: 'ellipse' ## The following object is masked from 'package:graphics': ##  ##     pairs library(ANTsR) ## Warning: replacing previous import 'stats::filter' by 'dplyr::filter' when ## loading 'ANTsR' ## ANTsR 0.6.1 ## Environment variables set either in .Renviron or with a seed (e.g. XXX):  ## Sys.setenv(ANTS_RANDOM_SEED = XXX) ## Sys.setenv(ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS = 1) ## may influence reproducibility in some methods. See ## https://github.com/ANTsX/ANTs/wiki/antsRegistration-reproducibility-issues ## for more information.Also see *repro methods in antsRegistration. ##  ## Attaching package: 'ANTsR' ## The following objects are masked from 'package:stats': ##  ##     sd, var ## The following objects are masked from 'package:base': ##  ##     all, any, apply, max, min, prod, range, sum library(subtyper) ## Warning: replacing previous import 'ciTools::add_ci' by 'gtsummary::add_ci' ## when loading 'subtyper' ## Warning: replacing previous import 'dplyr::as_data_frame' by ## 'igraph::as_data_frame' when loading 'subtyper' ## Warning: replacing previous import 'dplyr::groups' by 'igraph::groups' when ## loading 'subtyper' ## Warning: replacing previous import 'dplyr::union' by 'igraph::union' when ## loading 'subtyper' ## Warning: replacing previous import 'gtsummary::add_ci' by 'ciTools::add_ci' ## when loading 'subtyper' ## Registered S3 methods overwritten by 'fmsb': ##   method    from ##   print.roc pROC ##   plot.roc  pROC ## Warning: replacing previous import 'gt::gt' by 'globaltest::gt' when loading ## 'subtyper' ## Warning: replacing previous import 'dplyr::rename' by 'plyr::rename' when ## loading 'subtyper' library( nhanesA ) library( simlr.nhanes ) library( dplyr ) ##  ## Attaching package: 'dplyr' ## The following object is masked from 'package:Biobase': ##  ##     combine ## The following objects are masked from 'package:BiocGenerics': ##  ##     combine, intersect, setdiff, union ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union data(\"nhanescog_2011_2014\")"},{"path":"https://github.com/stnava/simlr_nhanes/articles/simlr_nhanes.html","id":"nhanes-example","dir":"Articles","previous_headings":"","what":"NHANES example","title":"simlr: nhanes application explained","text":"download data fly merge together using embedded data well nhanesA package. Define categories data can used identify low-dimensional representation based SiMLR objective.      Run methods using reasonable defaults recommended prior work. Apply learned representations data matrices.","code":"## simpleWarning in download.file(url, tf, mode = \"wb\", quiet = TRUE): downloaded length 0 != reported length 1245 ##  ##  ## simpleWarning in download.file(url, tf, mode = \"wb\", quiet = TRUE): downloaded length 0 != reported length 1245 ##  ##   Male Female  ##   1469   1545 ## character(0) #################################### colcats=rep(\"Basic\",ncol(fdata)) colcats[ colnames(fdata) %in%  c(\"ridageyr\",\"riagendr\",\"race\",\"dmdeduc2\",\"INDFMPIR\") ]='demog' bpname=getNamesFromDataframe( \"BPX\",fdata) bmname=getNamesFromDataframe( \"BMX\",fdata) colcats[ colnames(fdata) %in%  c(bmname,bpname,\"Testosterone\",\"TotChol\",\"Diabetes\" ) ]='physical' colcats[ colnames(fdata) %in%   c(   getNamesFromDataframe( \"DPQ\", fdata ),    getNamesFromDataframe( \"SLQ\", fdata ) )  ]='mentalhealth' x=c('LC','.x','.y','URDUMMAL','LBXVDE','LBX4CE') colcats[ colnames(fdata) %in%  getNamesFromDataframe( \"LBX\", fdata, exclusions=x ) ]='exposures' colcats[ colnames(fdata) %in%  getNamesFromDataframe( \"LBD\", fdata, exclusions=x ) ]='exposures' #colcats[ colnames(fdata) %in%  getNamesFromDataframe( \"URX\", fdata, exclusions=x ) ]='exposures' # colcats[ colnames(fdata) %in%  getNamesFromDataframe( \"URD\", fdata, exclusions=x ) ]='exposures' # colcats[ colnames(fdata) %in%  getNamesFromDataframe( \"LBC\", fdata, exclusions=x ) ]='exposures' colcats[ colnames(fdata) %in%  getNamesFromDataframe( \"DR1T\", fdata ) ]='diet' # colcats[ colnames(fdata) %in%  getNamesFromDataframe( \"cfd\", fdata )[-1] ]='digitspan' tbl=table(colcats) ############## nh_list=list() knm=names(tbl)[-1] mycc = complete.cases( fdata[ , colcats %in% 'demog' ]) mycc = complete.cases( fdata[ , colcats %in% 'exposures' ]) table(mycc) ## mycc ## FALSE  TRUE  ##  2135   462 doimp=TRUE for ( k in knm ) {     print(k)     if ( doimp ) {       temp0 = impute_data( fdata[ ,colcats==k] )     } else temp0=(fdata[mycc,colcats==k])     temp = data.frame(convert_to_numeric_matrix( temp0 ))     vv=apply( temp, 2, FUN=var )     temp = temp[ , vv > 0 ]     if ( k %in% c('exposures','diet') ) {       nn = colnames(temp)       for (  jj in 1:ncol(temp) ) temp = truncatehi(temp, nn[jj], t = 10, removeit = FALSE) #      temp = robustMatrixTransform( temp )       colnames(temp) = nn       temp = remove_perfectly_correlated( temp )     }     for ( j in 1:ncol(temp) ) {         hist( temp[,j], main=colnames(temp)[j]) #        Sys.sleep(1)         }     nh_list[[length(nh_list)+1]]=data.matrix( ( temp ) )     print(colnames(nh_list[[length(nh_list)]])) #    nh_list[[length(nh_list)]]=impute_and_report_na(nh_list[[length(nh_list)]] )     } ## [1] \"demog\" ## [1] \"ridageyr\"   \"dmdeduc2\"   \"INDFMPIR\"   \"riagendr_1\" \"riagendr_2\" ## [6] \"race_1\"     \"race_2\"     \"race_3\"     \"race_4\"     ## [1] \"dietommunity.supply\"      \"DR1TWS_Well.or.rain.cistern\"  ## [69] \"DR1TWS_Spring\"                \"DR1TWS_Don.t.drink.tap.water\" ## [71] \"DR1TWS_Don.t.know\"            ## [1] \"exposures\" ##  [1] \"LBXBPB\"   \"LBDBPBSI\" \"LBXBCD\"   \"LBXTHG\"   \"LBDTHGSI\" \"LBXBSE\"   ##  [7] \"LBDBSESI\" \"LBXBMN\"   \"LBX2DF\"   \"LBXV06\"   \"LBXV2A\"   \"LBXV3B\"   ## [13] \"LBXV4C\"   \"LBXVBZ\"   \"LBXVCB\"   \"LBXVDB\"   \"LBXVEB\"   \"LBXVFN\"   ## [19] \"LBXVOX\"   \"LBXVTC\"   \"LBXVTE\"   \"LBXVXY\"   \"LBXSCU\"   \"LBXSSE\"   ## [25] \"LBDSSESI\" \"LBXSZN\"   \"LBXIHG\"   \"LBDIHGSI\" \"LBXBGE\"   \"LBXBGM\"   ## [1] \"mentalhealth\" ##  [1] \"DPQ010\" \"DPQ020\" \"DPQ030\" \"DPQ040\" \"DPQ050\" \"DPQ060\" \"DPQ070\" \"DPQ080\" ##  [9] \"DPQ090\" \"DPQ100\" \"SLQ050\" \"SLQ060\" ## [1] \"physical\" ##  [1] \"BPXPLS\"            \"BPXML1\"            \"BPXSY1\"            ##  [4] \"BPXDI1\"            \"BPXSY2\"            \"BPXDI2\"            ##  [7] \"BPXSY3\"            \"BPXDI3\"            \"BMXWT\"             ## [10] \"BMXHT\"             \"BMXBMI\"            \"BMXLEG\"            ## [13] \"BMXARML\"           \"BMXARMC\"           \"BMXWAIST\"          ## [16] \"BMXSAD1\"           \"BMXSAD2\"           \"BPXPULS_Regular\"   ## [19] \"BPXPULS_Irregular\" \"BPXPTY_Radial\"     \"BPXPTY_Brachial\" names(nh_list)=knm ##### ################################################################################ # regs <- regularizeSimlr(nh_list,fraction=0.15,sigma=rep(1.0,length(nh_list))) # regs=list() wdemog=which( knm == 'demog') for ( wdemog in 1:length(nh_list) ) regs[[ wdemog]]=diag( ncol(nh_list[[wdemog]])) # regs = regularizeSimlr(nh_list) names( regs ) = knm[ -1 ] initu=initializeSimlr( nh_list, k=round(max_columns_list(nh_list)), jointReduction=TRUE ) ########################### if ( ! exists(\"resultNH\") ) {   resultNH <- simlr( nh_list,          iterations=100,         sparsenessQuantiles=rep(0.5,length(nh_list)),         positivities=rep(\"positive\",length(nh_list)),          energyType='regression', mixAlg='ica', #        energyType='cca', mixAlg='pca',         scale=c(\"centerAndScale\",  \"np\"), #        scale=c(\"whiten\", \"np\"),         constraint=\"Stiefelx10x10\",         randomSeed=99,         initialUMatrix=initu, verbose=T )   } ## [1] \"Stiefel\" \"10\"      \"10\"      ## [1] \"     <0> BUILD-V <0> BUILD-V <0> BUILD-V <0> BUILD-V <0>    \" ## [1] \"initialDataTerm: 2.51017494350807  <o> mixer: ica  <o> E:  regression\" ## [1] \"Iteration: 1 bestEv: 14.1746044301267 bestIt: 1 CE: 14.1746044301267 featOrth: 0.0997937029176957\" ## [1] \"Iteration: 2 bestEv: 1.75163852539491 bestIt: 2 CE: 1.75163852539491 featOrth: 0.0828976727852813\" ## [1] \"Iteration: 3 bestEv: 1.54357404052024 bestIt: 3 CE: 1.54357404052024 featOrth: 0.0708292219625602\" ## [1] \"Iteration: 4 bestEv: 0.59307380737238 bestIt: 4 CE: 0.59307380737238 featOrth: 0.0574280093064658\" ## [1] \"Iteration: 5 bestEv: 0.511976160449972 bestIt: 5 CE: 0.511976160449972 featOrth: 0.0507304884344975\" ## [1] \"Iteration: 6 bestEv: 0.447270629098678 bestIt: 6 CE: 0.447270629098678 featOrth: 0.0441349563074344\" ## [1] \"Iteration: 7 bestEv: 0.410738822811352 bestIt: 7 CE: 0.410738822811352 featOrth: 0.0404867424721742\" ## [1] \"Iteration: 8 bestEv: 0.390759614967803 bestIt: 8 CE: 0.390759614967803 featOrth: 0.0382380154087505\" ## [1] \"Iteration: 9 bestEv: 0.359281955126602 bestIt: 9 CE: 0.359281955126602 featOrth: 0.0353798437717426\" ## [1] \"Iteration: 10 bestEv: 0.351480822968282 bestIt: 10 CE: 0.351480822968282 featOrth: 0.0340354953724176\" ## [1] \"Iteration: 11 bestEv: 0.326590236074859 bestIt: 11 CE: 0.326590236074859 featOrth: 0.0320010818359751\" ## [1] \"Iteration: 12 bestEv: 0.312349314750536 bestIt: 12 CE: 0.312349314750536 featOrth: 0.0304829047397993\" ## [1] \"Iteration: 13 bestEv: 0.304098958375051 bestIt: 13 CE: 0.304098958375051 featOrth: 0.0297550509365286\" ## [1] \"Iteration: 14 bestEv: 0.299776633497028 bestIt: 14 CE: 0.299776633497028 featOrth: 0.0292211290367498\" ## [1] \"Iteration: 15 bestEv: 0.294235336916378 bestIt: 15 CE: 0.294235336916378 featOrth: 0.0288002479615291\" ## [1] \"Iteration: 16 bestEv: 0.293703553929303 bestIt: 16 CE: 0.293703553929303 featOrth: 0.0287440052034147\" ## [1] \"Iteration: 17 bestEv: 0.293222428074705 bestIt: 17 CE: 0.293222428074705 featOrth: 0.0287057229306919\" ## [1] \"Iteration: 18 bestEv: 0.290298887541636 bestIt: 18 CE: 0.290298887541636 featOrth: 0.0283489744764232\" ## [1] \"Iteration: 19 bestEv: 0.287552449924241 bestIt: 19 CE: 0.287552449924241 featOrth: 0.0281386759374609\" ## [1] \"Iteration: 20 bestEv: 0.285738903414331 bestIt: 20 CE: 0.285738903414331 featOrth: 0.0279978298568153\" ## [1] \"Iteration: 21 bestEv: 0.285655650470576 bestIt: 21 CE: 0.285655650470576 featOrth: 0.0279847430961155\" ## [1] \"Iteration: 22 bestEv: 0.280222976498213 bestIt: 22 CE: 0.280222976498213 featOrth: 0.027466844301517\" ## [1] \"Iteration: 23 bestEv: 0.277287363268852 bestIt: 23 CE: 0.277287363268852 featOrth: 0.0271916465053857\" ## [1] \"Iteration: 24 bestEv: 0.276891655947045 bestIt: 24 CE: 0.276891655947045 featOrth: 0.0271525379135184\" ## [1] \"Iteration: 25 bestEv: 0.276624563524882 bestIt: 25 CE: 0.276624563524882 featOrth: 0.0271251557155091\" ## [1] \"Iteration: 26 bestEv: 0.276381981274939 bestIt: 26 CE: 0.276381981274939 featOrth: 0.02711388957072\" ## [1] \"Iteration: 27 bestEv: 0.271757155008302 bestIt: 27 CE: 0.271757155008302 featOrth: 0.026654083003621\" ## [1] \"Iteration: 28 bestEv: 0.271757155008302 bestIt: 27 CE: 0.271842687350432 featOrth: 0.0266507931208728\" ## [1] \"Iteration: 29 bestEv: 0.271277658828949 bestIt: 29 CE: 0.271277658828949 featOrth: 0.0266016742377025\" ## [1] \"Iteration: 30 bestEv: 0.271027425454387 bestIt: 30 CE: 0.271027425454387 featOrth: 0.0265801834817084\" ## [1] \"Iteration: 31 bestEv: 0.27074668606074 bestIt: 31 CE: 0.27074668606074 featOrth: 0.0265583362117357\" ## [1] \"Iteration: 32 bestEv: 0.270676374025264 bestIt: 32 CE: 0.270676374025264 featOrth: 0.0265512872208435\" ## [1] \"Iteration: 33 bestEv: 0.270676374025264 bestIt: 32 CE: 0.270738698282112 featOrth: 0.0265494289339102\" ## [1] \"Iteration: 34 bestEv: 0.270616094526354 bestIt: 34 CE: 0.270616094526354 featOrth: 0.0265480758249628\" ## [1] \"Iteration: 35 bestEv: 0.270616094526354 bestIt: 34 CE: 0.270633903251478 featOrth: 0.0265404216796366\" ## [1] \"Iteration: 36 bestEv: 0.270583240118584 bestIt: 36 CE: 0.270583240118584 featOrth: 0.0265387109534047\" ## [1] \"Iteration: 37 bestEv: 0.270554573398947 bestIt: 37 CE: 0.270554573398947 featOrth: 0.0265380824620912\" ## [1] \"Iteration: 38 bestEv: 0.270533024371232 bestIt: 38 CE: 0.270533024371232 featOrth: 0.0265364780786964\" ## [1] \"Iteration: 39 bestEv: 0.270479082095134 bestIt: 39 CE: 0.270479082095134 featOrth: 0.0265338681484328\" ## [1] \"Iteration: 40 bestEv: 0.270470536841983 bestIt: 40 CE: 0.270470536841983 featOrth: 0.0265320097410696\" ## [1] \"Iteration: 41 bestEv: 0.270451504217507 bestIt: 41 CE: 0.270451504217507 featOrth: 0.0265318069816971\" ## [1] \"Iteration: 42 bestEv: 0.270443367907931 bestIt: 42 CE: 0.270443367907931 featOrth: 0.0265300933241686\" ## [1] \"Iteration: 43 bestEv: 0.270437389502466 bestIt: 43 CE: 0.270437389502466 featOrth: 0.02653033816862\" ## [1] \"Iteration: 44 bestEv: 0.270422471975307 bestIt: 44 CE: 0.270422471975307 featOrth: 0.0265288555161659\" ## [1] \"Iteration: 45 bestEv: 0.270422471975307 bestIt: 44 CE: 0.270437629053219 featOrth: 0.0265289173423251\" ## [1] \"Iteration: 46 bestEv: 0.270310449588729 bestIt: 46 CE: 0.270310449588729 featOrth: 0.0265289028260742\" ## [1] \"Iteration: 47 bestEv: 0.248555158782345 bestIt: 47 CE: 0.248555158782345 featOrth: 0.0243437847718749\" ## [1] \"Iteration: 48 bestEv: 0.24848735593212 bestIt: 48 CE: 0.24848735593212 featOrth: 0.0243424935901844\" ## [1] \"Iteration: 49 bestEv: 0.24848735593212 bestIt: 48 CE: 0.248572203129429 featOrth: 0.0243423651962723\" ## [1] \"Iteration: 50 bestEv: 0.24848735593212 bestIt: 48 CE: 0.248572203129429 featOrth: 0.0243423651962723\" ## [1] \"Iteration: 51 bestEv: 0.24848735593212 bestIt: 48 CE: 0.248572203129429 featOrth: 0.0243423651962723\" ## [1] \"Iteration: 52 bestEv: 0.24848735593212 bestIt: 48 CE: 0.248572203129429 featOrth: 0.0243423651962723\" ## [1] \"Iteration: 53 bestEv: 0.24848735593212 bestIt: 48 CE: 0.248572203129429 featOrth: 0.0243423651962723\" ## [1] \"Iteration: 54 bestEv: 0.24848735593212 bestIt: 48 CE: 0.248572203129429 featOrth: 0.0243423651962723\" ##################################################### # drwwrd projlist=list() mysimk=ncol(initu) for ( k in 2:length(nh_list)) {     rownames(resultNH$v[[k]])=colnames( nh_list[[k]])     ux=data.frame(nh_list[[k]] %*% abs(resultNH$v[[k]][,1:mysimk]))     colnames(ux)=paste0(names(nh_list)[k],1:ncol(ux))     projlist[[length(projlist)+1]]=ux     names( projlist )[length(projlist)]=knm[k] } simdf=simdf2=dplyr::bind_cols(projlist) cognames = c(   \"z_cerad_re\", \"z_animal_re\",      \"z_delayed_re\",    \"z_global_re\",     \"z_digit_re\" #  \"z_cerad_age\", \"z_animal_age\",     \"z_digit_age\",      \"z_delayed_age\",    \"z_global_age\", #  \"z_cerad_edu\", \"z_animal_edu\",     \"z_digit_edu\",      \"z_delayed_edu\",    \"z_global_edu\" ) # cognames=c(\"cerad_sum\",\"cfdast\",\"cfdds\") dnames = c( \"riagendr\", \"ridageyr\", \"race\", \"dmdeduc2\", \"INDFMPIR\",'wtint2yr','wtmec2yr') if ( doimp ) {   simdf2[,dnames]=fdata[,dnames]   simdf2[,cognames]=fdata[,cognames]   } else {   simdf2[,dnames]=fdata[mycc,dnames]   simdf2[,cognames]=fdata[mycc,cognames]   } ################################# covars=\" ~ riagendr + ridageyr + race + dmdeduc2 + INDFMPIR + \" covars=\" ~ riagendr + ridageyr + dmdeduc2 +  \" # race adjusted scores basep=0.01 # basep=1e-12 # rooter if ( ! exists(\"cogind\" ) ) cogind = length(cognames) ############################# for ( kk in 1:ncol(initu)) {   bform = paste0( cognames[cogind], covars, \"1\" )   myform = paste0( cognames[cogind], covars,paste0( paste0(names(projlist),kk), collapse='+'))   if ( basep >= 0.001 ) tempdf = simdf2[mycc,] else tempdf = simdf2[,]   bmdl = lm( bform, data=tempdf )   mdl = lm( myform, data=tempdf ) #  if (doimp) mdl = lm( myform, data=tempdf, weights=tempdf$wtint2yr ) else mdl = lm( myform, data=tempdf, weights=tempdf$wtint2yr  )   myanv = anova( bmdl, mdl )   if ( myanv$Pr[2] < basep/mysimk ) {     cat(\"*** result begin ***********************************\\n\")     print(\"individual coefficients\")     tailcoffs = tail( coefficients( summary( mdl ) ), 4 )     print( tailcoffs )     print( paste(\"multivar-ANOVA p-value\", insight::format_p(myanv$Pr[2],digits=4) ) )     print( cognames[cogind])     for ( k in names(projlist) ) {       print( paste(\"Simlr weights\", k ) )       print( interpret_simlr_vector2( resultNH$v[[k]], kk, n2show=3, shortnames=F ) )       ttl = paste0(k,kk, \" \", insight::format_p(tailcoffs[paste0(k,kk),\"Pr(>|t|)\"],digits=4)  )       visreg::visreg(mdl, paste0(k,kk), main=ttl )       }     cat(\"*** result end ***********************************\\n\\n\") #    Sys.sleep(3)   } } ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate   Std. Error   t value    Pr(>|t|) ## diet1              48771.17     16064.35  3.035988 0.002535387 ## exposures1        158870.28    113228.81  1.403091 0.161273346 ## mentalhealth1 -162897756.23  55226608.94 -2.949624 0.003345979 ## physical1     -183718834.16 164867540.23 -1.114342 0.265722038 ## [1] \"multivar-ANOVA p-value p = 7.4675e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##    DR1TVC  DR1TTHEO  DR1TCOPP  ## 1.0000000 0.9497593 0.9493484 ## [1] \"Simlr weights exposures\" ##    LBX2DF    LBXVBZ    LBXVFN  ## 1.0000000 0.8526564 0.8388698 ## [1] \"Simlr weights mentalhealth\" ##    DPQ010    DPQ060    DPQ030  ## 1.0000000 0.6501466 0.4474342 ## [1] \"Simlr weights physical\" ##    BPXPLS     BMXHT    BPXDI1  ## 1.0000000 0.9830455 0.6390495 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate   Std. Error    t value     Pr(>|t|) ## diet3              37026.31     14371.03  2.5764558 1.029678e-02 ## exposures3         49972.15     87105.94  0.5736939 5.664590e-01 ## mentalhealth3 -400755817.63  93422497.85 -4.2897142 2.187446e-05 ## physical3     -476951991.60 320041043.56 -1.4902838 1.368440e-01 ## [1] \"multivar-ANOVA p-value p = 1.3089e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ## DR1TCAFF DR1TCALC DR1TPHOS  ## 1.000000 0.753369 0.734414 ## [1] \"Simlr weights exposures\" ##    LBXSCU    LBXVTC    LBXBGE  ## 1.0000000 0.6021382 0.4549760 ## [1] \"Simlr weights mentalhealth\" ##    DPQ090    DPQ050    DPQ100  ## 1.0000000 0.8576169 0.6461690 ## [1] \"Simlr weights physical\" ##   BMXARML    BPXPLS     BMXHT  ## 1.0000000 0.3442835 0.2017697 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                   Estimate   Std. Error    t value     Pr(>|t|) ## diet6             10902.63     3598.443  3.0298191 0.0025866854 ## exposures6        29455.96    35358.290  0.8330709 0.4052427846 ## mentalhealth6 -60712617.43 15977545.834 -3.7998713 0.0001644961 ## physical6      57139834.02 52352636.222  1.0914414 0.2756575885 ## [1] \"multivar-ANOVA p-value p = 6.1377e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##    DR1TFF  DR1TFIBE  DR1TMAGN  ## 1.0000000 0.9365845 0.9273682 ## [1] \"Simlr weights exposures\" ##    LBXBGM  LBDTHGSI    LBXTHG  ## 1.0000000 0.9624398 0.9620521 ## [1] \"Simlr weights mentalhealth\" ##    DPQ040    SLQ050    SLQ060  ## 1.0000000 0.6954689 0.4412314 ## [1] \"Simlr weights physical\" ##    BMXLEG  BMXWAIST     BMXHT  ## 1.0000000 0.4137668 0.2265471 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                   Estimate  Std. Error   t value    Pr(>|t|) ## diet7             43881.06    13409.18  3.272465 0.001147485 ## exposures7       831115.27   648634.66  1.281330 0.200731725 ## mentalhealth7 -52117618.50 15960188.97 -3.265476 0.001175504 ## physical7      35212808.91 27669364.27  1.272628 0.203801414 ## [1] \"multivar-ANOVA p-value p = 1.2965e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TATOA  DR1TATOC  DR1TVB12  ## 1.0000000 0.7101462 0.5771789 ## [1] \"Simlr weights exposures\" ##    LBXSSE  LBDSSESI    LBXV4C  ## 1.0000000 0.9870485 0.7872794 ## [1] \"Simlr weights mentalhealth\" ##    DPQ010    DPQ060    DPQ080  ## 1.0000000 0.9680839 0.6976623 ## [1] \"Simlr weights physical\" ##     BMXHT     BMXWT   BMXARMC  ## 1.0000000 0.2411024 0.1882857 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                   Estimate  Std. Error   t value     Pr(>|t|) ## diet8             116175.4    31509.38  3.687011 2.543494e-04 ## exposures8        145632.9    94852.52  1.535362 1.253916e-01 ## mentalhealth8 -309225387.3 72356607.10 -4.273630 2.344826e-05 ## physical8        6480532.9  6190503.93  1.046851 2.957255e-01 ## [1] \"multivar-ANOVA p-value p = 2.0732e-07\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TCAFF  DR1TNIAC  DR1TACAR  ## 1.0000000 0.9500987 0.8106687 ## [1] \"Simlr weights exposures\" ##    LBXBSE  LBDBSESI    LBXBMN  ## 1.0000000 0.9955033 0.2227310 ## [1] \"Simlr weights mentalhealth\" ##    DPQ080    DPQ040    DPQ020  ## 1.0000000 0.9158009 0.5801526 ## [1] \"Simlr weights physical\" ##   BMXARML     BMXHT     BMXWT  ## 1.0000000 0.3986155 0.3916593 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate  Std. Error     t value     Pr(>|t|) ## diet9             30425.096    12083.65  2.51787212 1.214963e-02 ## exposures9        -2237.118    84417.72 -0.02650057 9.788697e-01 ## mentalhealth9 -57089546.686 13935518.76 -4.09669332 4.963381e-05 ## physical9     -34630184.067 20180084.70 -1.71605742 8.683372e-02 ## [1] \"multivar-ANOVA p-value p = 2.3241e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##    DR1TVD   DR1TCHL  DR1TPHOS  ## 1.0000000 0.6841722 0.6399065 ## [1] \"Simlr weights exposures\" ##    LBXBCD    LBXBPB  LBDBPBSI  ## 1.0000000 0.3152410 0.3130664 ## [1] \"Simlr weights mentalhealth\" ##    DPQ050    DPQ040    SLQ060  ## 1.0000000 0.8053299 0.3547172 ## [1] \"Simlr weights physical\" ##   BMXARML    BPXML1    BPXSY2  ## 1.0000000 0.6397945 0.1870846 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error   t value     Pr(>|t|) ## diet11              30236.18     12695.98  2.381554 0.0176509282 ## exposures11        322310.00    215616.03  1.494833 0.1356526979 ## mentalhealth11 -233714863.86  63743681.75 -3.666479 0.0002750136 ## physical11     -419241118.96 257469944.44 -1.628311 0.1041526784 ## [1] \"multivar-ANOVA p-value p = 1.8300e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TPROT  DR1TSELE  DR1TMOIS  ## 1.0000000 0.9630842 0.8161160 ## [1] \"Simlr weights exposures\" ##  LBDBSESI    LBXBSE  LBDSSESI  ## 1.0000000 0.9958697 0.8997070 ## [1] \"Simlr weights mentalhealth\" ##    DPQ020    DPQ050    DPQ100  ## 1.0000000 0.6724283 0.5538294 ## [1] \"Simlr weights physical\" ##    BPXPLS   BMXSAD2   BMXSAD1  ## 1.0000000 0.8241699 0.7094321 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate  Std. Error    t value     Pr(>|t|) ## diet12              47856.52    16640.78  2.8758580 0.0042188818 ## exposures12        254956.89   670440.43  0.3802827 0.7039134349 ## mentalhealth12 -233673173.92 58872579.61 -3.9691343 0.0000838316 ## physical12      -10963351.70  5529412.78 -1.9827335 0.0479994924 ## [1] \"multivar-ANOVA p-value p = 4.5804e-06\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TFIBE  DR1TATOC  DR1TPOTA  ## 1.0000000 0.7435699 0.6512118 ## [1] \"Simlr weights exposures\" ##    LBXIHG  LBDIHGSI    LBXSCU  ## 1.0000000 0.9998676 0.5807255 ## [1] \"Simlr weights mentalhealth\" ##    DPQ020    SLQ050    DPQ040  ## 1.0000000 0.6576842 0.5594723 ## [1] \"Simlr weights physical\" ##    BPXPLS    BPXML1    BPXSY3  ## 1.0000000 0.5951033 0.3205991 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate   Std. Error    t value     Pr(>|t|) ## diet14             27265.17 7.871258e+03  3.4638904 0.0005829284 ## exposures14       290328.94 5.411363e+05  0.5365172 0.5918639457 ## mentalhealth14 -10298086.75 2.796014e+06 -3.6831311 0.0002581389 ## physical14     -89610264.74 1.267578e+08 -0.7069411 0.4799657863 ## [1] \"multivar-ANOVA p-value p = 1.8288e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##   DR1TVB1  DR1TFIBE  DR1TPHOS  ## 1.0000000 0.9996192 0.6777549 ## [1] \"Simlr weights exposures\" ##    LBXBGM    LBXTHG  LBDTHGSI  ## 1.0000000 0.9402959 0.9372113 ## [1] \"Simlr weights mentalhealth\" ##     DPQ040     DPQ060     SLQ060  ## 1.00000000 0.22602189 0.08646303 ## [1] \"Simlr weights physical\" ##    BMXLEG     BMXHT    BPXDI3  ## 1.0000000 0.7255012 0.6531991 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error     t value     Pr(>|t|) ## diet18              29173.68     8493.308  3.43490177 6.472054e-04 ## exposures18        932251.78   892770.715  1.04422307 2.969379e-01 ## mentalhealth18 -184984505.26 45574690.592 -4.05893058 5.804858e-05 ## physical18        2946029.33 96754979.584  0.03044835 9.757229e-01 ## [1] \"multivar-ANOVA p-value p = 1.6802e-06\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TSUGR  DR1TCARB  DR1TALCO  ## 1.0000000 0.9831618 0.8283975 ## [1] \"Simlr weights exposures\" ##    LBXVBZ    LBX2DF    LBXVFN  ## 1.0000000 0.9883954 0.8936354 ## [1] \"Simlr weights mentalhealth\" ##    DPQ040    DPQ020    DPQ080  ## 1.0000000 0.3953514 0.3046475 ## [1] \"Simlr weights physical\" ##  BMXWAIST   BMXSAD2   BMXSAD1  ## 1.0000000 0.9351421 0.9077174 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate   Std. Error   t value     Pr(>|t|) ## diet19             13580.11     5766.456  2.355018 1.894651e-02 ## exposures19      -206193.33   932465.498 -0.221127 8.250929e-01 ## mentalhealth19 -69365811.49 16704496.020 -4.152523 3.928801e-05 ## physical19     -33743567.08 23354260.939 -1.444857 1.491879e-01 ## [1] \"multivar-ANOVA p-value p = 3.9529e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TKCAL   DR1TCHL  DR1TPHOS  ## 1.0000000 0.9528988 0.8248089 ## [1] \"Simlr weights exposures\" ##    LBXBPB  LBDBPBSI    LBXBCD  ## 1.0000000 0.9976852 0.3788093 ## [1] \"Simlr weights mentalhealth\" ##    SLQ060    DPQ040    DPQ050  ## 1.0000000 0.5456592 0.4027425 ## [1] \"Simlr weights physical\" ##    BPXPLS    BMXLEG     BMXHT  ## 1.0000000 0.8076382 0.7842602 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate Std. Error    t value    Pr(>|t|) ## diet20             112094.5    48452.2  2.3135073 0.021140646 ## exposures20        170367.4   333127.9  0.5114174 0.609307439 ## mentalhealth20 -290159388.1 79422659.3 -3.6533578 0.000289035 ## physical20     -124018995.2 65463674.8 -1.8944704 0.058797816 ## [1] \"multivar-ANOVA p-value p = 5.3414e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TALCO  DR1TP183  DR1TCAFF  ## 1.0000000 0.5877426 0.5852627 ## [1] \"Simlr weights exposures\" ##    LBXVXY    LBXVOX    LBXSCU  ## 1.0000000 0.9726978 0.9432535 ## [1] \"Simlr weights mentalhealth\" ##    DPQ010    DPQ070    DPQ090  ## 1.0000000 0.7335929 0.5068993 ## [1] \"Simlr weights physical\" ##    BPXPLS    BPXML1    BMXBMI  ## 1.0000000 0.9128235 0.7726489 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate   Std. Error   t value     Pr(>|t|) ## diet21             18625.73     6684.721  2.786314 0.0055544559 ## exposures21      1145183.84   885373.327  1.293447 0.1965140682 ## mentalhealth21 -33524875.73  9378228.181 -3.574756 0.0003881277 ## physical21     -89660716.39 51058229.040 -1.756048 0.0797544172 ## [1] \"multivar-ANOVA p-value p = 9.0839e-06\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TNUMF  DR1TATOC  DR1TP184  ## 1.0000000 0.5654640 0.5042396 ## [1] \"Simlr weights exposures\" ##    LBXBCD  LBDBPBSI    LBXBPB  ## 1.0000000 0.8502704 0.8454805 ## [1] \"Simlr weights mentalhealth\" ##    DPQ010    DPQ020    DPQ050  ## 1.0000000 0.9001477 0.5860861 ## [1] \"Simlr weights physical\" ##   BMXARMC    BPXML1    BPXSY2  ## 1.0000000 0.9682634 0.7887858 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate  Std. Error   t value     Pr(>|t|) ## diet22              43636.96    11344.72  3.846455 0.0001369769 ## exposures22        200032.43   196321.56  1.018902 0.3087921516 ## mentalhealth22 -105190155.12 30437952.80 -3.455888 0.0006000495 ## physical22        6840523.17  6087747.93  1.123654 0.2617535779 ## [1] \"multivar-ANOVA p-value p = 1.8134e-06\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##      DR1TACAR      DR1TCRYP DR1TWS_Spring  ##     1.0000000     0.8303972     0.7939338 ## [1] \"Simlr weights exposures\" ##    LBXTHG  LBDTHGSI    LBXBGM  ## 1.0000000 0.9985574 0.9034342 ## [1] \"Simlr weights mentalhealth\" ##    DPQ010    DPQ100    DPQ090  ## 1.0000000 0.8147775 0.5461630 ## [1] \"Simlr weights physical\" ##     BMXHT    BMXLEG    BMXBMI  ## 1.0000000 0.9822760 0.8973896 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate   Std. Error    t value     Pr(>|t|) ## diet23             21519.51     5835.827  3.6874820 0.0002538932 ## exposures23        16158.96    69457.122  0.2326465 0.8161407710 ## mentalhealth23 -57058947.55 14265042.628 -3.9999143 0.0000739658 ## physical23     -21677726.06 14242752.836 -1.5220180 0.1287007504 ## [1] \"multivar-ANOVA p-value p = 1.0256e-06\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TCARB  DR1TFIBE  DR1TMAGN  ## 1.0000000 0.9635968 0.8916011 ## [1] \"Simlr weights exposures\" ##    LBXBCD    LBXBGM  LBDTHGSI  ## 1.0000000 0.7802595 0.7164920 ## [1] \"Simlr weights mentalhealth\" ##    DPQ040    DPQ050    SLQ050  ## 1.0000000 0.7729055 0.6875085 ## [1] \"Simlr weights physical\" ##    BMXLEG    BPXML1    BPXSY1  ## 1.0000000 0.5098615 0.1979852 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate   Std. Error   t value     Pr(>|t|) ## diet24             21128.01     6642.118  3.180915 0.0015687028 ## exposures24        62744.98    52232.589  1.201261 0.2302762306 ## mentalhealth24 -48816052.19 12713211.077 -3.839789 0.0001406288 ## physical24     -13384815.06  8074379.560 -1.657690 0.0980709040 ## [1] \"multivar-ANOVA p-value p = 1.3213e-06\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TCAFF   DR1TVB2  DR1TNUMF  ## 1.0000000 0.6196144 0.4778656 ## [1] \"Simlr weights exposures\" ##    LBXVBZ    LBXVFN    LBXBSE  ## 1.0000000 0.6304184 0.4767088 ## [1] \"Simlr weights mentalhealth\" ##    SLQ050    DPQ050    DPQ020  ## 1.0000000 0.9518811 0.6486141 ## [1] \"Simlr weights physical\" ##   BMXARML    BPXML1    BPXSY3  ## 1.0000000 0.5229695 0.1769078 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate  Std. Error   t value     Pr(>|t|) ## diet25              59397.85    18644.45  3.185819 0.0015429317 ## exposures25        -19462.15    14705.56 -1.323455 0.1863500835 ## mentalhealth25 -102363088.84 30172545.91 -3.392590 0.0007529742 ## physical25      -11951107.62 10361813.70 -1.153380 0.2493613393 ## [1] \"multivar-ANOVA p-value p = 5.0769e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TFIBE  DR1TMOIS  DR1TPOTA  ## 1.0000000 0.7898973 0.7495249 ## [1] \"Simlr weights exposures\" ##    LBXBPB  LBDBPBSI    LBXVTC  ## 1.0000000 0.9963017 0.8314187 ## [1] \"Simlr weights mentalhealth\" ##    DPQ040    SLQ050    SLQ060  ## 1.0000000 0.5708824 0.3883785 ## [1] \"Simlr weights physical\" ##  BMXWAIST     BMXWT    BPXML1  ## 1.0000000 0.8645785 0.7238216 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error    t value     Pr(>|t|) ## diet26          9.472403e+03 2.609917e+03  3.6293887 0.0003163991 ## exposures26     9.639762e+05 1.262065e+06  0.7638087 0.4453780170 ## mentalhealth26 -7.010169e+07 1.980526e+07 -3.5395494 0.0004421482 ## physical26     -1.266529e+08 1.197227e+08 -1.0578855 0.2906701993 ## [1] \"multivar-ANOVA p-value p = 2.1639e-06\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TBCAR  DR1TFIBE  DR1TCARB  ## 1.0000000 0.9979002 0.9440904 ## [1] \"Simlr weights exposures\" ##    LBXV4C    LBXVTE    LBXBPB  ## 1.0000000 0.7963215 0.4932711 ## [1] \"Simlr weights mentalhealth\" ##    DPQ100    DPQ070    DPQ010  ## 1.0000000 0.8224047 0.5791017 ## [1] \"Simlr weights physical\" ##    BMXBMI   BMXARMC    BPXSY3  ## 1.0000000 0.9303347 0.9060030 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error   t value    Pr(>|t|) ## diet27              22818.26     6492.812  3.514388 0.000484987 ## exposures27       -337241.00   333331.781 -1.011728 0.312207150 ## mentalhealth27 -110833883.41 41327295.618 -2.681857 0.007588365 ## physical27      -10220360.32  4894978.621 -2.087927 0.037361164 ## [1] \"multivar-ANOVA p-value p = 5.1766e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##    DR1TLZ    DR1TVK  DR1TCHOL  ## 1.0000000 0.9122457 0.8023213 ## [1] \"Simlr weights exposures\" ##  LBDBPBSI    LBXBPB    LBXVBZ  ## 1.0000000 0.9996641 0.5188433 ## [1] \"Simlr weights mentalhealth\" ##    SLQ050    DPQ010    SLQ060  ## 1.0000000 0.2208455 0.1937415 ## [1] \"Simlr weights physical\" ##    BPXML1    BPXPLS    BPXSY3  ## 1.0000000 0.9649345 0.4672168 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate  Std. Error     t value     Pr(>|t|) ## diet28              49408.49    14895.27  3.31705924 0.0009827827 ## exposures28        457400.25   506344.06  0.90333883 0.3668251374 ## mentalhealth28 -190559904.08 44665818.73 -4.26634750 0.0000241959 ## physical28         202480.87  3443707.85  0.05879734 0.9531393959 ## [1] \"multivar-ANOVA p-value p = 1.2980e-06\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TCAFF  DR1TTHEO    DR1TVK  ## 1.0000000 0.5797470 0.3716778 ## [1] \"Simlr weights exposures\" ##  LBDIHGSI    LBXIHG    LBXV06  ## 1.0000000 0.9988621 0.8297548 ## [1] \"Simlr weights mentalhealth\" ##    DPQ070    DPQ080    DPQ050  ## 1.0000000 0.8815333 0.8315109 ## [1] \"Simlr weights physical\" ##    BMXLEG     BMXHT    BPXDI3  ## 1.0000000 0.7146270 0.4978975 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate  Std. Error    t value     Pr(>|t|) ## diet29              54711.05    14726.26  3.7152031 0.0002283473 ## exposures29         11894.42   103273.15  0.1151743 0.9083578769 ## mentalhealth29 -134619429.10 36395817.55 -3.6987610 0.0002431907 ## physical29       -5602147.33  7482932.74 -0.7486566 0.4544518548 ## [1] \"multivar-ANOVA p-value p = 7.0411e-06\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##          DR1TNUMF          DR1TALCO DR1TWS_Don.t.know  ##         1.0000000         0.8652487         0.8386563 ## [1] \"Simlr weights exposures\" ##    LBXBGM  LBDTHGSI    LBXTHG  ## 1.0000000 0.9195541 0.9189733 ## [1] \"Simlr weights mentalhealth\" ##    DPQ050    DPQ080    DPQ090  ## 1.0000000 0.6980475 0.4740601 ## [1] \"Simlr weights physical\" ##    BPXML1     BMXHT    BMXLEG  ## 1.0000000 0.9029250 0.8963359 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error   t value     Pr(>|t|) ## diet30          2.011941e+03 5.810695e+02  3.462480 0.0005859124 ## exposures30     2.043144e+04 1.366770e+05  0.149487 0.8812357297 ## mentalhealth30 -1.312589e+08 3.685133e+07 -3.561850 0.0004071684 ## physical30     -2.278684e+07 1.569667e+07 -1.451700 0.1472758394 ## [1] \"multivar-ANOVA p-value p = 1.4338e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TFOLA  DR1TFDFE    DR1TVK  ## 1.0000000 0.9600730 0.8818336 ## [1] \"Simlr weights exposures\" ##  LBDIHGSI    LBXIHG    LBXBGM  ## 1.0000000 0.9994762 0.7896697 ## [1] \"Simlr weights mentalhealth\" ##    DPQ060    SLQ060    DPQ050  ## 1.0000000 0.8871720 0.8825806 ## [1] \"Simlr weights physical\" ##    BMXLEG   BMXARML    BPXSY3  ## 1.0000000 0.4204358 0.4015681 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error    t value     Pr(>|t|) ## diet33              24601.92     6150.473  4.0000048 7.393847e-05 ## exposures33         80282.23   259965.166  0.3088192 7.576007e-01 ## mentalhealth33 -171139214.61 46762879.636 -3.6597236 2.821505e-04 ## physical33       -7920876.87  4978296.356 -1.5910818 1.122872e-01 ## [1] \"multivar-ANOVA p-value p = 6.0233e-07\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TCAFF  DR1TACAR  DR1TNIAC  ## 1.0000000 0.7451516 0.3777957 ## [1] \"Simlr weights exposures\" ##    LBXVEB    LBXVFN    LBXVXY  ## 1.0000000 0.9520932 0.9425032 ## [1] \"Simlr weights mentalhealth\" ##    DPQ060    DPQ040    DPQ050  ## 1.0000000 0.4384922 0.1435947 ## [1] \"Simlr weights physical\" ##    BPXPLS    BPXSY3    BPXSY2  ## 1.0000000 0.2113587 0.1798287 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error    t value     Pr(>|t|) ## diet34              53312.18     17903.39  2.9777695 3.058932e-03 ## exposures34         94848.34    230083.43  0.4122345 6.803621e-01 ## mentalhealth34 -600762267.26 151818296.74 -3.9571137 8.801331e-05 ## physical34       84718978.25 110445708.25  0.7670645 4.434419e-01 ## [1] \"multivar-ANOVA p-value p = 1.3232e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ## DR1TPOTA DR1TATOC  DR1TVB2  ## 1.000000 0.959826 0.737041 ## [1] \"Simlr weights exposures\" ##    LBXVBZ    LBXVFN    LBX2DF  ## 1.0000000 0.9699625 0.9679440 ## [1] \"Simlr weights mentalhealth\" ##    DPQ020    DPQ070    DPQ100  ## 1.0000000 0.4904109 0.4561868 ## [1] \"Simlr weights physical\" ##     BMXHT   BMXARML    BMXLEG  ## 1.0000000 0.8612184 0.4862759 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error   t value     Pr(>|t|) ## diet36              11153.91     3423.032  3.258488 0.0012041557 ## exposures36      -1419724.95  1306003.071 -1.087076 0.2775799019 ## mentalhealth36 -108451200.21 27820272.450 -3.898280 0.0001114931 ## physical36       -3824404.55  3739778.748 -1.022629 0.3070280918 ## [1] \"multivar-ANOVA p-value p = 1.4158e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TPHOS  DR1TVB12  DR1TVARA  ## 1.0000000 0.8214686 0.8061262 ## [1] \"Simlr weights exposures\" ##    LBXBCD    LBXVEB    LBXBMN  ## 1.0000000 0.2199418 0.2000076 ## [1] \"Simlr weights mentalhealth\" ##    DPQ100    DPQ060    DPQ070  ## 1.0000000 0.7043753 0.5408071 ## [1] \"Simlr weights physical\" ##   BMXARMC  BMXWAIST    BPXSY3  ## 1.0000000 0.5177463 0.5146006 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate  Std. Error    t value     Pr(>|t|) ## diet39             53583.55    15206.00  3.5238421 0.0004684541 ## exposures39        42515.67    66198.04  0.6422497 0.5210352598 ## mentalhealth39 -82148873.88 25937853.21 -3.1671424 0.0016432203 ## physical39      -4365812.66  2756913.52 -1.5835871 0.1139840257 ## [1] \"multivar-ANOVA p-value p = 8.4071e-06\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TFIBE  DR1TBCAR  DR1TCARB  ## 1.0000000 0.9452224 0.6448965 ## [1] \"Simlr weights exposures\" ##    LBXSCU  LBDBPBSI    LBXBPB  ## 1.0000000 0.6806733 0.6805573 ## [1] \"Simlr weights mentalhealth\" ##    SLQ060    SLQ050    DPQ100  ## 1.0000000 0.3828428 0.2590025 ## [1] \"Simlr weights physical\" ##    BPXPLS    BPXML1  BMXWAIST  ## 1.0000000 0.9335379 0.2837086 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate   Std. Error    t value     Pr(>|t|) ## diet40             19652.42     6566.087  2.9930180 0.0029130009 ## exposures40        32865.75    54502.516  0.6030135 0.5468008275 ## mentalhealth40 -59321128.72 17261112.661 -3.4366921 0.0006430516 ## physical40      -3986083.00  2307245.085 -1.7276374 0.0847332990 ## [1] \"multivar-ANOVA p-value p = 1.5842e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##                DR1TM161                DR1TTFAT DR1TWS_Community.supply  ##               1.0000000               0.8823645               0.8733853 ## [1] \"Simlr weights exposures\" ##    LBXBGM  LBDTHGSI    LBXTHG  ## 1.0000000 0.9510665 0.9503150 ## [1] \"Simlr weights mentalhealth\" ##    DPQ010    DPQ040    DPQ100  ## 1.0000000 0.4487179 0.3648385 ## [1] \"Simlr weights physical\" ##   BMXARML    BPXSY3    BPXSY2  ## 1.0000000 0.8993491 0.7862214 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate Std. Error   t value     Pr(>|t|) ## diet41             68840.52    18789.8  3.663718 0.0002779098 ## exposures41       653279.10   650291.5  1.004594 0.3156273911 ## mentalhealth41 -51267772.07 15353861.1 -3.339080 0.0009098164 ## physical41     -22130553.18 13825291.3 -1.600730 0.1101323983 ## [1] \"multivar-ANOVA p-value p = 9.8322e-06\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TS160  DR1TM161  DR1TP204  ## 1.0000000 0.9944345 0.9075025 ## [1] \"Simlr weights exposures\" ##    LBXSZN    LBXSCU  LBDTHGSI  ## 1.0000000 0.9021181 0.7754858 ## [1] \"Simlr weights mentalhealth\" ##    DPQ080    DPQ060    DPQ030  ## 1.0000000 0.5296560 0.2845158 ## [1] \"Simlr weights physical\" ##     BMXHT    BPXPLS    BPXSY1  ## 1.0000000 0.4858347 0.4085466 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                   Estimate  Std. Error    t value     Pr(>|t|) ## diet42             71522.8    17645.04  4.0534216 5.938404e-05 ## exposures42       167700.9   444187.38  0.3775453 7.059448e-01 ## mentalhealth42 -62837363.3 17891803.81 -3.5120754 4.891126e-04 ## physical42      -4346340.2  4474643.19 -0.9713266 3.319028e-01 ## [1] \"multivar-ANOVA p-value p = 2.5722e-06\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##                DR1TNUMF DR1TWS_Community.supply                  DR1TVD  ##               1.0000000               0.7606378               0.6795791 ## [1] \"Simlr weights exposures\" ##    LBXBGE    LBXSSE  LBDSSESI  ## 1.0000000 0.4932140 0.4767414 ## [1] \"Simlr weights mentalhealth\" ##    SLQ060    DPQ050    DPQ040  ## 1.0000000 0.3744159 0.3111976 ## [1] \"Simlr weights physical\" ##     BMXHT   BMXARML    BPXSY3  ## 1.0000000 0.8267195 0.5914586 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate  Std. Error   t value    Pr(>|t|) ## diet45              93760.37    29704.94  3.156390 0.001703654 ## exposures45         76262.38    53492.13  1.425675 0.154649474 ## mentalhealth45 -115305668.17 39311242.83 -2.933147 0.003525243 ## physical45       -4850521.17  3802022.19 -1.275774 0.202687751 ## [1] \"multivar-ANOVA p-value p = 3.9267e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##    DR1TVC  DR1TMOIS   DR1TVB2  ## 1.0000000 0.9668587 0.8700896 ## [1] \"Simlr weights exposures\" ##    LBXBCD    LBX2DF    LBXBSE  ## 1.0000000 0.9625928 0.7339448 ## [1] \"Simlr weights mentalhealth\" ##    SLQ050    DPQ010    DPQ060  ## 1.0000000 0.8285999 0.3460094 ## [1] \"Simlr weights physical\" ##    BPXSY2    BPXDI1    BPXML1  ## 1.0000000 0.9515995 0.8410977 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate Std. Error   t value    Pr(>|t|) ## diet48             96632.450   29521.67  3.273272 0.001144289 ## exposures48         5743.386   34524.04  0.166359 0.867948477 ## mentalhealth48 -12167576.911 4629905.53 -2.628040 0.008878769 ## physical48      -5506437.980 3598591.28 -1.530165 0.126672370 ## [1] \"multivar-ANOVA p-value p = 7.1343e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##    DR1TVD  DR1TVB12  DR1TP184  ## 1.0000000 0.9792164 0.8776736 ## [1] \"Simlr weights exposures\" ##    LBXBCD  LBDTHGSI    LBXTHG  ## 1.0000000 0.4828177 0.4826542 ## [1] \"Simlr weights mentalhealth\" ##    DPQ010    DPQ080    SLQ060  ## 1.0000000 0.3939254 0.3807426 ## [1] \"Simlr weights physical\" ##     BMXHT    BPXDI3    BPXSY3  ## 1.0000000 0.8829440 0.7929985 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate   Std. Error    t value     Pr(>|t|) ## diet49             18661.88     4944.102  3.7745740 0.0001815491 ## exposures49       224876.77  1299597.549  0.1730357 0.8627004826 ## mentalhealth49 -78521771.71 20275766.095 -3.8726907 0.0001234567 ## physical49      -5840119.85  3563827.971 -1.6387210 0.1019641432 ## [1] \"multivar-ANOVA p-value p = 4.5754e-07\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TMOIS  DR1TSODI  DR1TSELE  ## 1.0000000 0.8169447 0.8042665 ## [1] \"Simlr weights exposures\" ##    LBXV06    LBXVTC    LBXBGM  ## 1.0000000 0.7945350 0.6320937 ## [1] \"Simlr weights mentalhealth\" ##    DPQ060    DPQ090    DPQ040  ## 1.0000000 0.8926709 0.7816895 ## [1] \"Simlr weights physical\" ##    BMXLEG    BPXDI2    BPXSY3  ## 1.0000000 0.8012626 0.7445211 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate   Std. Error    t value    Pr(>|t|) ## diet50             210340.9     64418.12  3.2652442 0.001176445 ## exposures50       1071026.1    551081.77  1.9434975 0.052573669 ## mentalhealth50  -90893087.8  31544178.33 -2.8814537 0.004146033 ## physical50     -116031724.5 200226164.02 -0.5795033 0.562537054 ## [1] \"multivar-ANOVA p-value p = 4.2682e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TNUMF  DR1TS040  DR1TS060  ## 1.0000000 0.5133367 0.4887674 ## [1] \"Simlr weights exposures\" ##    LBXVFN    LBX2DF    LBXVBZ  ## 1.0000000 0.7867256 0.7733644 ## [1] \"Simlr weights mentalhealth\" ##    SLQ050    DPQ020    DPQ050  ## 1.0000000 0.4225583 0.2566246 ## [1] \"Simlr weights physical\" ##            BMXBMI            BPXPLS BPXPULS_Irregular  ##         1.0000000         0.8798944         0.8485321 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error   t value     Pr(>|t|) ## diet52          5.407802e+03     1893.796  2.855536 4.493355e-03 ## exposures52    -7.978607e+06  3718532.696 -2.145633 3.243193e-02 ## mentalhealth52 -1.957764e+08 47080885.554 -4.158300 3.834341e-05 ## physical52      5.649571e+06  7591182.520  0.744228 4.571236e-01 ## [1] \"multivar-ANOVA p-value p = 6.4694e-06\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TSELE  DR1TPROT  DR1TP204  ## 1.0000000 0.6198145 0.5737990 ## [1] \"Simlr weights exposures\" ##    LBXBCD    LBXVBZ    LBX2DF  ## 1.0000000 0.5826188 0.5511010 ## [1] \"Simlr weights mentalhealth\" ##    DPQ100    DPQ050    DPQ090  ## 1.0000000 0.8601034 0.5198225 ## [1] \"Simlr weights physical\" ##     BMXHT     BMXWT   BMXSAD2  ## 1.0000000 0.1972535 0.1523086 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error    t value     Pr(>|t|) ## diet54          7.298246e+03     2057.386  3.5473391 4.296216e-04 ## exposures54     9.237693e+04   102687.719  0.8995909 3.688149e-01 ## mentalhealth54 -1.201663e+08 28830091.530 -4.1680847 3.679257e-05 ## physical54     -2.161575e+07 14012627.605 -1.5425909 1.236268e-01 ## [1] \"multivar-ANOVA p-value p = 4.2006e-07\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TFIBE  DR1TCOPP    DR1TFF  ## 1.0000000 0.5603895 0.5168331 ## [1] \"Simlr weights exposures\" ##    LBXBPB  LBDBPBSI  LBDSSESI  ## 1.0000000 0.9988043 0.7349558 ## [1] \"Simlr weights mentalhealth\" ##    DPQ050    DPQ100    DPQ040  ## 1.0000000 0.7642996 0.6634469 ## [1] \"Simlr weights physical\" ##    BPXPLS   BMXARMC    BPXSY2  ## 1.0000000 0.5321106 0.2137548 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate  Std. Error   t value     Pr(>|t|) ## diet55              40652.64    13058.87  3.113028 0.0019687699 ## exposures55        340642.04   239148.05  1.424398 0.1550182313 ## mentalhealth55 -141730751.35 36297813.74 -3.904664 0.0001086842 ## physical55      -11494809.74 10126063.21 -1.135171 0.2569027659 ## [1] \"multivar-ANOVA p-value p = 2.5902e-06\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##   DR1TVB2  DR1TVB12  DR1TCAFF  ## 1.0000000 0.8318306 0.8216150 ## [1] \"Simlr weights exposures\" ##    LBXVFN  LBDBSESI    LBXBSE  ## 1.0000000 0.9559682 0.9544223 ## [1] \"Simlr weights mentalhealth\" ##    DPQ080    DPQ050    DPQ020  ## 1.0000000 0.2843048 0.2595538 ## [1] \"Simlr weights physical\" ##   BMXARML   BMXARMC    BPXSY2  ## 1.0000000 0.2414210 0.1419521 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate   Std. Error   t value     Pr(>|t|) ## diet60             10079.61     3218.193  3.132070 0.0018479870 ## exposures60       191990.42   218814.187  0.877413 0.3807263994 ## mentalhealth60 -73169827.60 21426137.231 -3.414980 0.0006951491 ## physical60     -12223195.96 11690933.544 -1.045528 0.2963354409 ## [1] \"multivar-ANOVA p-value p = 2.5059e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##   DR1TVB1  DR1TZINC  DR1TMOIS  ## 1.0000000 0.6069347 0.5770545 ## [1] \"Simlr weights exposures\" ##    LBXIHG  LBDIHGSI    LBXV4C  ## 1.0000000 0.9971822 0.7159360 ## [1] \"Simlr weights mentalhealth\" ##    DPQ100    DPQ020    DPQ010  ## 1.0000000 0.7958383 0.7882256 ## [1] \"Simlr weights physical\" ##    BMXLEG    BPXML1    BPXSY2  ## 1.0000000 0.3062792 0.1108497 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error   t value     Pr(>|t|) ## diet65              36795.28     9529.999  3.860996 0.0001293200 ## exposures65      -5248544.18  1979015.394 -2.652099 0.0082793678 ## mentalhealth65 -109844465.42 32099107.175 -3.422041 0.0006777889 ## physical65      -17411348.62 11544605.391 -1.508180 0.1322038846 ## [1] \"multivar-ANOVA p-value p = 2.0847e-07\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TPOTA    DR1TVD  DR1TS040  ## 1.0000000 0.8724371 0.7843823 ## [1] \"Simlr weights exposures\" ##    LBXBCD    LBX2DF    LBXVFN  ## 1.0000000 0.7072920 0.6941341 ## [1] \"Simlr weights mentalhealth\" ##    DPQ020    SLQ050    SLQ060  ## 1.0000000 0.6946523 0.6655956 ## [1] \"Simlr weights physical\" ##    BMXARML     BPXSY3     BPXSY1  ## 1.00000000 0.13306998 0.08820035 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error    t value     Pr(>|t|) ## diet70          2.482664e+03 6.089067e+02  4.0772489 5.381018e-05 ## exposures70     1.217005e+05 9.683292e+04  1.2568093 2.094689e-01 ## mentalhealth70 -1.016691e+08 3.856736e+07 -2.6361425 8.672693e-03 ## physical70      2.310731e+07 2.819405e+07  0.8195812 4.128849e-01 ## [1] \"multivar-ANOVA p-value p = 1.7641e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##    DR1TFF  DR1TPROT  DR1TBCAR  ## 1.0000000 0.9771406 0.8798735 ## [1] \"Simlr weights exposures\" ##    LBXVBZ    LBX2DF    LBXVFN  ## 1.0000000 0.8070446 0.7162053 ## [1] \"Simlr weights mentalhealth\" ##    DPQ050    SLQ050    DPQ030  ## 1.0000000 0.8881670 0.7576864 ## [1] \"Simlr weights physical\" ##    BMXLEG    BPXPLS     BMXHT  ## 1.0000000 0.7254804 0.6991450 ## *** result end *********************************** ########################################################################################## ########################################################################################## # https://wwwn.cdc.gov/nchs/nhanes/search/default.aspx # > interpret_simlr_vector2( resultNH$v[['exposures']], 1, n2show=5, shortnames=F ) #   LBXVBZ    LBXVOX    LBXVFN    LBX2DF  # benzene, Xylene, furan, Dimethylfuran # 1.0000000 0.3346728 0.1868323 0.0586727  ##########################################################################################"},{"path":"https://github.com/stnava/simlr_nhanes/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Brian Avants. Maintainer.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"c, \"Avants\", role=c, ) e (2025). simlr.nhanes: SiMLR example using NHANES data. R package version 1.0.0, https://github.com/stnava/simlr_nhanes.","code":"@Manual{,   title = {simlr.nhanes: SiMLR example using NHANES data},   author = {{c} and {\"Avants\"} and {role=c} and email=\"stnava@gmail.com\") )},   year = {2025},   note = {R package version 1.0.0},   url = {https://github.com/stnava/simlr_nhanes}, }"},{"path":"https://github.com/stnava/simlr_nhanes/index.html","id":"simlr_nhanes","dir":"","previous_headings":"","what":"Helper package for simlr NHANES example analyses","title":"Helper package for simlr NHANES example analyses","text":"documentation page ","code":""},{"path":"https://github.com/stnava/simlr_nhanes/index.html","id":"simlr-nhanes","dir":"","previous_headings":"","what":"SiMLR NHANES","title":"Helper package for simlr NHANES example analyses","text":"TODO Data sources: NHANES raw CAPRA curated data nhanesA Code sources: haven ","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Formula Factors — check_formula_factors","title":"Check Formula Factors — check_formula_factors","text":"Identifies factor variables formula fewer two levels.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Formula Factors — check_formula_factors","text":"","code":"check_formula_factors(formula, dataframe)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Formula Factors — check_formula_factors","text":"formula formula object. dataframe data frame containing variables formula.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Formula Factors — check_formula_factors","text":"vector factor variable names fewer two levels.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Formula Factors — check_formula_factors","text":"","code":"check_formula_factors(mpg ~ cyl + gear, mtcars) #> character(0)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"Converts data frame categorical numeric columns numeric matrix, using one-hot encoding categorical variables.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"","code":"convert_to_numeric_matrix(df)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"df data frame.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"numeric matrix.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"","code":"df <- data.frame(a = c(1, 2), b = c(\"yes\", \"no\")) convert_to_numeric_matrix(df) #>      a b_no b_yes #> [1,] 1    0     1 #> [2,] 2    1     0"},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Count Unique Values and Filter Columns — count_unique_values","title":"Count Unique Values and Filter Columns — count_unique_values","text":"Counts unique values column data frame retains columns exceeding specified threshold.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count Unique Values and Filter Columns — count_unique_values","text":"","code":"count_unique_values(df, threshold)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count Unique Values and Filter Columns — count_unique_values","text":"df data frame. threshold integer specifying minimum number unique values retain column.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count Unique Values and Filter Columns — count_unique_values","text":"data frame filtered columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count Unique Values and Filter Columns — count_unique_values","text":"","code":"df <- data.frame(a = c(1, 1, 2), b = c(\"x\", \"y\", \"z\")) count_unique_values(df, 1) #> a : 2 unique values #> b : 3 unique values #>   a b #> 1 1 x #> 2 1 y #> 3 2 z"},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Regression Formula — create_formula","title":"Create Regression Formula — create_formula","text":"Creates regression formula data frame, excluding specified columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Regression Formula — create_formula","text":"","code":"create_formula(dataframe, outcome, exclusions)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Regression Formula — create_formula","text":"dataframe input data frame. outcome outcome variable. exclusions vector columns exclude formula.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Regression Formula — create_formula","text":"formula object regression.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Regression Formula — create_formula","text":"","code":"create_formula(mtcars, \"mpg\", exclusions = c(\"cyl\", \"gear\")) #> mpg ~ disp + hp + drat + wt + qsec + vs + am + carb #> <environment: 0x124b16690>"},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Columns with High NA Percentage — filter_na_columns","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"Filters columns data frame higher percentage NA values specified threshold.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"","code":"filter_na_columns(df, max_na_percent = 0.2)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"df data frame. max_na_percent Maximum allowed proportion NA values per column. Default 0.2.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"data frame filtered columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"","code":"filter_na_columns(data.frame(a = c(1, NA, 3), b = c(NA, NA, 3)), max_na_percent = 0.5) #>    a #> 1  1 #> 2 NA #> 3  3"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute Missing Values and Report NA Counts — impute_and_report_na","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"function imputes missing values matrix column means reports count missing values per column.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"","code":"impute_and_report_na(mat)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"mat numeric matrix.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"matrix imputed values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"","code":"mat <- matrix(c(1, NA, 3, 4, 5, NA), ncol = 2) impute_and_report_na(mat) #> No missing values detected. #>      [,1] [,2] #> [1,]    1    4 #> [2,]   NA    5 #> [3,]    3   NA"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute Missing Data — impute_data","title":"Impute Missing Data — impute_data","text":"Imputes missing values data frame. Numeric columns imputed median, categorical columns frequent category.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute Missing Data — impute_data","text":"","code":"impute_data(df)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute Missing Data — impute_data","text":"df data frame missing values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute Missing Data — impute_data","text":"data frame imputed values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute Missing Data — impute_data","text":"","code":"impute_data(data.frame(a = c(1, NA, 3), b = c(\"x\", \"y\", NA))) #>   a b #> 1 1 x #> 2 2 y #> 3 3 x"},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"Maps specific frequency categories numeric values, error handling invalid categories.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"","code":"map_freq_to_numeric(df, colname)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"df data frame containing column mapped. colname name column mapped.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"numeric vector mapped values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"","code":"map_freq_to_numeric(data.frame(freq = c(\"Not at all\", \"Several days\")), \"freq\") #> [1] 0 1"},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"function generates new matrix applying random linear transformation given latent matrix adding Gaussian noise.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"","code":"matrix_from_latent(latent_matrix, target_p, noise_sd = 0.3)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"latent_matrix numeric matrix representing latent structure (n x k). target_p integer specifying number columns output matrix. noise_sd numeric value indicating standard deviation Gaussian noise added. Default 0.3.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"numeric matrix dimensions (n x target_p), generated latent matrix random linear transformation added Gaussian noise.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"","code":"latent <- matrix(rnorm(20), nrow = 5, ncol = 4) generated_matrix <- matrix_from_latent(latent, target_p = 3, noise_sd = 0.2) print(generated_matrix) #>            [,1]        [,2]       [,3] #> [1,] -0.8420428 -2.26384990 -1.4360201 #> [2,] -1.4226564  0.01670062  2.9901238 #> [3,] -3.9410985 -6.29693119  4.4003814 #> [4,]  2.4102664  1.54497778 -0.5047176 #> [5,] -1.5365092  0.60855535  0.2409585"},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"function loops list matrices returns maximum number columns found across matrices list.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"","code":"max_columns_list(matrix_list)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"matrix_list list containing matrices. Non-matrix elements ignored warning.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"integer representing maximum number columns across matrices list.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"","code":"mat1 <- matrix(1:6, nrow = 2) mat2 <- matrix(1:12, nrow = 3) mat3 <- matrix(1:4, nrow = 2) max_columns_list(list(mat1, mat2, mat3)) # Returns 2 #> [1] 4"},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"Merges columns type two data frames based common column names.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"","code":"merge_same_type_columns(df1, df2)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"df1 First data frame. df2 Second data frame.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"merged data frame containing matching columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"","code":"merge_same_type_columns(data.frame(a = 1:3), data.frame(a = 4:6)) #>   a #> 1 1 #> 2 2 #> 3 3 #> 4 4 #> 5 5 #> 6 6"},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"function loops list matrices returns minimum number columns found across matrices list.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"","code":"min_columns_list(matrix_list)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"matrix_list list containing matrices. Non-matrix elements ignored warning.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"integer representing minimum number columns across matrices list.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"","code":"mat1 <- matrix(1:6, nrow = 2) mat2 <- matrix(1:12, nrow = 3) mat3 <- matrix(1:4, nrow = 2) min_columns_list(list(mat1, mat2, mat3)) # Returns 2 #> [1] 2"},{"path":"https://github.com/stnava/simlr_nhanes/reference/nhanescog.html","id":null,"dir":"Reference","previous_headings":"","what":"NHANES cognition data — nhanescog","title":"NHANES cognition data — nhanescog","text":"NHANES cognition data","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/nhanescog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NHANES cognition data — nhanescog","text":"","code":"nhanescog"},{"path":"https://github.com/stnava/simlr_nhanes/reference/nhanescog.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"NHANES cognition data — nhanescog","text":"Curated nhanes cognition data CAPRA","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/nhanescog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NHANES cognition data — nhanescog","text":"","code":"if (FALSE) { # \\dontrun{  data(\"nhanescog_2011_2014\") } # }"},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and Filter XPT File — read_and_filter_xpt","title":"Read and Filter XPT File — read_and_filter_xpt","text":"Reads XPT file, converts data frame, renames first column \"ID\", filters based unique value counts.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and Filter XPT File — read_and_filter_xpt","text":"","code":"read_and_filter_xpt(file_path, threshold = 100)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and Filter XPT File — read_and_filter_xpt","text":"file_path Path XPT file. threshold Numeric threshold filter columns based unique value counts. Default 100.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and Filter XPT File — read_and_filter_xpt","text":"data frame filtered columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and Filter XPT File — read_and_filter_xpt","text":"","code":"read_and_filter_xpt(\"data.xpt\", threshold = 50) #> Error in read_xpt(file_path): could not find function \"read_xpt\""},{"path":"https://github.com/stnava/simlr_nhanes/reference/remove_perfectly_correlated.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Perfectly Correlated Columns from a Data Frame — remove_perfectly_correlated","title":"Remove Perfectly Correlated Columns from a Data Frame — remove_perfectly_correlated","text":"function identifies columns data frame perfectly correlated (correlation coefficient 1 -1) removes second instance pair, ensuring two columns resulting data frame perfectly correlated.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/remove_perfectly_correlated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Perfectly Correlated Columns from a Data Frame — remove_perfectly_correlated","text":"","code":"remove_perfectly_correlated(df, tolerance = 1e-06)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/remove_perfectly_correlated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Perfectly Correlated Columns from a Data Frame — remove_perfectly_correlated","text":"df data frame containing numeric columns checked perfect correlation. tolerance float tolerance value","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/remove_perfectly_correlated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Perfectly Correlated Columns from a Data Frame — remove_perfectly_correlated","text":"data frame redundant perfectly correlated columns removed.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/remove_perfectly_correlated.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove Perfectly Correlated Columns from a Data Frame — remove_perfectly_correlated","text":"","code":"df <- data.frame(a = 1:5, b = 1:5, c = 5:1+rnorm(5), d = c(2, 1, 6, 8, 10)) remove_perfectly_correlated(df) #>   a         c  d #> 1 1 5.5777091  2 #> 2 2 4.1181949  1 #> 3 3 1.0882795  6 #> 4 4 2.8620865  8 #> 5 5 0.7567633 10"}]
