[{"path":"https://github.com/stnava/simlr_nhanes/articles/simlr_nhanes.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"simlr: nhanes application explained","text":"extract distinct related types data NHANES. data types : demographics: age, sex, educational attainment; diet: measurements nutritional status; physical: blood pressure physical measurements; mental health: outcomes Patient Health Questionnaire-9; environmental exposures: metals related environmental toxins. combined SiMLR unsupervised dimensionality reduction. resulting low-dimensional representations used joint prediction cognitive outcomes. 400 subjects measurements available along environmental exposures.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/articles/simlr_nhanes.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"simlr: nhanes application explained","text":"Load relevant librarys.","code":"# Load necessary libraries library(ggplot2) library(ggfortify) library(gridExtra) library(ellipse) ##  ## Attaching package: 'ellipse' ## The following object is masked from 'package:graphics': ##  ##     pairs library(ANTsR) ## Warning: replacing previous import 'stats::filter' by 'dplyr::filter' when ## loading 'ANTsR' ## ANTsR 0.6.1 ## Environment variables set either in .Renviron or with a seed (e.g. XXX):  ## Sys.setenv(ANTS_RANDOM_SEED = XXX) ## Sys.setenv(ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS = 1) ## may influence reproducibility in some methods. See ## https://github.com/ANTsX/ANTs/wiki/antsRegistration-reproducibility-issues ## for more information.Also see *repro methods in antsRegistration. ##  ## Attaching package: 'ANTsR' ## The following objects are masked from 'package:stats': ##  ##     sd, var ## The following objects are masked from 'package:base': ##  ##     all, any, apply, max, min, prod, range, sum library(subtyper) ## Warning: replacing previous import 'ciTools::add_ci' by 'gtsummary::add_ci' ## when loading 'subtyper' ## Warning: replacing previous import 'dplyr::as_data_frame' by ## 'igraph::as_data_frame' when loading 'subtyper' ## Warning: replacing previous import 'dplyr::groups' by 'igraph::groups' when ## loading 'subtyper' ## Warning: replacing previous import 'dplyr::union' by 'igraph::union' when ## loading 'subtyper' ## Warning: replacing previous import 'gtsummary::add_ci' by 'ciTools::add_ci' ## when loading 'subtyper' ## Registered S3 methods overwritten by 'fmsb': ##   method    from ##   print.roc pROC ##   plot.roc  pROC ## Warning: replacing previous import 'gt::gt' by 'globaltest::gt' when loading ## 'subtyper' ## Warning: replacing previous import 'dplyr::rename' by 'plyr::rename' when ## loading 'subtyper' library( nhanesA ) library( simlr.nhanes ) library( dplyr ) ##  ## Attaching package: 'dplyr' ## The following object is masked from 'package:Biobase': ##  ##     combine ## The following objects are masked from 'package:BiocGenerics': ##  ##     combine, intersect, setdiff, union ## The following object is masked from 'package:gridExtra': ##  ##     combine ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union data(\"nhanescog_2011_2014\") dtname=\"/Users/stnava/Downloads/cleaned_nhanes_21743372/41731260_dictionary_nhanes.csv\" if ( file.exists( dtname ) ) {   nhanes_dict = read.csv( dtname )    }"},{"path":"https://github.com/stnava/simlr_nhanes/articles/simlr_nhanes.html","id":"nhanes-example","dir":"Articles","previous_headings":"","what":"NHANES example","title":"simlr: nhanes application explained","text":"download data fly merge together using embedded data well nhanesA package.  Define categories data can used identify low-dimensional representation based SiMLR objective. Run methods using reasonable defaults recommended prior work. Apply learned representations data matrices.","code":"## simpleWarning in download.file(url, tf, mode = \"wb\", quiet = TRUE): downloaded length 0 != reported length 1245 ##  ##  ## simpleWarning in download.file(url, tf, mode = \"wb\", quiet = TRUE): downloaded length 0 != reported length 1245 ##  ##   Male Female  ##   1469   1545 ## character(0) #################################### if ( TRUE ) {   fdatanum = convert_to_numeric_matrix( fdata )   tarcols = colnames(fdatanum)   grepper =multigrep( c(\"_NA\",\"limit\"),tarcols)    fdatanum = fdatanum[ , -grepper]   tarcols=tarcols[-grepper]   fdatanum = data.frame( (fdatanum))   colnames(fdatanum)=tarcols } colcats=rep(\"Basic\",ncol(fdatanum)) colcats[ colnames(fdatanum) %in%  c(\"ridageyr\",   getNamesFromDataframe(\"riagendr\",fdatanum),   getNamesFromDataframe(\"race\",fdatanum),   \"dmdeduc2\",\"INDFMPIR\") ]='demog' bpname=getNamesFromDataframe( \"BPX\",fdatanum) bmname=getNamesFromDataframe( \"BMX\",fdatanum) colcats[ colnames(fdatanum) %in%  c(bmname,bpname,\"Testosterone\",\"TotChol\",\"Diabetes\" ) ]='physical' colcats[ colnames(fdatanum) %in%   c(   getNamesFromDataframe( \"DPQ\", fdatanum ),    getNamesFromDataframe( \"SLQ\", fdatanum ) )  ]='mentalhealth' x=c('LC','.x','.y','URDUMMAL','LBXVDE','LBX4CE') colcats[ colnames(fdatanum) %in%  getNamesFromDataframe( \"LBX\", fdatanum, exclusions=x ) ]='exposures' colcats[ colnames(fdatanum) %in%  getNamesFromDataframe( \"LBD\", fdatanum, exclusions=x ) ]='exposures' colcats[ colnames(fdatanum) %in%  getNamesFromDataframe( \"URX\", fdatanum, exclusions=x ) ]='exposures' colcats[ colnames(fdatanum) %in%  getNamesFromDataframe( \"URD\", fdatanum, exclusions=x ) ]='exposures' colcats[ colnames(fdatanum) %in%  getNamesFromDataframe( \"LBC\", fdatanum, exclusions=x ) ]='exposures' colcats[ colnames(fdatanum) %in%  getNamesFromDataframe( \"DR1T\", fdatanum, exclusions='DR1TWS' ) ]='diet' # colcats[ colnames(fdatanum) %in%  getNamesFromDataframe( \"cfd\", fdatanum )[-1] ]='digitspan' tbl=table(colcats) for ( nm in names(tbl)) {   expmiss=colSums(is.na(fdatanum[ ,colcats == nm ]) )   colcats[ colnames(fdatanum) %in% names(expmiss)[ expmiss > 800 ]  ] = 'Basic'   } tbl=table(colcats) ############## nh_list=list() knm=names(tbl)[-c(1)] mycc = complete.cases( fdatanum[ , colcats %in% 'demog' ]) # mycc = !is.na(fdata$LBXTHG) # complete.cases( fdatanum[ , colcats %in% 'exposures' ]) table(mycc) ## mycc ## FALSE  TRUE  ##   210  2387 doimp=TRUE for ( k in knm ) {     print(k)     temp0=(fdatanum[mycc,colcats==k])     temp = data.frame(convert_to_numeric_matrix( temp0 ))     vv=apply( temp, 2, FUN=var, na.rm=T )     temp = temp[ , vv > 0 ]     if ( k %in% c('exposures','diet') | TRUE ) {       nn = colnames(temp)       for (  jj in 1:ncol(temp) ) { # temp = truncatehi(temp, nn[jj], t = 50, removeit = FALSE)         temp[ , nn[jj] ] = sqrt(temp[ , nn[jj] ]-min(temp[ , nn[jj] ],na.rm=T))         }       colnames(temp) = nn       temp = remove_perfectly_correlated( data.frame( temp ), tolerance=0.05 )       vv=apply( temp, 2, FUN=var, na.rm=T )       temp = temp[ , vv > 0 ]     }     for ( j in 1:ncol(temp) ) { #        hist( temp[,j], main=colnames(temp)[j]) #        Sys.sleep(1)         }     nh_list[[length(nh_list)+1]]=data.matrix( ( temp ) )     print(colnames(nh_list[[length(nh_list)]])) #    nh_list[[length(nh_list)]]=impute_and_report_na(nh_list[[length(nh_list)]] )     } ## [1] \"demog\" ## [1] \"ridageyr\"   \"dmdeduc2\"   \"INDFMPIR\"   \"riagendr_1\" \"race_1\"     ## [6] \"race_2\"     \"race_3\"     \"race_4\"     ## [1] \"diet\" ##  [1] \"DR1TNUMF\" \"DR1TKCAL\" \"DR1TPROT\" \"DR1TCARB\" \"DR1TSUGR\" \"DR1TFIBE\" ##  [7] \"DR1TTFAT\" \"DR1TSFAT\" \"DR1TPFAT\" \"DR1TCHOL\" \"DR1TATOC\" \"DR1TATOA\" ## [13] \"DR1TRET\"  \"DR1TVARA\" \"DR1TACAR\" \"DR1TBCAR\" \"DR1TCRYP\" \"DR1TLYCO\" ## [19] \"DR1TLZ\"   \"DR1TVB1\"  \"DR1TVB2\"  \"DR1TNIAC\" \"DR1TVB6\"  \"DR1TFOLA\" ## [25] \"DR1TFA\"   \"DR1TFF\"   \"DR1TCHL\"  \"DR1TVB12\" \"DR1TB12A\" \"DR1TVC\"   ## [31] \"DR1TVD\"   \"DR1TVK\"   \"DR1TCALC\" \"DR1TPHOS\" \"DR1TMAGN\" \"DR1TIRON\" ## [37] \"DR1TZINC\" \"DR1TCOPP\" \"DR1TSODI\" \"DR1TPOTA\" \"DR1TSELE\" \"DR1TCAFF\" ## [43] \"DR1TTHEO\" \"DR1TALCO\" \"DR1TMOIS\" \"DR1TS040\" \"DR1TS080\" \"DR1TS120\" ## [49] \"DR1TS140\" \"DR1TM161\" \"DR1TM201\" \"DR1TM221\" \"DR1TP183\" \"DR1TP184\" ## [55] \"DR1TP204\" \"DR1TP205\" \"DR1TP225\" \"DR1TP226\" ## [1] \"exposures\" ## [1] \"LBXBPB\" \"LBXBCD\" \"LBXTHG\" \"LBXBSE\" \"LBXBMN\" \"LBXIHG\" \"LBXBGE\" ## [1] \"mentalhealth\" ##  [1] \"DPQ010\" \"DPQ020\" \"DPQ030\" \"DPQ040\" \"DPQ050\" \"DPQ060\" \"DPQ070\" \"DPQ080\" ##  [9] \"DPQ090\" \"SLQ050\" \"SLQ060\" ## [1] \"physical\" ##  [1] \"BPXPLS\"          \"BPXML1\"          \"BPXSY1\"          \"BPXDI1\"          ##  [5] \"BPXSY2\"          \"BPXDI2\"          \"BPXSY3\"          \"BPXDI3\"          ##  [9] \"BMXWT\"           \"BMXHT\"           \"BMXBMI\"          \"BMXLEG\"          ## [13] \"BMXARML\"         \"BMXARMC\"         \"BMXWAIST\"        \"BMXSAD1\"         ## [17] \"BPXPULS_Regular\" \"BPXPTY_Radial\" names(nh_list)=knm ##### ################################################################################ # regs <- regularizeSimlr(nh_list,fraction=0.15,sigma=rep(1.0,length(nh_list))) # regs=list() wdemog=which( knm == 'demog') for ( wdemog in 1:length(nh_list) ) {   nh_list[[wdemog]]=antsrimpute( nh_list[[wdemog]] )   regs[[ wdemog]]=diag( ncol(nh_list[[wdemog]])) } # regs = regularizeSimlr(nh_list) names( regs ) = knm[ -1 ] initu=initializeSimlr( nh_list, k=round(max_columns_list(nh_list)), jointReduction=TRUE ) initu=initializeSimlr( nh_list, k=round(max_columns_list(nh_list)*0.5), jointReduction=TRUE ) ########################### ###########################  if ( ! exists(\"resultNH\") ) {   mysigns = rep(\"positive\",length(nh_list))   mysigns[ (knm) %in% c('exposures','diet') ]='either'   params = list( list() )   params[[1]][[1]] = c('cca','pca')   params[[1]][[2]] = c('centerAndScale','np')   params[[2]]=list()   params[[2]][[1]] = c('regression','ica')   params[[2]][[2]] = c('whiten','np')   pindex = 2   resultNH <- simlr( nh_list,          iterations=100,         sparsenessQuantiles=rep(0.5,length(nh_list)),         positivities=mysigns,          energyType=params[[pindex]][[1]][1], mixAlg=params[[pindex]][[1]][2],         scale=params[[pindex]][[2]],         constraint=\"Stiefelx10x10\",         randomSeed=808,         initialUMatrix=initu, verbose=T )   } ## [1] \"Stiefel\" \"10\"      \"10\"      ## [1] \"     <0> BUILD-V <0> BUILD-V <0> BUILD-V <0> BUILD-V <0>    \" ## [1] \"initialDataTerm: 3.83092781915046  <o> mixer: ica  <o> E:  regression\" ## [1] \"Iteration: 1 bestEv: 18.6157062708863 bestIt: 1 CE: 18.6157062708863 featOrth: 0.116375305058441\" ## [1] \"Iteration: 2 bestEv: 1.79719058885728 bestIt: 2 CE: 1.79719058885728 featOrth: 0.126417292626845\" ## [1] \"Iteration: 3 bestEv: 1.0685538955807 bestIt: 3 CE: 1.0685538955807 featOrth: 0.107082976625733\" ## [1] \"Iteration: 4 bestEv: 0.977076526759963 bestIt: 4 CE: 0.977076526759963 featOrth: 0.0980975384999192\" ## [1] \"Iteration: 5 bestEv: 0.937806276282035 bestIt: 5 CE: 0.937806276282036 featOrth: 0.0936940221535974\" ## [1] \"Iteration: 6 bestEv: 0.719200567966557 bestIt: 6 CE: 0.719200567966557 featOrth: 0.071995760243763\" ## [1] \"Iteration: 7 bestEv: 0.680524772443196 bestIt: 7 CE: 0.680524772443196 featOrth: 0.0680212232997646\" ## [1] \"Iteration: 8 bestEv: 0.613592390616924 bestIt: 8 CE: 0.613592390616925 featOrth: 0.0614319231340781\" ## [1] \"Iteration: 9 bestEv: 0.574868651844956 bestIt: 9 CE: 0.574868651844956 featOrth: 0.0574689914028393\" ## [1] \"Iteration: 10 bestEv: 0.483152319417166 bestIt: 10 CE: 0.483152319417166 featOrth: 0.0484983188203217\" ## [1] \"Iteration: 11 bestEv: 0.449381306027819 bestIt: 11 CE: 0.449381306027819 featOrth: 0.0449256144303934\" ## [1] \"Iteration: 12 bestEv: 0.444434199368602 bestIt: 12 CE: 0.444434199368602 featOrth: 0.0444490588831778\" ## [1] \"Iteration: 13 bestEv: 0.436705604317034 bestIt: 13 CE: 0.436705604317034 featOrth: 0.0436089710408453\" ## [1] \"Iteration: 14 bestEv: 0.351996589877362 bestIt: 14 CE: 0.351996589877362 featOrth: 0.0351363427550423\" ## [1] \"Iteration: 15 bestEv: 0.348699215574622 bestIt: 15 CE: 0.348699215574622 featOrth: 0.034779264085257\" ## [1] \"Iteration: 16 bestEv: 0.339531915330851 bestIt: 16 CE: 0.339531915330851 featOrth: 0.0338901859516315\" ## [1] \"Iteration: 17 bestEv: 0.324106644618094 bestIt: 17 CE: 0.324106644618094 featOrth: 0.0322564856953545\" ## [1] \"Iteration: 18 bestEv: 0.303926030109033 bestIt: 18 CE: 0.303926030109033 featOrth: 0.0302528070407417\" ## [1] \"Iteration: 19 bestEv: 0.302612784231403 bestIt: 19 CE: 0.302612784231403 featOrth: 0.0301263510912778\" ## [1] \"Iteration: 20 bestEv: 0.284523572976445 bestIt: 20 CE: 0.284523572976445 featOrth: 0.0283554486028218\" ## [1] \"Iteration: 21 bestEv: 0.2593041582567 bestIt: 21 CE: 0.2593041582567 featOrth: 0.0258301571554371\" ## [1] \"Iteration: 22 bestEv: 0.245601911403323 bestIt: 22 CE: 0.245601911403323 featOrth: 0.0244594578885941\" ## [1] \"Iteration: 23 bestEv: 0.240037414638106 bestIt: 23 CE: 0.240037414638106 featOrth: 0.0238993993827211\" ## [1] \"Iteration: 24 bestEv: 0.228013486606145 bestIt: 24 CE: 0.228013486606145 featOrth: 0.0226969167878819\" ## [1] \"Iteration: 25 bestEv: 0.206452508864217 bestIt: 25 CE: 0.206452508864217 featOrth: 0.0205405783876944\" ## [1] \"Iteration: 26 bestEv: 0.206435271048636 bestIt: 26 CE: 0.206435271048636 featOrth: 0.0205379357870159\" ## [1] \"Iteration: 27 bestEv: 0.166223918070603 bestIt: 27 CE: 0.166223918070603 featOrth: 0.0165169425894254\" ## [1] \"Iteration: 28 bestEv: 0.163054566102149 bestIt: 28 CE: 0.163054566102149 featOrth: 0.0162058713649024\" ## [1] \"Iteration: 29 bestEv: 0.157137665122075 bestIt: 29 CE: 0.157137665122075 featOrth: 0.0156120867335191\" ## [1] \"Iteration: 30 bestEv: 0.157097674417913 bestIt: 30 CE: 0.157097674417913 featOrth: 0.0156104574248472\" ## [1] \"Iteration: 31 bestEv: 0.156306129885201 bestIt: 31 CE: 0.156306129885201 featOrth: 0.0155307455392257\" ## [1] \"Iteration: 32 bestEv: 0.156285572374157 bestIt: 32 CE: 0.156285572374157 featOrth: 0.0155300524712291\" ## [1] \"Iteration: 33 bestEv: 0.145223993853605 bestIt: 33 CE: 0.145223993853605 featOrth: 0.0144235198677546\" ## [1] \"Iteration: 34 bestEv: 0.138466834039639 bestIt: 34 CE: 0.138466834039639 featOrth: 0.013748641899746\" ## [1] \"Iteration: 35 bestEv: 0.138336482854468 bestIt: 35 CE: 0.138336482854468 featOrth: 0.0137365863679548\" ## [1] \"Iteration: 36 bestEv: 0.137332105891706 bestIt: 36 CE: 0.137332105891706 featOrth: 0.013635051050649\" ## [1] \"Iteration: 37 bestEv: 0.135118510524381 bestIt: 37 CE: 0.135118510524381 featOrth: 0.013414188508415\" ## [1] \"Iteration: 38 bestEv: 0.134778294412439 bestIt: 38 CE: 0.134778294412439 featOrth: 0.0133811121332728\" ## [1] \"Iteration: 39 bestEv: 0.133155407289496 bestIt: 39 CE: 0.133155407289496 featOrth: 0.0132195284007434\" ## [1] \"Iteration: 40 bestEv: 0.13312708489085 bestIt: 40 CE: 0.13312708489085 featOrth: 0.0132163318291212\" ## [1] \"Iteration: 41 bestEv: 0.116382602709943 bestIt: 41 CE: 0.116382602709943 featOrth: 0.0115423858864594\" ## [1] \"Iteration: 42 bestEv: 0.114020272823238 bestIt: 42 CE: 0.114020272823238 featOrth: 0.0113055863309062\" ## [1] \"Iteration: 43 bestEv: 0.092208354904877 bestIt: 43 CE: 0.092208354904877 featOrth: 0.00912564829074305\" ## [1] \"Iteration: 44 bestEv: 0.0833392666993472 bestIt: 44 CE: 0.0833392666993472 featOrth: 0.00823826598103774\" ## [1] \"Iteration: 45 bestEv: 0.0833325524797384 bestIt: 45 CE: 0.0833325524797384 featOrth: 0.00823863480876048\" ## [1] \"Iteration: 46 bestEv: 0.0824719873887617 bestIt: 46 CE: 0.0824719873887618 featOrth: 0.00815345508475493\" ## [1] \"Iteration: 47 bestEv: 0.0821516319276051 bestIt: 47 CE: 0.0821516319276051 featOrth: 0.00812164621928091\" ## [1] \"Iteration: 48 bestEv: 0.0821503453005946 bestIt: 48 CE: 0.0821503453005946 featOrth: 0.00812159782969415\" ## [1] \"Iteration: 49 bestEv: 0.0759841152198462 bestIt: 49 CE: 0.0759841152198462 featOrth: 0.00750473328725031\" ## [1] \"Iteration: 50 bestEv: 0.0682339810319635 bestIt: 50 CE: 0.0682339810319635 featOrth: 0.00673054703798138\" ## [1] \"Iteration: 51 bestEv: 0.0610660181711566 bestIt: 51 CE: 0.0610660181711566 featOrth: 0.00601359934515634\" ## [1] \"Iteration: 52 bestEv: 0.0610622055565888 bestIt: 52 CE: 0.0610622055565888 featOrth: 0.00601354010821359\" ## [1] \"Iteration: 53 bestEv: 0.0582287410786926 bestIt: 53 CE: 0.0582287410786926 featOrth: 0.00573124611598704\" ## [1] \"Iteration: 54 bestEv: 0.049658056305839 bestIt: 54 CE: 0.049658056305839 featOrth: 0.00487435170414041\" ## [1] \"Iteration: 55 bestEv: 0.0468911076072992 bestIt: 55 CE: 0.0468911076072992 featOrth: 0.00459770352177081\" ## [1] \"Iteration: 56 bestEv: 0.04633780095821 bestIt: 56 CE: 0.04633780095821 featOrth: 0.00454268649134248\" ## [1] \"Iteration: 57 bestEv: 0.0445721793831426 bestIt: 57 CE: 0.0445721793831427 featOrth: 0.00436642144493605\" ## [1] \"Iteration: 58 bestEv: 0.0439883150255224 bestIt: 58 CE: 0.0439883150255224 featOrth: 0.00430755002420539\" ## [1] \"Iteration: 59 bestEv: 0.0439773721929586 bestIt: 59 CE: 0.0439773721929586 featOrth: 0.00430720561725143\" ## [1] \"Iteration: 60 bestEv: 0.0439773721929586 bestIt: 59 CE: 0.043979291119384 featOrth: 0.00430753039082555\" ## [1] \"Iteration: 61 bestEv: 0.0433714925769391 bestIt: 61 CE: 0.0433714925769391 featOrth: 0.00424698602099479\" ## [1] \"Iteration: 62 bestEv: 0.0423788117526081 bestIt: 62 CE: 0.0423788117526081 featOrth: 0.0041476020819351\" ## [1] \"Iteration: 63 bestEv: 0.0423674607525683 bestIt: 63 CE: 0.0423674607525683 featOrth: 0.0041471900626087\" ## [1] \"Iteration: 64 bestEv: 0.0403409824819605 bestIt: 64 CE: 0.0403409824819605 featOrth: 0.00394481878906841\" ## [1] \"Iteration: 65 bestEv: 0.0403409824819605 bestIt: 64 CE: 0.0403409824819605 featOrth: 0.00394481878906841\" ## [1] \"Iteration: 66 bestEv: 0.0403409824819605 bestIt: 64 CE: 0.0403409824819605 featOrth: 0.00394481878906841\" ## [1] \"Iteration: 67 bestEv: 0.0403409824819605 bestIt: 64 CE: 0.0403409824819605 featOrth: 0.00394481878906841\" ## [1] \"Iteration: 68 bestEv: 0.0403409824819605 bestIt: 64 CE: 0.0403409824819605 featOrth: 0.00394481878906841\" ## [1] \"Iteration: 69 bestEv: 0.0403409824819605 bestIt: 64 CE: 0.0403409824819605 featOrth: 0.00394481878906841\" ## [1] \"Iteration: 70 bestEv: 0.0403409824819605 bestIt: 64 CE: 0.0403409824819605 featOrth: 0.00394481878906841\" ##################################################### # ##################################################### # ##################################################### # drwwrd projlist=list() mysimk=ncol(initu) for ( k in 1:length(nh_list)) rownames(resultNH$v[[k]])=colnames(nh_list[[k]]) simdf2=data.frame(fdatanum) simdf2=apply_simlr_matrices( simdf2, resultNH$v, n_limit=ncol(initu), robust=FALSE, center=TRUE,    scale=TRUE, absolute_value=mysigns=='positive', verbose=FALSE ) newnames=simdf2[[2]] simdf2=simdf2[[1]] cognames = c(   \"z_cerad_re\", \"z_animal_re\",      \"z_delayed_re\",    \"z_global_re\",     \"z_digit_re\" #  \"z_cerad_age\", \"z_animal_age\",     \"z_digit_age\",      \"z_delayed_age\",    \"z_global_age\", #  \"z_cerad_edu\", \"z_animal_edu\",     \"z_digit_edu\",      \"z_delayed_edu\",    \"z_global_edu\" ) # cognames=c(\"cerad_sum\",\"cfdast\",\"cfdds\") dnames = c( \"riagendr\", \"ridageyr\", \"race\", \"dmdeduc2\", \"INDFMPIR\",'wtint2yr','wtmec2yr') simdf2 = data.frame(simdf2) simdf2[,dnames]=fdata[,dnames] simdf2[,cognames]=fdata[,cognames] sep='PC' tocomp = c(\"dietPC1\",\"mentalhealthPC1\",'physicalPC1') mycc2 = complete.cases( simdf2[,tocomp]  ) simdf2=simdf2[mycc2,] for ( n in 'exposures' ) {     for ( v in 1:mysimk ) {       thiscol=paste0(n,sep,v)       if ( any( is.na( simdf2[,thiscol] ) )) { #        simdf2 = simlr_impute( data.frame(simdf2), knm, v, n, separator=sep ) #        simdf2[,thiscol]=antsrimpute(simdf2[,thiscol])       }     }   } thesena=is.na(simdf2) nn=colnames(simdf2) # simdf2 = data.frame( robustMatrixTransform(simdf2)) colnames(simdf2)=nn simdf2[thesena]=NA ################################## # Function to search NHANES variable descriptions search_nhanes_var <- function(var_name_in, dtname) {   # Use an environment to store the dictionary globally   if (!exists(\"nhanes_dict\", envir = .GlobalEnv)) {     if (file.exists(dtname)) {       assign(\"nhanes_dict\", read.csv(dtname, stringsAsFactors = FALSE), envir = .GlobalEnv)     } else {       stop(\"Dictionary file not found!\")     }   }      # Search for the variable name (case insensitive)   result <- unique(subset(nhanes_dict, grepl(var_name_in, nhanes_dict$variable_codename_use, ignore.case = TRUE))$variable_description_use)      # Return the first match if available   if (length(result) > 0) {     return(result[1])   } else {     return(\"Variable not found.\")   } }  covars=\" ~ riagendr + ridageyr + dmdeduc2  +\" # race adjusted scores covars=\" ~ 1 +\" # race adjusted scores covars=\" ~ riagendr + ridageyr  + dmdeduc2 + INDFMPIR + \" basep=1e-4 # rooter if ( ! exists(\"cogind\" ) ) cogind = length(cognames) ############################# pnames=knm[-1] nsig=0 for ( kk in 1:ncol(initu)) {   bform = paste0( cognames[cogind], covars, \"1\" )   myform = paste0( cognames[cogind], covars,paste0( paste0(pnames,sep,kk), collapse='+'))   tempdf = simdf2   for ( qq in knm ) {     tt=paste0(qq,sep,kk)     tempdf[ , tt]=psych::winsor( sqrt(tempdf[ , tt] - min(tempdf[ , tt],na.rm=T)), 0.005 ) #    if ( qq == 'exposures' ) tempdf[ , tt]=antsrimpute( tempdf[ , tt] )   }   mdl = lm( myform, data=tempdf )   bmdl = lm( bform, data=tempdf[names(predict(mdl)),] ) #  if (doimp) mdl = lm( myform, data=tempdf, weights=tempdf$wtint2yr ) else mdl = lm( myform, data=tempdf, weights=tempdf$wtint2yr  )   myanv = anova( bmdl, mdl )   if ( myanv$Pr[2] < basep/mysimk ) {     cat(\"*** result begin ***********************************\\n\")     print(\"individual coefficients\")     tailcoffs = tail( coefficients( summary( mdl ) ), 4 )     print( tailcoffs )     print( paste(\"multivar-ANOVA p-value\", insight::format_p(myanv$Pr[2],digits=4) ) )     print( cognames[cogind])     gglist=list()     for ( k in pnames ) {       print( paste(\"Simlr weights\", k ) )       ivec = interpret_simlr_vector2( resultNH$v[[k]], kk, n2show=3, shortnames=F )       print( ivec )       print( search_nhanes_var( names(ivec)[1] ) )       print( search_nhanes_var( names(ivec)[2] ) )       ttl = paste0(k,kk, \" \", insight::format_p(tailcoffs[paste0(k,sep,kk),\"Pr(>|t|)\"],digits=4)  )       gglist[[length(gglist)+1]]=visreg::visreg(mdl, paste0(k,sep,kk), gg=TRUE ) + ggtitle(ttl) + theme_minimal()       }     ( grid.arrange( grobs=gglist, nrow=2 ) )     nsig=nsig+1     cat(\"*** result end ***********************************\\n\\n\") #    Sys.sleep(3)   } } print(nsig) ## [1] 0 ########################################################################################## ########################################################################################## # https://wwwn.cdc.gov/nchs/nhanes/search/default.aspx # > interpret_simlr_vector2( resultNH$v[['exposures']], 1, n2show=5, shortnames=F ) #   LBXVBZ    LBXVOX    LBXVFN    LBX2DF  # benzene, Xylene, furan, Dimethylfuran # 1.0000000 0.3346728 0.1868323 0.0586727  ##########################################################################################"},{"path":"https://github.com/stnava/simlr_nhanes/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Brian Avants. Maintainer.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"c, \"Avants\", role=c, ) e (2025). simlr.nhanes: SiMLR example using NHANES data. R package version 1.0.0, https://github.com/stnava/simlr_nhanes.","code":"@Manual{,   title = {simlr.nhanes: SiMLR example using NHANES data},   author = {{c} and {\"Avants\"} and {role=c} and email=\"stnava@gmail.com\") )},   year = {2025},   note = {R package version 1.0.0},   url = {https://github.com/stnava/simlr_nhanes}, }"},{"path":"https://github.com/stnava/simlr_nhanes/index.html","id":"simlr_nhanes","dir":"","previous_headings":"","what":"Helper package for simlr NHANES example analyses","title":"Helper package for simlr NHANES example analyses","text":"documentation page ","code":""},{"path":"https://github.com/stnava/simlr_nhanes/index.html","id":"simlr-nhanes","dir":"","previous_headings":"","what":"SiMLR NHANES","title":"Helper package for simlr NHANES example analyses","text":"TODO Data sources: NHANES raw CAPRA curated data nhanesA Code sources: haven ","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Formula Factors — check_formula_factors","title":"Check Formula Factors — check_formula_factors","text":"Identifies factor variables formula fewer two levels.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Formula Factors — check_formula_factors","text":"","code":"check_formula_factors(formula, dataframe)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Formula Factors — check_formula_factors","text":"formula formula object. dataframe data frame containing variables formula.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Formula Factors — check_formula_factors","text":"vector factor variable names fewer two levels.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Formula Factors — check_formula_factors","text":"","code":"check_formula_factors(mpg ~ cyl + gear, mtcars) #> character(0)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"Converts data frame categorical numeric columns numeric matrix, using one-hot encoding categorical variables.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"","code":"convert_to_numeric_matrix(df)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"df data frame.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"numeric matrix.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"","code":"df <- data.frame(a = c(1, 2), b = c(\"yes\", \"no\")) convert_to_numeric_matrix(df) #>      a b_no b_yes #> [1,] 1    0     1 #> [2,] 2    1     0"},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Count Unique Values and Filter Columns — count_unique_values","title":"Count Unique Values and Filter Columns — count_unique_values","text":"Counts unique values column data frame retains columns exceeding specified threshold.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count Unique Values and Filter Columns — count_unique_values","text":"","code":"count_unique_values(df, threshold)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count Unique Values and Filter Columns — count_unique_values","text":"df data frame. threshold integer specifying minimum number unique values retain column.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count Unique Values and Filter Columns — count_unique_values","text":"data frame filtered columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count Unique Values and Filter Columns — count_unique_values","text":"","code":"df <- data.frame(a = c(1, 1, 2), b = c(\"x\", \"y\", \"z\")) count_unique_values(df, 1) #> a : 2 unique values #> b : 3 unique values #>   a b #> 1 1 x #> 2 1 y #> 3 2 z"},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Regression Formula — create_formula","title":"Create Regression Formula — create_formula","text":"Creates regression formula data frame, excluding specified columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Regression Formula — create_formula","text":"","code":"create_formula(dataframe, outcome, exclusions)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Regression Formula — create_formula","text":"dataframe input data frame. outcome outcome variable. exclusions vector columns exclude formula.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Regression Formula — create_formula","text":"formula object regression.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Regression Formula — create_formula","text":"","code":"create_formula(mtcars, \"mpg\", exclusions = c(\"cyl\", \"gear\")) #> mpg ~ disp + hp + drat + wt + qsec + vs + am + carb #> <environment: 0x12f965720>"},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Columns with High NA Percentage — filter_na_columns","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"Filters columns data frame higher percentage NA values specified threshold.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"","code":"filter_na_columns(df, max_na_percent = 0.2)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"df data frame. max_na_percent Maximum allowed proportion NA values per column. Default 0.2.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"data frame filtered columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"","code":"filter_na_columns(data.frame(a = c(1, NA, 3), b = c(NA, NA, 3)), max_na_percent = 0.5) #>    a #> 1  1 #> 2 NA #> 3  3"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute Missing Values and Report NA Counts — impute_and_report_na","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"function imputes missing values matrix column means reports count missing values per column.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"","code":"impute_and_report_na(mat)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"mat numeric matrix.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"matrix imputed values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"","code":"mat <- matrix(c(1, NA, 3, 4, 5, NA), ncol = 2) impute_and_report_na(mat) #> No missing values detected. #>      [,1] [,2] #> [1,]    1    4 #> [2,]   NA    5 #> [3,]    3   NA"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute Missing Data — impute_data","title":"Impute Missing Data — impute_data","text":"Imputes missing values data frame. Numeric columns imputed median, categorical columns frequent category.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute Missing Data — impute_data","text":"","code":"impute_data(df)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute Missing Data — impute_data","text":"df data frame missing values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute Missing Data — impute_data","text":"data frame imputed values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute Missing Data — impute_data","text":"","code":"impute_data(data.frame(a = c(1, NA, 3), b = c(\"x\", \"y\", NA))) #>   a b #> 1 1 x #> 2 2 y #> 3 3 x"},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"Maps specific frequency categories numeric values, error handling invalid categories.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"","code":"map_freq_to_numeric(df, colname)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"df data frame containing column mapped. colname name column mapped.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"numeric vector mapped values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"","code":"map_freq_to_numeric(data.frame(freq = c(\"Not at all\", \"Several days\")), \"freq\") #> [1] 0 1"},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"function generates new matrix applying random linear transformation given latent matrix adding Gaussian noise.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"","code":"matrix_from_latent(latent_matrix, target_p, noise_sd = 0.3)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"latent_matrix numeric matrix representing latent structure (n x k). target_p integer specifying number columns output matrix. noise_sd numeric value indicating standard deviation Gaussian noise added. Default 0.3.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"numeric matrix dimensions (n x target_p), generated latent matrix random linear transformation added Gaussian noise.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"","code":"latent <- matrix(rnorm(20), nrow = 5, ncol = 4) generated_matrix <- matrix_from_latent(latent, target_p = 3, noise_sd = 0.2) print(generated_matrix) #>            [,1]        [,2]       [,3] #> [1,] -0.8420428 -2.26384990 -1.4360201 #> [2,] -1.4226564  0.01670062  2.9901238 #> [3,] -3.9410985 -6.29693119  4.4003814 #> [4,]  2.4102664  1.54497778 -0.5047176 #> [5,] -1.5365092  0.60855535  0.2409585"},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"function loops list matrices returns maximum number columns found across matrices list.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"","code":"max_columns_list(matrix_list)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"matrix_list list containing matrices. Non-matrix elements ignored warning.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"integer representing maximum number columns across matrices list.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"","code":"mat1 <- matrix(1:6, nrow = 2) mat2 <- matrix(1:12, nrow = 3) mat3 <- matrix(1:4, nrow = 2) max_columns_list(list(mat1, mat2, mat3)) # Returns 2 #> [1] 4"},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"Merges columns type two data frames based common column names.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"","code":"merge_same_type_columns(df1, df2)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"df1 First data frame. df2 Second data frame.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"merged data frame containing matching columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"","code":"merge_same_type_columns(data.frame(a = 1:3), data.frame(a = 4:6)) #>   a #> 1 1 #> 2 2 #> 3 3 #> 4 4 #> 5 5 #> 6 6"},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"function loops list matrices returns minimum number columns found across matrices list.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"","code":"min_columns_list(matrix_list)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"matrix_list list containing matrices. Non-matrix elements ignored warning.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"integer representing minimum number columns across matrices list.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"","code":"mat1 <- matrix(1:6, nrow = 2) mat2 <- matrix(1:12, nrow = 3) mat3 <- matrix(1:4, nrow = 2) min_columns_list(list(mat1, mat2, mat3)) # Returns 2 #> [1] 2"},{"path":"https://github.com/stnava/simlr_nhanes/reference/nhanescog.html","id":null,"dir":"Reference","previous_headings":"","what":"NHANES cognition data — nhanescog","title":"NHANES cognition data — nhanescog","text":"NHANES cognition data","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/nhanescog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NHANES cognition data — nhanescog","text":"","code":"nhanescog"},{"path":"https://github.com/stnava/simlr_nhanes/reference/nhanescog.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"NHANES cognition data — nhanescog","text":"Curated nhanes cognition data CAPRA","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/nhanescog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NHANES cognition data — nhanescog","text":"","code":"if (FALSE) { # \\dontrun{  data(\"nhanescog_2011_2014\") } # }"},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and Filter XPT File — read_and_filter_xpt","title":"Read and Filter XPT File — read_and_filter_xpt","text":"Reads XPT file, converts data frame, renames first column \"ID\", filters based unique value counts.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and Filter XPT File — read_and_filter_xpt","text":"","code":"read_and_filter_xpt(file_path, threshold = 100)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and Filter XPT File — read_and_filter_xpt","text":"file_path Path XPT file. threshold Numeric threshold filter columns based unique value counts. Default 100.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and Filter XPT File — read_and_filter_xpt","text":"data frame filtered columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and Filter XPT File — read_and_filter_xpt","text":"","code":"read_and_filter_xpt(\"data.xpt\", threshold = 50) #> Error in read_xpt(file_path): could not find function \"read_xpt\""},{"path":"https://github.com/stnava/simlr_nhanes/reference/remove_perfectly_correlated.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Perfectly Correlated Columns from a Data Frame — remove_perfectly_correlated","title":"Remove Perfectly Correlated Columns from a Data Frame — remove_perfectly_correlated","text":"function identifies columns data frame perfectly correlated (correlation coefficient 1 -1) removes second instance pair, ensuring two columns resulting data frame perfectly correlated.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/remove_perfectly_correlated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Perfectly Correlated Columns from a Data Frame — remove_perfectly_correlated","text":"","code":"remove_perfectly_correlated(df, tolerance = 1e-06)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/remove_perfectly_correlated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Perfectly Correlated Columns from a Data Frame — remove_perfectly_correlated","text":"df data frame containing numeric columns checked perfect correlation. tolerance float tolerance value","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/remove_perfectly_correlated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Perfectly Correlated Columns from a Data Frame — remove_perfectly_correlated","text":"data frame redundant perfectly correlated columns removed.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/remove_perfectly_correlated.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove Perfectly Correlated Columns from a Data Frame — remove_perfectly_correlated","text":"","code":"df <- data.frame(a = 1:5, b = 1:5, c = 5:1+rnorm(5), d = c(2, 1, 6, 8, 10)) remove_perfectly_correlated(df) #>   a         c  d #> 1 1 5.5777091  2 #> 2 2 4.1181949  1 #> 3 3 1.0882795  6 #> 4 4 2.8620865  8 #> 5 5 0.7567633 10"}]
