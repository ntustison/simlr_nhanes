[{"path":"https://github.com/stnava/simlr_nhanes/articles/simlr_nhanes.html","id":"nhanes-example","dir":"Articles","previous_headings":"","what":"NHANES example","title":"simlr: nhanes application explained","text":"five publicly available data categories : - Demographics (DEMO) - Dietary (DIET) - Examination (EXAM) - Laboratory (LAB) - Questionnaire (Q). abbreviated forms parentheses may substituted long form nhanesA commands. INDFMPIR: Poverty Income Ratio (0 = income, higher values = higher income relative poverty threshold). • INDHHIN2: Annual Household Income (categorized ranges). • DMDEDUC2: Education Level (adults 20+ years). • OCD390G: Employment Status (occupation questionnaire).","code":"## simpleWarning in download.file(url, tf, mode = \"wb\", quiet = TRUE): downloaded length 0 != reported length 1245 ##  ##  ## simpleWarning in download.file(url, tf, mode = \"wb\", quiet = TRUE): downloaded length 0 != reported length 1245 ##  ##   Male Female  ##   1469   1545 ## character(0) #################################### colcats=rep(\"Basic\",ncol(fdata)) colcats[ colnames(fdata) %in%  c(\"ridageyr\",\"riagendr\",\"race\",\"dmdeduc2\",\"INDFMPIR\") ]='demog' bpname=getNamesFromDataframe( \"BPX\",fdata) bmname=getNamesFromDataframe( \"BMX\",fdata) colcats[ colnames(fdata) %in%  c(bmname,bpname,\"Testosterone\",\"TotChol\",\"Diabetes\" ) ]='physical' colcats[ colnames(fdata) %in%   c(   getNamesFromDataframe( \"DPQ\", fdata ),    getNamesFromDataframe( \"SLQ\", fdata ) )  ]='mentalhealth' x=c('LC','.x','.y','URDUMMAL','LBXVDE','LBX4CE') colcats[ colnames(fdata) %in%  getNamesFromDataframe( \"LBX\", fdata, exclusions=x ) ]='exposures' colcats[ colnames(fdata) %in%  getNamesFromDataframe( \"LBD\", fdata, exclusions=x ) ]='exposures' #colcats[ colnames(fdata) %in%  getNamesFromDataframe( \"URX\", fdata, exclusions=x ) ]='exposures' # colcats[ colnames(fdata) %in%  getNamesFromDataframe( \"URD\", fdata, exclusions=x ) ]='exposures' # colcats[ colnames(fdata) %in%  getNamesFromDataframe( \"LBC\", fdata, exclusions=x ) ]='exposures' colcats[ colnames(fdata) %in%  getNamesFromDataframe( \"DR1T\", fdata ) ]='diet' # colcats[ colnames(fdata) %in%  getNamesFromDataframe( \"cfd\", fdata )[-1] ]='digitspan' tbl=table(colcats) ############## nh_list=list() knm=names(tbl)[-1] mycc = complete.cases( fdata[ , colcats %in% 'demog' ]) mycc = complete.cases( fdata[ , colcats %in% 'exposures' ]) table(mycc) ## mycc ## FALSE  TRUE  ##  2135   462 doimp=TRUE for ( k in knm ) {     print(k)     if ( doimp ) {       temp0 = impute_data( fdata[ ,colcats==k] )     } else temp0=(fdata[mycc,colcats==k])     temp = data.frame(convert_to_numeric_matrix( temp0 ))     vv=apply( temp, 2, FUN=var )     temp = temp[ , vv > 0 ]     if ( k %in% c('exposures','diet') ) {       nn = colnames(temp)       for (  jj in 1:ncol(temp) ) temp = truncatehi(temp, nn[jj], t = 10, removeit = FALSE)       # temp = robustMatrixTransform( temp )       colnames(temp) = nn     }     for ( j in 1:ncol(temp) ) {         hist( temp[,j], main=colnames(temp)[j]) #        Sys.sleep(1)         }     nh_list[[length(nh_list)+1]]=data.matrix( ( temp ) )     print(colnames(nh_list[[length(nh_list)]])) #    nh_list[[length(nh_list)]]=impute_and_report_na(nh_list[[length(nh_list)]] )     } ## [1] \"demog\" ## [1] \"ridageyr\"   \"dmdeduc2\"   \"INDFMPIR\"   \"riagendr_1\" \"riagendr_2\" ## [6] \"race_1\"     \"race_2\"     \"race_3\"     \"race_4\"     ## [1] \"dietommunity.supply\"      \"DR1TWS_Well.or.rain.cistern\"  ## [69] \"DR1TWS_Spring\"                \"DR1TWS_Don.t.drink.tap.water\" ## [71] \"DR1TWS_Don.t.know\"            ## [1] \"exposures\" ##  [1] \"LBXBPB\"   \"LBDBPBSI\" \"LBXBCD\"   \"LBDBCDSI\" \"LBXTHG\"   \"LBDTHGSI\" ##  [7] \"LBXBSE\"   \"LBDBSESI\" \"LBXBMN\"   \"LBDBMNSI\" \"LBX2DF\"   \"LBXV06\"   ## [13] \"LBXV2A\"   \"LBXV3B\"   \"LBXV4C\"   \"LBXVBZ\"   \"LBXVCB\"   \"LBXVDB\"   ## [19] \"LBXVEB\"   \"LBXVFN\"   \"LBXVIPB\"  \"LBXVMC\"   \"LBXVOX\"   \"LBXVTC\"   ## [25] \"LBXVTE\"   \"LBXVXY\"   \"LBXSCU\"   \"LBDSCUSI\" \"LBXSSE\"   \"LBDSSESI\" ## [31] \"LBXSZN\"   \"LBDSZNSI\" \"LBXIHG\"   \"LBDIHGSI\" \"LBXBGE\"   \"LBXBGM\"   ## [1] \"mentalhealth\" ##  [1] \"DPQ010\" \"DPQ020\" \"DPQ030\" \"DPQ040\" \"DPQ050\" \"DPQ060\" \"DPQ070\" \"DPQ080\" ##  [9] \"DPQ090\" \"DPQ100\" \"SLQ050\" \"SLQ060\" ## [1] \"physical\" ##  [1] \"BPXPLS\"            \"BPXML1\"            \"BPXSY1\"            ##  [4] \"BPXDI1\"            \"BPXSY2\"            \"BPXDI2\"            ##  [7] \"BPXSY3\"            \"BPXDI3\"            \"BMXWT\"             ## [10] \"BMXHT\"             \"BMXBMI\"            \"BMXLEG\"            ## [13] \"BMXARML\"           \"BMXARMC\"           \"BMXWAIST\"          ## [16] \"BMXSAD1\"           \"BMXSAD2\"           \"BPXPULS_Regular\"   ## [19] \"BPXPULS_Irregular\" \"BPXPTY_Radial\"     \"BPXPTY_Brachial\" names(nh_list)=knm ##### ################################################################################ # regs <- regularizeSimlr(nh_list,fraction=0.15,sigma=rep(1.0,length(nh_list))) # regs <- regularizeSimlr(nh_list) # regs=list() wdemog=which( knm == 'demog') for ( wdemog in 1:length(nh_list) ) regs[[ wdemog]]=diag( ncol(nh_list[[wdemog]])) names( regs ) = knm[ -1 ] initu=initializeSimlr( nh_list, k=round(max_columns_list(nh_list)), jointReduction=TRUE ) #initu=initializeSimlr( nh_list, k=min_columns_list(nh_list), jointReduction=TRUE ) #initu=initializeSimlr( nh_list, k=round(min_columns_list(nh_list)*2), jointReduction=TRUE ) ########################### if ( ! exists(\"resultNH\") )   resultNH <- simlr( nh_list,          iterations=200,         sparsenessQuantiles=rep(0.5,length(nh_list)),         positivities=rep(\"positive\",length(nh_list)),          energyType='regression', mixAlg='ica', #        energyType='cca', mixAlg='svd',         scale=c(\"centerAndScale\",  \"np\"), #        scale=c(\"robust\", \"center\", \"np\"),         constraint=\"Stiefelx10x10\",         initialUMatrix=initu, verbose=T ) ## [1] \"Stiefel\" \"10\"      \"10\"      ## [1] \"     <0> BUILD-V <0> BUILD-V <0> BUILD-V <0> BUILD-V <0>    \" ## [1] \"initialDataTerm: 2.4526812991635  <o> mixer: ica  <o> E:  regression\" ## [1] \"Iteration: 1 bestEv: 11.632843140426 bestIt: 1 CE: 11.632843140426 featOrth: 0.107224489165078\" ## [1] \"Iteration: 2 bestEv: 1.41341756887557 bestIt: 2 CE: 1.41341756887557 featOrth: 0.0830016232543334\" ## [1] \"Iteration: 3 bestEv: 0.726055078025419 bestIt: 3 CE: 0.726055078025419 featOrth: 0.0699493196861042\" ## [1] \"Iteration: 4 bestEv: 0.680744348295936 bestIt: 4 CE: 0.680744348295936 featOrth: 0.0652421171608249\" ## [1] \"Iteration: 5 bestEv: 0.656149214494679 bestIt: 5 CE: 0.656149214494679 featOrth: 0.0626574775713\" ## [1] \"Iteration: 6 bestEv: 0.526692107830548 bestIt: 6 CE: 0.526692107830548 featOrth: 0.0517471599214006\" ## [1] \"Iteration: 7 bestEv: 0.311422619639691 bestIt: 7 CE: 0.311422619639691 featOrth: 0.0303488877869551\" ## [1] \"Iteration: 8 bestEv: 0.235627053369358 bestIt: 8 CE: 0.235627053369358 featOrth: 0.0227865860438382\" ## [1] \"Iteration: 9 bestEv: 0.201779871536792 bestIt: 9 CE: 0.201779871536792 featOrth: 0.0194054853273792\" ## [1] \"Iteration: 10 bestEv: 0.149619248789552 bestIt: 10 CE: 0.149619248789552 featOrth: 0.0139530515013351\" ## [1] \"Iteration: 11 bestEv: 0.129657499183096 bestIt: 11 CE: 0.129657499183096 featOrth: 0.0119944024239164\" ## [1] \"Iteration: 12 bestEv: 0.114781068622403 bestIt: 12 CE: 0.114781068622403 featOrth: 0.0105886676535297\" ## [1] \"Iteration: 13 bestEv: 0.10685035977629 bestIt: 13 CE: 0.10685035977629 featOrth: 0.00964345148076851\" ## [1] \"Iteration: 14 bestEv: 0.101969616216826 bestIt: 14 CE: 0.101969616216826 featOrth: 0.00910284244969137\" ## [1] \"Iteration: 15 bestEv: 0.0731448102672446 bestIt: 15 CE: 0.0731448102672446 featOrth: 0.00665045835147721\" ## [1] \"Iteration: 16 bestEv: 0.0621269422158502 bestIt: 16 CE: 0.0621269422158502 featOrth: 0.00559615995457043\" ## [1] \"Iteration: 17 bestEv: 0.0602746320544928 bestIt: 17 CE: 0.0602746320544928 featOrth: 0.00543716058839303\" ## [1] \"Iteration: 18 bestEv: 0.0575756717091261 bestIt: 18 CE: 0.0575756717091261 featOrth: 0.00516020084264136\" ## [1] \"Iteration: 19 bestEv: 0.0545319459295673 bestIt: 19 CE: 0.0545319459295673 featOrth: 0.00482313045439215\" ## [1] \"Iteration: 20 bestEv: 0.0526477904919875 bestIt: 20 CE: 0.0526477904919875 featOrth: 0.00465880503242257\" ## [1] \"Iteration: 21 bestEv: 0.0504464060101036 bestIt: 21 CE: 0.0504464060101036 featOrth: 0.00443001080621483\" ## [1] \"Iteration: 22 bestEv: 0.0490938135794766 bestIt: 22 CE: 0.0490938135794766 featOrth: 0.00417041656527113\" ## [1] \"Iteration: 23 bestEv: 0.03308439393631 bestIt: 23 CE: 0.03308439393631 featOrth: 0.00260146390567348\" ## [1] \"Iteration: 24 bestEv: 0.0303162458893025 bestIt: 24 CE: 0.0303162458893025 featOrth: 0.00240400757639362\" ## [1] \"Iteration: 25 bestEv: 0.0242804782034042 bestIt: 25 CE: 0.0242804782034042 featOrth: 0.00150358040684174\" ## [1] \"Iteration: 26 bestEv: 0.0204306709372017 bestIt: 26 CE: 0.0204306709372017 featOrth: 0.00138557827689218\" ## [1] \"Iteration: 27 bestEv: 0.0159664236220163 bestIt: 27 CE: 0.0159664236220163 featOrth: 0.00101556967198327\" ## [1] \"Iteration: 28 bestEv: 0.014033824459859 bestIt: 28 CE: 0.014033824459859 featOrth: 0.000836478470302503\" ## [1] \"Iteration: 29 bestEv: 0.0127829144870177 bestIt: 29 CE: 0.0127829144870177 featOrth: 0.000708445038767515\" ## [1] \"Iteration: 30 bestEv: 0.0108566877990142 bestIt: 30 CE: 0.0108566877990142 featOrth: 0.000509320167667002\" ## [1] \"Iteration: 31 bestEv: 0.0094191976188196 bestIt: 31 CE: 0.0094191976188196 featOrth: 0.000354756150583391\" ## [1] \"Iteration: 32 bestEv: 0.00875727169786117 bestIt: 32 CE: 0.00875727169786117 featOrth: 0.000310184953850444\" ## [1] \"Iteration: 33 bestEv: 0.00841500997743389 bestIt: 33 CE: 0.00841500997743389 featOrth: 0.00028740534607694\" ## [1] \"Iteration: 34 bestEv: 0.00815373403409121 bestIt: 34 CE: 0.00815373403409121 featOrth: 0.000258144504834333\" ## [1] \"Iteration: 35 bestEv: 0.00783112270369256 bestIt: 35 CE: 0.00783112270369256 featOrth: 0.000233437229591334\" ## [1] \"Iteration: 36 bestEv: 0.00770990773987672 bestIt: 36 CE: 0.00770990773987672 featOrth: 0.000222770287896601\" ## [1] \"Iteration: 37 bestEv: 0.00708242470121158 bestIt: 37 CE: 0.00708242470121158 featOrth: 0.000168091570762943\" ## [1] \"Iteration: 38 bestEv: 0.00679522067361061 bestIt: 38 CE: 0.00679522067361061 featOrth: 0.000135031643301627\" ## [1] \"Iteration: 39 bestEv: 0.00635200020658744 bestIt: 39 CE: 0.00635200020658743 featOrth: 9.6686140468848e-05\" ## [1] \"Iteration: 40 bestEv: 0.00627671959402866 bestIt: 40 CE: 0.00627671959402866 featOrth: 8.8863404843188e-05\" ## [1] \"Iteration: 41 bestEv: 0.00621857367900364 bestIt: 41 CE: 0.00621857367900364 featOrth: 8.01350272427364e-05\" ## [1] \"Iteration: 42 bestEv: 0.00615520237219146 bestIt: 42 CE: 0.00615520237219146 featOrth: 7.77167232305777e-05\" ## [1] \"Iteration: 43 bestEv: 0.00605050387245506 bestIt: 43 CE: 0.00605050387245506 featOrth: 6.92422634220414e-05\" ## [1] \"Iteration: 44 bestEv: 0.0060317237865385 bestIt: 44 CE: 0.0060317237865385 featOrth: 6.92525832956632e-05\" ## [1] \"Iteration: 45 bestEv: 0.00567974760345213 bestIt: 45 CE: 0.00567974760345213 featOrth: 3.77430101115211e-05\" ## [1] \"Iteration: 46 bestEv: 0.00567974760345213 bestIt: 45 CE: 0.0056949217271351 featOrth: 3.66126385243115e-05\" ## [1] \"Iteration: 47 bestEv: 0.00565741894067341 bestIt: 47 CE: 0.00565741894067341 featOrth: 3.46747962366981e-05\" ## [1] \"Iteration: 48 bestEv: 0.00556856145828992 bestIt: 48 CE: 0.00556856145828992 featOrth: 2.87489534070399e-05\" ## [1] \"Iteration: 49 bestEv: 0.00556856145828992 bestIt: 48 CE: 0.00557759381656015 featOrth: 2.77498009753613e-05\" ## [1] \"Iteration: 50 bestEv: 0.00553674148213204 bestIt: 50 CE: 0.00553674148213204 featOrth: 2.55854343936342e-05\" ## [1] \"Iteration: 51 bestEv: 0.00553414519928458 bestIt: 51 CE: 0.00553414519928459 featOrth: 2.45420077962023e-05\" ## [1] \"Iteration: 52 bestEv: 0.00553107287920763 bestIt: 52 CE: 0.00553107287920763 featOrth: 2.42446362893301e-05\" ## [1] \"Iteration: 53 bestEv: 0.00546404774074903 bestIt: 53 CE: 0.00546404774074903 featOrth: 2.16321409947848e-05\" ## [1] \"Iteration: 54 bestEv: 0.00545420487546386 bestIt: 54 CE: 0.00545420487546386 featOrth: 2.02098097041258e-05\" ## [1] \"Iteration: 55 bestEv: 0.00544120072779526 bestIt: 55 CE: 0.00544120072779526 featOrth: 1.97605074915061e-05\" ## [1] \"Iteration: 56 bestEv: 0.00544120072779526 bestIt: 55 CE: 0.00547272293027308 featOrth: 1.93838129253773e-05\" ## [1] \"Iteration: 57 bestEv: 0.00544120072779526 bestIt: 55 CE: 0.00547345890014951 featOrth: 1.9220280835044e-05\" ## [1] \"Iteration: 58 bestEv: 0.00531203878693242 bestIt: 58 CE: 0.00531203878693242 featOrth: 7.1520125172555e-06\" ## [1] \"Iteration: 59 bestEv: 0.00528888707042662 bestIt: 59 CE: 0.00528888707042662 featOrth: 6.38608896195258e-06\" ## [1] \"Iteration: 60 bestEv: 0.00528231587650244 bestIt: 60 CE: 0.00528231587650244 featOrth: 6.31098299263862e-06\" ## [1] \"Iteration: 61 bestEv: 0.00528231587650244 bestIt: 60 CE: 0.00531912440204881 featOrth: 6.14140522593292e-06\" ## [1] \"Iteration: 62 bestEv: 0.00528044835787148 bestIt: 62 CE: 0.00528044835787148 featOrth: 1.28196755941237e-05\" ## [1] \"Iteration: 63 bestEv: 0.00527267230466332 bestIt: 63 CE: 0.00527267230466332 featOrth: 1.26593727148842e-05\" ## [1] \"Iteration: 64 bestEv: 0.00526441910418992 bestIt: 64 CE: 0.00526441910418992 featOrth: 1.16230030312191e-05\" ## [1] \"Iteration: 65 bestEv: 0.00524422638916859 bestIt: 65 CE: 0.00524422638916859 featOrth: 1.09342658953975e-05\" ## [1] \"Iteration: 66 bestEv: 0.00524422638916859 bestIt: 65 CE: 0.00524902674417765 featOrth: 1.02532409384644e-05\" ## [1] \"Iteration: 67 bestEv: 0.00524422638916859 bestIt: 65 CE: 0.00528696902410874 featOrth: 9.86620799202488e-06\" ## [1] \"Iteration: 68 bestEv: 0.00521016029892053 bestIt: 68 CE: 0.00521016029892054 featOrth: 9.66622052584771e-06\" ## [1] \"Iteration: 69 bestEv: 0.00521016029892053 bestIt: 68 CE: 0.00521202274978337 featOrth: 8.95536091218278e-06\" ## [1] \"Iteration: 70 bestEv: 0.00520628833652356 bestIt: 70 CE: 0.00520628833652356 featOrth: 8.81240016569304e-06\" ## [1] \"Iteration: 71 bestEv: 0.00520628833652356 bestIt: 70 CE: 0.00522500227492788 featOrth: 8.49641107042028e-06\" ## [1] \"Iteration: 72 bestEv: 0.00518021490119007 bestIt: 72 CE: 0.00518021490119008 featOrth: 8.31149731305363e-06\" ## [1] \"Iteration: 73 bestEv: 0.00518021490119007 bestIt: 72 CE: 0.00521808597103481 featOrth: 8.02691534418994e-06\" ## [1] \"Iteration: 74 bestEv: 0.00518021490119007 bestIt: 72 CE: 0.00519932148551097 featOrth: 7.93532183513045e-06\" ## [1] \"Iteration: 75 bestEv: 0.00518021490119007 bestIt: 72 CE: 0.00518814052868668 featOrth: 7.68474839872065e-06\" ## [1] \"Iteration: 76 bestEv: 0.00518021490119007 bestIt: 72 CE: 0.00523499942120006 featOrth: 7.67995543674357e-06\" ## [1] \"Iteration: 77 bestEv: 0.00518021490119007 bestIt: 72 CE: 0.00519736481057559 featOrth: 7.60621670301569e-06\" ## [1] \"Iteration: 78 bestEv: 0.00518021490119007 bestIt: 72 CE: 0.00519100032063393 featOrth: 6.60637995258058e-06\" ##################################################### # drwwrd projlist=list() mysimk=ncol(initu) for ( k in 2:length(nh_list)) {     rownames(resultNH$v[[k]])=colnames( nh_list[[k]])     ux=data.frame(nh_list[[k]] %*% abs(resultNH$v[[k]][,1:mysimk]))     colnames(ux)=paste0(names(nh_list)[k],1:ncol(ux))     projlist[[length(projlist)+1]]=ux     names( projlist )[length(projlist)]=knm[k] } simdf=simdf2=dplyr::bind_cols(projlist) cognames = c(   \"z_cerad_re\", \"z_animal_re\",      \"z_delayed_re\",    \"z_global_re\",     \"z_digit_re\" #  \"z_cerad_age\", \"z_animal_age\",     \"z_digit_age\",      \"z_delayed_age\",    \"z_global_age\", #  \"z_cerad_edu\", \"z_animal_edu\",     \"z_digit_edu\",      \"z_delayed_edu\",    \"z_global_edu\" ) # cognames=c(\"cerad_sum\",\"cfdast\",\"cfdds\") dnames = c( \"riagendr\", \"ridageyr\", \"race\", \"dmdeduc2\", \"INDFMPIR\",'wtint2yr','wtmec2yr') if ( doimp ) {   simdf2[,dnames]=fdata[,dnames]   simdf2[,cognames]=fdata[,cognames]   } else {   simdf2[,dnames]=fdata[mycc,dnames]   simdf2[,cognames]=fdata[mycc,cognames]   } ################################# covars=\" ~ riagendr + ridageyr + race + dmdeduc2 + INDFMPIR + \" covars=\" ~ riagendr + ridageyr + race + dmdeduc2 +  \" ############################# for ( kk in 1:ncol(initu)) {   bform = paste0( cognames[length(cognames)], covars, \"1\" )   myform = paste0( cognames[length(cognames)], covars,paste0( paste0(names(projlist),kk), collapse='+'))   tempdf = simdf2[mycc,]   bmdl = lm( bform, data=tempdf )   mdl = lm( myform, data=tempdf ) #  if (doimp) mdl = lm( myform, data=tempdf, weights=tempdf$wtint2yr ) else mdl = lm( myform, data=tempdf, weights=tempdf$wtint2yr  )   myanv = anova( bmdl, mdl )   if ( myanv$Pr[2] < 0.01/mysimk ) {     cat(\"*** result begin ***********************************\\n\")     print(\"individual coefficients\")     tailcoffs = tail( coefficients( summary( mdl ) ), 4 )     print( tailcoffs )     print( paste(\"multivar-ANOVA p-value\", insight::format_p(myanv$Pr[2],digits=4) ) )     print( cognames[length(cognames)])     for ( k in names(projlist) ) {       print( paste(\"Simlr weights\", k ) )       print( interpret_simlr_vector2( resultNH$v[[k]], kk, n2show=3, shortnames=F ) )       ttl = paste0(k,kk, \" \", insight::format_p(tailcoffs[paste0(k,kk),\"Pr(>|t|)\"],digits=4)  )       visreg::visreg(mdl, paste0(k,kk), main=ttl )       }     cat(\"*** result end ***********************************\\n\\n\") #    Sys.sleep(3)   } } ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate  Std. Error   t value     Pr(>|t|) ## diet1              5658.731    1951.831  2.899190 3.923845e-03 ## exposures1     -1504039.873  958780.339 -1.568701 1.174189e-01 ## mentalhealth1 -14862369.528 3590812.523 -4.138999 4.163445e-05 ## physical1       -471051.038  283000.894 -1.664486 9.670989e-02 ## [1] \"multivar-ANOVA p-value p = 6.2842e-06\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TKCAL   DR1TCHL  DR1TMOIS  ## 1.0000000 0.8314706 0.6535281 ## [1] \"Simlr weights exposures\" ##    LBXBCD  LBDBCDSI    LBXVFN  ## 1.0000000 0.9990513 0.6056328 ## [1] \"Simlr weights mentalhealth\" ##    SLQ060    DPQ040    DPQ050  ## 1.0000000 0.7956954 0.5677734 ## [1] \"Simlr weights physical\" ##   BMXARMC    BPXML1    BPXDI1  ## 1.0000000 0.7916641 0.4230814 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                   Estimate  Std. Error   t value     Pr(>|t|) ## diet4             13984.96    3320.021  4.212312 3.053534e-05 ## exposures4     -4301503.50 3092270.227 -1.391050 1.648960e-01 ## mentalhealth4 -13731595.71 6324069.900 -2.171323 3.042747e-02 ## physical4       -254152.95  151097.110 -1.682050 9.325128e-02 ## [1] \"multivar-ANOVA p-value p = 1.7296e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TALCO  DR1TM161  DR1TACAR  ## 1.0000000 0.6750142 0.6346510 ## [1] \"Simlr weights exposures\" ##    LBXVEB    LBXVXY    LBX2DF  ## 1.0000000 0.9441978 0.9053026 ## [1] \"Simlr weights mentalhealth\" ##   SLQ060   DPQ030   DPQ100  ## 1.000000 0.553537 0.308660 ## [1] \"Simlr weights physical\" ##    BPXSY3    BPXSY2    BPXSY1  ## 1.0000000 0.7728430 0.7361841 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate  Std. Error     t value     Pr(>|t|) ## diet5             41716.720    11934.52  3.49546575 0.0005200463 ## exposures5     -1993661.758   972483.53 -2.05007251 0.0409349965 ## mentalhealth5 -53322498.956 13586540.69 -3.92465604 0.0001004088 ## physical5         -7790.798    89678.00 -0.08687524 0.9308092365 ## [1] \"multivar-ANOVA p-value p = 1.6058e-06\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TFIBE  DR1TFOLA    DR1TFF  ## 1.0000000 0.9836311 0.9496749 ## [1] \"Simlr weights exposures\" ##    LBXBPB  LBDBPBSI    LBXVBZ  ## 1.0000000 0.9974176 0.5689621 ## [1] \"Simlr weights mentalhealth\" ##    DPQ060    DPQ070    DPQ090  ## 1.0000000 0.9329616 0.6590151 ## [1] \"Simlr weights physical\" ##   BMXSAD1   BMXSAD2   BMXARMC  ## 1.0000000 0.9433565 0.8660067 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                   Estimate  Std. Error    t value     Pr(>|t|) ## diet6             14128.31    5142.579  2.7473198 0.0062491370 ## exposures6      1247326.32 1638100.160  0.7614469 0.4467881415 ## mentalhealth6 -13543730.91 3816594.314 -3.5486431 0.0004278344 ## physical6       -362328.33  222741.354 -1.6266774 0.1045040814 ## [1] \"multivar-ANOVA p-value p = 5.2179e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TSELE  DR1TNIAC  DR1TPROT  ## 1.0000000 0.8115805 0.7982655 ## [1] \"Simlr weights exposures\" ##    LBXBGE    LBXVFN    LBX2DF  ## 1.0000000 0.9763202 0.6160948 ## [1] \"Simlr weights mentalhealth\" ##    DPQ050    SLQ060    DPQ010  ## 1.0000000 0.6270857 0.2624276 ## [1] \"Simlr weights physical\" ##    BMXLEG    BPXPLS     BMXHT  ## 1.0000000 0.7951302 0.5524676 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                   Estimate  Std. Error   t value    Pr(>|t|) ## diet7             12362.41    4185.375  2.953717 0.003303865 ## exposures7      -203942.46  108201.009 -1.884848 0.060093073 ## mentalhealth7 -14645435.48 4496105.427 -3.257360 0.001209412 ## physical7         59647.94   45212.719  1.319273 0.187747087 ## [1] \"multivar-ANOVA p-value p = 5.4751e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TMAGN  DR1TKCAL  DR1TPHOS  ## 1.0000000 0.9349735 0.8482522 ## [1] \"Simlr weights exposures\" ##    LBXVFN    LBX2DF    LBXIHG  ## 1.0000000 0.9391979 0.2064284 ## [1] \"Simlr weights mentalhealth\" ##    SLQ060    SLQ050    DPQ100  ## 1.0000000 0.3105636 0.1808684 ## [1] \"Simlr weights physical\" ##     BMXHT    BMXLEG   BMXARML  ## 1.0000000 0.7564303 0.7326079 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                   Estimate   Std. Error    t value     Pr(>|t|) ## diet8             26080.08     9569.849  2.7252346 0.0066755216 ## exposures8      -128816.67   592558.486 -0.2173906 0.8280022312 ## mentalhealth8 -41554132.16 12169770.268 -3.4145371 0.0006966431 ## physical8         75770.29    41976.786  1.8050523 0.0717333099 ## [1] \"multivar-ANOVA p-value p = 5.0294e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TPOTA  DR1TPHOS   DR1TVB2  ## 1.0000000 0.7438993 0.7372155 ## [1] \"Simlr weights exposures\" ##    LBXV4C    LBXVFN    LBXVDB  ## 1.0000000 0.8732392 0.7865158 ## [1] \"Simlr weights mentalhealth\" ##    DPQ010    DPQ060    DPQ050  ## 1.0000000 0.9183747 0.6881751 ## [1] \"Simlr weights physical\" ##     BMXHT   BMXARML    BMXLEG  ## 1.0000000 0.6837426 0.4030095 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate  Std. Error    t value     Pr(>|t|) ## diet10             22605.49    6680.671  3.3837158 0.0007775337 ## exposures10       882378.12  628900.840  1.4030481 0.1612905576 ## mentalhealth10 -11118372.06 2852895.277 -3.8972240 0.0001120665 ## physical10         19569.06  110036.073  0.1778422 0.8589267511 ## [1] \"multivar-ANOVA p-value p = 2.7116e-06\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TFDFE  DR1TIRON  DR1TCRYP  ## 1.0000000 0.8950286 0.8359941 ## [1] \"Simlr weights exposures\" ##    LBXV4C    LBXSSE  LBDSSESI  ## 1.0000000 0.8552465 0.8362947 ## [1] \"Simlr weights mentalhealth\" ##    DPQ050    SLQ060    DPQ060  ## 1.0000000 0.8582684 0.4265234 ## [1] \"Simlr weights physical\" ##   BMXARMC     BMXHT    BPXDI1  ## 1.0000000 0.9943803 0.8877398 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate  Std. Error   t value     Pr(>|t|) ## diet11             11634.93    2674.137  4.350911 1.678279e-05 ## exposures11     -9087413.94 2985502.552 -3.043847 2.472303e-03 ## mentalhealth11 -25238977.05 8237239.547 -3.064009 2.314803e-03 ## physical11       -233276.95  164349.979 -1.419391 1.564757e-01 ## [1] \"multivar-ANOVA p-value p = 6.5702e-08\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TP226  DR1TP205  DR1TP225  ## 1.0000000 0.9288274 0.6624684 ## [1] \"Simlr weights exposures\" ##    LBXVBZ    LBX2DF    LBXVFN  ## 1.0000000 0.7937262 0.7381375 ## [1] \"Simlr weights mentalhealth\" ##    SLQ050    SLQ060    DPQ040  ## 1.0000000 0.8466510 0.7615932 ## [1] \"Simlr weights physical\" ##   BMXARMC    BMXBMI   BMXSAD1  ## 1.0000000 0.8986172 0.7455224 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error   t value     Pr(>|t|) ## diet12              7956.562     2025.871  3.927477 9.927755e-05 ## exposures12     -1574499.505   594405.059 -2.648866 8.359617e-03 ## mentalhealth12 -32923180.986 11848124.919 -2.778767 5.684410e-03 ## physical12       -406763.402   249561.094 -1.629915 1.038176e-01 ## [1] \"multivar-ANOVA p-value p = 1.8719e-06\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TNUMF    DR1TFF  DR1TMAGN  ## 1.0000000 0.9893669 0.4912995 ## [1] \"Simlr weights exposures\" ##    LBXBPB  LBDBPBSI  LBDBCDSI  ## 1.0000000 0.9983934 0.3488281 ## [1] \"Simlr weights mentalhealth\" ##    SLQ050    DPQ050    DPQ030  ## 1.0000000 0.7339495 0.7192033 ## [1] \"Simlr weights physical\" ##   BMXARMC    BPXML1    BPXSY2  ## 1.0000000 0.4724881 0.3248536 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate Std. Error    t value     Pr(>|t|) ## diet13             22438.31    6644.69  3.3768781 7.966271e-04 ## exposures13        39421.43   79512.12  0.4957915 6.202830e-01 ## mentalhealth13 -28095308.19 6601867.22 -4.2556609 2.536637e-05 ## physical13        131175.30   60440.80  2.1703105 3.050451e-02 ## [1] \"multivar-ANOVA p-value p = 3.4885e-07\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TSFAT  DR1TTFAT  DR1TS180  ## 1.0000000 0.9657044 0.9163303 ## [1] \"Simlr weights exposures\" ##    LBXBPB  LBDBPBSI  LBDSSESI  ## 1.0000000 0.9976957 0.9384230 ## [1] \"Simlr weights mentalhealth\" ##    DPQ090    DPQ100    DPQ070  ## 1.0000000 0.6127431 0.4234549 ## [1] \"Simlr weights physical\" ##    BMXHT  BMXARML   BMXLEG  ## 1.000000 0.702657 0.680067 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate   Std. Error    t value     Pr(>|t|) ## diet14             17314.53     5247.764  3.2994109 0.0010456646 ## exposures14       213891.92   141597.013  1.5105680 0.1315988381 ## mentalhealth14 -38591219.84 11283073.553 -3.4202755 0.0006824776 ## physical14       -156022.04   251322.687 -0.6208036 0.5350424372 ## [1] \"multivar-ANOVA p-value p = 3.5272e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ## DR1TWS_Community.supply                DR1TATOA                DR1TM201  ##               1.0000000               0.8353631               0.8184819 ## [1] \"Simlr weights exposures\" ##    LBXTHG  LBDTHGSI    LBXBGM  ## 1.0000000 0.9980041 0.9705953 ## [1] \"Simlr weights mentalhealth\" ##    DPQ040    DPQ090    SLQ050  ## 1.0000000 0.6635668 0.5818304 ## [1] \"Simlr weights physical\" ##    BPXDI1    BPXDI2    BPXDI3  ## 1.0000000 0.9118578 0.8469746 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate Std. Error   t value    Pr(>|t|) ## diet15             42202.96   14508.44  2.908856 0.003806741 ## exposures15      1113694.01  878628.30  1.267537 0.205617339 ## mentalhealth15 -27205243.98 7321108.45 -3.716001 0.000227824 ## physical15       -438215.50  329820.52 -1.328648 0.184635861 ## [1] \"multivar-ANOVA p-value p = 2.9731e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##      DR1TS180      DR1TCOPP DR1TWS_Spring  ##     1.0000000     0.9889770     0.9368417 ## [1] \"Simlr weights exposures\" ##  LBDSSESI    LBXSSE    LBXSZN  ## 1.0000000 0.9922618 0.6897170 ## [1] \"Simlr weights mentalhealth\" ##    SLQ060    DPQ050    DPQ080  ## 1.0000000 0.8425186 0.5544957 ## [1] \"Simlr weights physical\" ##     BMXHT    BPXDI1    BPXML1  ## 1.0000000 0.8928383 0.8764694 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                   Estimate  Std. Error   t value     Pr(>|t|) ## diet16            24922.09    7199.086  3.461840 0.0005876178 ## exposures16     -745860.50 1191213.462 -0.626135 0.5315431218 ## mentalhealth16 -5949828.81 1670782.586 -3.561103 0.0004085650 ## physical16        71946.99   51340.099  1.401380 0.1617882160 ## [1] \"multivar-ANOVA p-value p = 1.3036e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TVB12  DR1TMOIS    DR1TVD  ## 1.0000000 0.9346569 0.9305833 ## [1] \"Simlr weights exposures\" ##    LBXBPB  LBDBPBSI    LBXVBZ  ## 1.0000000 0.9947265 0.7368068 ## [1] \"Simlr weights mentalhealth\" ##    DPQ050    DPQ080    DPQ060  ## 1.0000000 0.1387438 0.1271901 ## [1] \"Simlr weights physical\" ##     BMXHT   BMXARML    BMXLEG  ## 1.0000000 0.5510456 0.4911139 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate  Std. Error    t value     Pr(>|t|) ## diet17              8292.645    2464.011  3.3655061 0.0008293516 ## exposures17       -70169.600  263546.012 -0.2662518 0.7901669721 ## mentalhealth17 -21868754.642 5581509.530 -3.9180717 0.0001030973 ## physical17         53160.408   42709.307  1.2447031 0.2138873047 ## [1] \"multivar-ANOVA p-value p = 5.7342e-06\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##    DR1TVK  DR1TP183  DR1TNUMF  ## 1.0000000 0.7504031 0.6860530 ## [1] \"Simlr weights exposures\" ##  LBDTHGSI    LBXTHG    LBXBMN  ## 1.0000000 0.9928205 0.9679733 ## [1] \"Simlr weights mentalhealth\" ##    DPQ020    SLQ050    DPQ050  ## 1.0000000 0.6978926 0.6912160 ## [1] \"Simlr weights physical\" ##   BMXARML     BMXWT    BMXLEG  ## 1.0000000 0.5676231 0.4673722 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate  Std. Error    t value     Pr(>|t|) ## diet23              8706.301    3330.077  2.6144446 0.0092364144 ## exposures23      -650519.335 1725059.875 -0.3770996 0.7062769854 ## mentalhealth23 -26487490.491 7272371.464 -3.6422081 0.0003016898 ## physical23       -309475.957  242392.120 -1.2767575 0.2023448596 ## [1] \"multivar-ANOVA p-value p = 0.0001\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TKCAL  DR1TMOIS  DR1TSODI  ## 1.0000000 0.8307180 0.7080005 ## [1] \"Simlr weights exposures\" ##    LBXV4C    LBXVBZ    LBXV3B  ## 1.0000000 0.3418897 0.3412678 ## [1] \"Simlr weights mentalhealth\" ##    DPQ020    DPQ100    SLQ050  ## 1.0000000 0.7499420 0.5148917 ## [1] \"Simlr weights physical\" ##    BPXDI1    BMXLEG    BPXDI3  ## 1.0000000 0.7677274 0.4948716 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                   Estimate  Std. Error     t value     Pr(>|t|) ## diet24            31159.32    9086.563  3.42916478 0.0006610633 ## exposures24     -100889.83  200810.472 -0.50241318 0.6156221266 ## mentalhealth24 -5624202.50 1525409.555 -3.68701145 0.0002545388 ## physical24       -15264.25  205591.291 -0.07424562 0.9408478624 ## [1] \"multivar-ANOVA p-value p = 7.3501e-06\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TACAR  DR1TPROT    DR1TVD  ## 1.0000000 0.7367944 0.6227920 ## [1] \"Simlr weights exposures\" ##  LBDSCUSI    LBXSCU    LBXVEB  ## 1.0000000 0.9998863 0.4379222 ## [1] \"Simlr weights mentalhealth\" ##    DPQ010    DPQ020    DPQ080  ## 1.0000000 0.8661388 0.5068729 ## [1] \"Simlr weights physical\" ##    BMXBMI  BMXWAIST   BMXARMC  ## 1.0000000 0.5895075 0.5775265 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate  Std. Error    t value     Pr(>|t|) ## diet25             15057.20    5206.431  2.8920379 4.012597e-03 ## exposures25      1006774.80  815019.128  1.2352775 2.173703e-01 ## mentalhealth25 -41509902.87 9580842.106 -4.3325944 1.818108e-05 ## physical25         43094.09   46975.255  0.9173785 3.594346e-01 ## [1] \"multivar-ANOVA p-value p = 3.9462e-06\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TCALC   DR1TVB2  DR1TCAFF  ## 1.0000000 0.7722410 0.7496688 ## [1] \"Simlr weights exposures\" ##    LBX2DF    LBXVFN    LBXV3B  ## 1.0000000 0.9394866 0.3057775 ## [1] \"Simlr weights mentalhealth\" ##    DPQ020    DPQ040    DPQ090  ## 1.0000000 0.9190801 0.6898892 ## [1] \"Simlr weights physical\" ##   BMXARML     BMXWT  BMXWAIST  ## 1.0000000 0.9763796 0.8786868 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate  Std. Error   t value     Pr(>|t|) ## diet26             11860.97    6245.846  1.899017 5.820009e-02 ## exposures26      1388316.68  734581.365  1.889943 5.940662e-02 ## mentalhealth26 -13080496.43 3118161.449 -4.194939 3.287679e-05 ## physical26        186710.73  107414.594  1.738225 8.285368e-02 ## [1] \"multivar-ANOVA p-value p = 7.1337e-06\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TCRYP  DR1TACAR  DR1TZINC  ## 1.0000000 0.8866386 0.8247932 ## [1] \"Simlr weights exposures\" ##    LBXVFN  LBDBSESI    LBXBSE  ## 1.0000000 0.9727839 0.9675194 ## [1] \"Simlr weights mentalhealth\" ##    DPQ020    DPQ070    DPQ100  ## 1.0000000 0.6654650 0.3651896 ## [1] \"Simlr weights physical\" ##     BMXHT    BMXLEG   BMXARML  ## 1.0000000 0.8646821 0.6817383 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate  Std. Error   t value    Pr(>|t|) ## diet27             20078.82    7351.329  2.731318 0.006555524 ## exposures27     -1602188.62 1413146.657 -1.133774 0.257491755 ## mentalhealth27 -17929033.76 5820920.776 -3.080103 0.002195759 ## physical27      -1200779.85  729644.815 -1.645705 0.100521270 ## [1] \"multivar-ANOVA p-value p = 9.3908e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##   DR1TVB1  DR1TMAGN  DR1TPOTA  ## 1.0000000 0.6666388 0.6662963 ## [1] \"Simlr weights exposures\" ##  LBDBCDSI    LBXBCD    LBXVDB  ## 1.0000000 0.9998352 0.6171677 ## [1] \"Simlr weights mentalhealth\" ##    DPQ010    DPQ080    DPQ030  ## 1.0000000 0.8960181 0.6841866 ## [1] \"Simlr weights physical\" ##        BMXBMI       BMXARMC BPXPTY_Radial  ##     1.0000000     0.5580583     0.3740720 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate  Std. Error    t value     Pr(>|t|) ## diet28             29163.63    13967.57  2.0879524 3.736261e-02 ## exposures28      -115966.64   859423.11 -0.1349354 8.927231e-01 ## mentalhealth28 -68948597.33 15386668.41 -4.4810608 9.427512e-06 ## physical28        403720.33   237520.89  1.6997256 8.987206e-02 ## [1] \"multivar-ANOVA p-value p = 2.1201e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TATOA   DR1TRET  DR1TCALC  ## 1.0000000 0.7807807 0.6697912 ## [1] \"Simlr weights exposures\" ##    LBXSSE  LBDSSESI  LBDSCUSI  ## 1.0000000 0.9969139 0.9943378 ## [1] \"Simlr weights mentalhealth\" ##    DPQ060    DPQ070    DPQ040  ## 1.0000000 0.8441499 0.7190075 ## [1] \"Simlr weights physical\" ##    BMXLEG   BMXARML    BMXBMI  ## 1.0000000 0.3051979 0.1795793 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate  Std. Error    t value     Pr(>|t|) ## diet29             43402.66    12184.87  3.5620129 0.0004071901 ## exposures29        46468.89    98218.57  0.4731172 0.6363584817 ## mentalhealth29 -52834922.33 14092053.84 -3.7492705 0.0002004234 ## physical29        271789.62   194077.07  1.4004210 0.1620748622 ## [1] \"multivar-ANOVA p-value p = 2.2119e-06\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TATOC  DR1TMFAT  DR1TM181  ## 1.0000000 0.9859985 0.9733743 ## [1] \"Simlr weights exposures\" ##    LBXBPB  LBDBPBSI  LBDTHGSI  ## 1.0000000 0.9989221 0.9356059 ## [1] \"Simlr weights mentalhealth\" ##    DPQ020    DPQ060    DPQ100  ## 1.0000000 0.6883318 0.6594665 ## [1] \"Simlr weights physical\" ##     BMXHT     BMXWT   BMXARML  ## 1.0000000 0.9554136 0.6165484 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error    t value    Pr(>|t|) ## diet37              8019.192     3214.925  2.4943638 0.012975223 ## exposures37       422600.197   294830.590  1.4333662 0.152446082 ## mentalhealth37 -67719007.760 18228694.607 -3.7149675 0.000228729 ## physical37        208183.030   352738.663  0.5901906 0.555358489 ## [1] \"multivar-ANOVA p-value p = 9.2269e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##   DR1TVB1  DR1TNIAC  DR1TPROT  ## 1.0000000 0.7970152 0.7388342 ## [1] \"Simlr weights exposures\" ##    LBXBGM  LBDTHGSI    LBXTHG  ## 1.0000000 0.8802081 0.8799465 ## [1] \"Simlr weights mentalhealth\" ##    DPQ100    SLQ060    DPQ060  ## 1.0000000 0.6554810 0.4184691 ## [1] \"Simlr weights physical\" ##    BMXBMI  BMXWAIST   BMXSAD1  ## 1.0000000 0.6204248 0.5710356 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate Std. Error    t value    Pr(>|t|) ## diet40             62587.96   30798.16  2.0321982 0.042719083 ## exposures40      2057387.76 1254587.94  1.6398912 0.101725051 ## mentalhealth40 -32254604.51 8712962.64 -3.7019101 0.000240461 ## physical40        -14451.10  126837.32 -0.1139342 0.909340688 ## [1] \"multivar-ANOVA p-value p = 0.0001\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ## DR1TWS_Well.or.rain.cistern                     DR1TVB2  ##                   1.0000000                   0.8774131  ##                      DR1TFA  ##                   0.7118426 ## [1] \"Simlr weights exposures\" ##    LBXBSE  LBDBSESI    LBXSCU  ## 1.0000000 0.9960308 0.8127260 ## [1] \"Simlr weights mentalhealth\" ##    DPQ060    DPQ020    DPQ090  ## 1.0000000 0.5685674 0.3275399 ## [1] \"Simlr weights physical\" ##    BMXLEG   BMXARML     BMXHT  ## 1.0000000 0.5335417 0.5141891 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error    t value     Pr(>|t|) ## diet41              7929.772     2364.051  3.3543146 0.0008627744 ## exposures41       194083.530   221282.765  0.8770838 0.3809080755 ## mentalhealth41 -44811299.560 11454835.961 -3.9119984 0.0001056375 ## physical41       -307381.279   152413.674 -2.0167566 0.0443130598 ## [1] \"multivar-ANOVA p-value p = 8.9041e-07\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TFIBE    DR1TFF  DR1TMAGN  ## 1.0000000 0.9598193 0.8720198 ## [1] \"Simlr weights exposures\" ##    LBXBGM  LBDTHGSI    LBXTHG  ## 1.0000000 0.9872729 0.9833473 ## [1] \"Simlr weights mentalhealth\" ##    SLQ050    DPQ070    DPQ040  ## 1.0000000 0.6981604 0.4235574 ## [1] \"Simlr weights physical\" ##    BPXPLS    BPXML1    BPXSY1  ## 1.0000000 0.6762415 0.2593378 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate  Std. Error    t value     Pr(>|t|) ## diet44              9516.024    3989.664  2.3851690 0.0174833579 ## exposures44     -1700390.753  929000.988 -1.8303433 0.0678583917 ## mentalhealth44 -17939831.463 4664889.873 -3.8457138 0.0001374983 ## physical44       -336618.735  543834.965 -0.6189722 0.5362471771 ## [1] \"multivar-ANOVA p-value p = 4.1228e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TSELE  DR1TKCAL  DR1TNIAC  ## 1.0000000 0.8527638 0.7423660 ## [1] \"Simlr weights exposures\" ##    LBXBCD  LBDBCDSI    LBX2DF  ## 1.0000000 0.9998581 0.8983154 ## [1] \"Simlr weights mentalhealth\" ##    DPQ060    DPQ010    DPQ080  ## 1.0000000 0.4381945 0.3273324 ## [1] \"Simlr weights physical\" ##             BMXHT BPXPULS_Irregular           BMXARML  ##         1.0000000         0.9935246         0.9048828 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error     t value     Pr(>|t|) ## diet50          1.079001e+01 3.939488e+00  2.73893742 6.407986e-03 ## exposures50    -7.934581e+05 1.060278e+06 -0.74834938 4.546395e-01 ## mentalhealth50 -2.404053e+07 5.713037e+06 -4.20801252 3.109952e-05 ## physical50      7.613882e+02 9.777545e+04  0.00778711 9.937903e-01 ## [1] \"multivar-ANOVA p-value p = 3.8482e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TNUMF  DR1TM181  DR1TMFAT  ## 1.0000000 0.3115350 0.2962143 ## [1] \"Simlr weights exposures\" ##    LBXV3B    LBXVOX    LBXVDB  ## 1.0000000 0.4534491 0.3481708 ## [1] \"Simlr weights mentalhealth\" ##    SLQ060    DPQ050    DPQ040  ## 1.0000000 0.6094200 0.3447683 ## [1] \"Simlr weights physical\" ##    BPXDI3   BMXARMC     BMXHT  ## 1.0000000 0.6956541 0.6720827 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error    t value     Pr(>|t|) ## diet52          9.593548e+03     2515.919  3.8131390 1.563001e-04 ## exposures52    -1.804279e+07  6242831.088 -2.8901617 4.036180e-03 ## mentalhealth52 -1.024576e+08 23083291.471 -4.4386060 1.139662e-05 ## physical52      6.623689e+04   149653.080  0.4426029 6.582652e-01 ## [1] \"multivar-ANOVA p-value p = 1.2093e-08\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TP204    DR1TLZ    DR1TVK  ## 1.0000000 0.9723691 0.9270495 ## [1] \"Simlr weights exposures\" ##   LBXV06   LBXVFN   LBXVEB  ## 1.000000 0.829875 0.657945 ## [1] \"Simlr weights mentalhealth\" ##    DPQ070    DPQ050    DPQ060  ## 1.0000000 0.8979866 0.5083455 ## [1] \"Simlr weights physical\" ##   BMXARML    BMXLEG     BMXHT  ## 1.0000000 0.5862356 0.4702659 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error    t value    Pr(>|t|) ## diet55             26364.152     9429.901  2.7958036 0.005398150 ## exposures55       914607.038   492573.267  1.8567939 0.063992290 ## mentalhealth55 -31621757.997 10078026.607 -3.1376934 0.001814394 ## physical55          8631.413    19823.535  0.4354124 0.663471424 ## [1] \"multivar-ANOVA p-value p = 8.6558e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TP182  DR1TPFAT  DR1TCARB  ## 1.0000000 0.8478466 0.8258695 ## [1] \"Simlr weights exposures\" ##    LBXBSE  LBDBSESI  LBDSZNSI  ## 1.0000000 0.9948571 0.5158409 ## [1] \"Simlr weights mentalhealth\" ##    DPQ020    DPQ030    DPQ070  ## 1.0000000 0.2916871 0.1271566 ## [1] \"Simlr weights physical\" ##     BMXWT  BMXWAIST    BMXBMI  ## 1.0000000 0.8992729 0.8319022 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate Std. Error   t value     Pr(>|t|) ## diet61             31593.54   11711.63  2.697622 7.245446e-03 ## exposures61       250224.41  297919.53  0.839906 4.014061e-01 ## mentalhealth61 -32376090.27 7960582.07 -4.067051 5.619215e-05 ## physical61         22963.09   17645.23  1.301377 1.937938e-01 ## [1] \"multivar-ANOVA p-value p = 1.0802e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TNUMF  DR1TSELE  DR1TCOPP  ## 1.0000000 0.8782127 0.8724056 ## [1] \"Simlr weights exposures\" ##    LBXBPB  LBDBPBSI    LBX2DF  ## 1.0000000 0.9956426 0.7154365 ## [1] \"Simlr weights mentalhealth\" ##    DPQ090    DPQ020    DPQ040  ## 1.0000000 0.7433379 0.3674288 ## [1] \"Simlr weights physical\" ##   BMXARML     BMXWT     BMXHT  ## 1.0000000 0.9139467 0.7902091 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate Std. Error   t value     Pr(>|t|) ## diet62             31265.08   18862.47  1.657528 9.810813e-02 ## exposures62      -983358.53  963206.58 -1.020922 3.078388e-01 ## mentalhealth62 -34236920.66 8602814.59 -3.979735 8.038017e-05 ## physical62         40500.78   19487.29  2.078318 3.824495e-02 ## [1] \"multivar-ANOVA p-value p = 6.8127e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##          DR1TNUMF DR1TWS_Don.t.know          DR1TTHEO  ##         1.0000000         0.5299795         0.5256163 ## [1] \"Simlr weights exposures\" ##    LBXBCD  LBDBCDSI  LBDBPBSI  ## 1.0000000 0.9990841 0.6734969 ## [1] \"Simlr weights mentalhealth\" ##    DPQ010    DPQ070    DPQ040  ## 1.0000000 0.5304410 0.4662948 ## [1] \"Simlr weights physical\" ##     BMXHT    BMXLEG   BMXARML  ## 1.0000000 0.7534100 0.6249946 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate  Std. Error    t value    Pr(>|t|) ## diet64             12503.09    4108.795  3.0430071 0.002479075 ## exposures64       195247.90  618352.297  0.3157551 0.752334453 ## mentalhealth64 -22241932.13 6082889.409 -3.6564748 0.000285851 ## physical64         40203.93  366175.723  0.1097941 0.912621523 ## [1] \"multivar-ANOVA p-value p = 4.0454e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TCALC  DR1TS100  DR1TNUMF  ## 1.0000000 0.7490953 0.7468161 ## [1] \"Simlr weights exposures\" ##  LBDSSESI    LBXSSE  LBDBSESI  ## 1.0000000 0.9944533 0.5678488 ## [1] \"Simlr weights mentalhealth\" ##    DPQ060    SLQ060    DPQ050  ## 1.0000000 0.4144604 0.3911414 ## [1] \"Simlr weights physical\" ##    BMXLEG     BMXHT    BPXDI3  ## 1.0000000 0.9234619 0.8972592 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate  Std. Error    t value     Pr(>|t|) ## diet66              8016.321    2826.784  2.8358452 0.0047760651 ## exposures66       472163.855  633842.152  0.7449234 0.4567060243 ## mentalhealth66 -22690659.802 6459669.239 -3.5126659 0.0004883604 ## physical66       -344780.182  443074.351 -0.7781542 0.4368861312 ## [1] \"multivar-ANOVA p-value p = 0.0001\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TMOIS  DR1TNUMF  DR1TCAFF  ## 1.0000000 0.9624204 0.7778351 ## [1] \"Simlr weights exposures\" ##  LBDBCDSI    LBXBCD  LBDBSESI  ## 1.0000000 0.9983064 0.7883140 ## [1] \"Simlr weights mentalhealth\" ##    SLQ060    DPQ060    DPQ050  ## 1.0000000 0.8143426 0.7093365 ## [1] \"Simlr weights physical\" ## BPXPTY_Radial         BMXHT        BPXDI1  ##     1.0000000     0.4859132     0.4143666 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate Std. Error    t value     Pr(>|t|) ## diet69             32100.31   10737.04  2.9896789 2.945424e-03 ## exposures69      -303640.16  937179.12 -0.3239937 7.460930e-01 ## mentalhealth69 -31495479.49 7789713.99 -4.0432138 6.200095e-05 ## physical69        386411.52  262660.62  1.4711437 1.419496e-01 ## [1] \"multivar-ANOVA p-value p = 9.2962e-06\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ## DR1TWS_Well.or.rain.cistern                    DR1TCAFF  ##                   1.0000000                   0.8848821  ##                     DR1TVB2  ##                   0.8090914 ## [1] \"Simlr weights exposures\" ##    LBXSCU  LBDSCUSI    LBXBGE  ## 1.0000000 0.9998487 0.9209837 ## [1] \"Simlr weights mentalhealth\" ##    DPQ060    SLQ050    DPQ040  ## 1.0000000 0.7293988 0.5660773 ## [1] \"Simlr weights physical\" ##         BMXHT       BMXARML BPXPTY_Radial  ##     1.0000000     0.5407942     0.4004294 ## *** result end *********************************** ########################################################################################## ########################################################################################## # https://wwwn.cdc.gov/nchs/nhanes/search/default.aspx # > interpret_simlr_vector2( resultNH$v[['exposures']], 1, n2show=5, shortnames=F ) #   LBXVBZ    LBXVOX    LBXVFN    LBX2DF  # benzene, Xylene, furan, Dimethylfuran # 1.0000000 0.3346728 0.1868323 0.0586727  ##########################################################################################"},{"path":"https://github.com/stnava/simlr_nhanes/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Brian Avants. Maintainer.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"c, \"Avants\", role=c, ) e (2025). simlr.nhanes: SiMLR example using NHANES data. R package version 1.0.0, https://github.com/stnava/simlr_nhanes.","code":"@Manual{,   title = {simlr.nhanes: SiMLR example using NHANES data},   author = {{c} and {\"Avants\"} and {role=c} and email=\"stnava@gmail.com\") )},   year = {2025},   note = {R package version 1.0.0},   url = {https://github.com/stnava/simlr_nhanes}, }"},{"path":"https://github.com/stnava/simlr_nhanes/index.html","id":"simlr_nhanes","dir":"","previous_headings":"","what":"Helper package for simlr NHANES example analyses","title":"Helper package for simlr NHANES example analyses","text":"documentation page ","code":""},{"path":"https://github.com/stnava/simlr_nhanes/index.html","id":"simlr-nhanes","dir":"","previous_headings":"","what":"SiMLR NHANES","title":"Helper package for simlr NHANES example analyses","text":"TODO Data sources: NHANES raw CAPRA curated data nhanesA Code sources: haven ","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Formula Factors — check_formula_factors","title":"Check Formula Factors — check_formula_factors","text":"Identifies factor variables formula fewer two levels.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Formula Factors — check_formula_factors","text":"","code":"check_formula_factors(formula, dataframe)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Formula Factors — check_formula_factors","text":"formula formula object. dataframe data frame containing variables formula.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Formula Factors — check_formula_factors","text":"vector factor variable names fewer two levels.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Formula Factors — check_formula_factors","text":"","code":"check_formula_factors(mpg ~ cyl + gear, mtcars) #> character(0)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"Converts data frame categorical numeric columns numeric matrix, using one-hot encoding categorical variables.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"","code":"convert_to_numeric_matrix(df)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"df data frame.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"numeric matrix.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"","code":"df <- data.frame(a = c(1, 2), b = c(\"yes\", \"no\")) convert_to_numeric_matrix(df) #>      a b_no b_yes #> [1,] 1    0     1 #> [2,] 2    1     0"},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Count Unique Values and Filter Columns — count_unique_values","title":"Count Unique Values and Filter Columns — count_unique_values","text":"Counts unique values column data frame retains columns exceeding specified threshold.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count Unique Values and Filter Columns — count_unique_values","text":"","code":"count_unique_values(df, threshold)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count Unique Values and Filter Columns — count_unique_values","text":"df data frame. threshold integer specifying minimum number unique values retain column.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count Unique Values and Filter Columns — count_unique_values","text":"data frame filtered columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count Unique Values and Filter Columns — count_unique_values","text":"","code":"df <- data.frame(a = c(1, 1, 2), b = c(\"x\", \"y\", \"z\")) count_unique_values(df, 1) #> a : 2 unique values #> b : 3 unique values #>   a b #> 1 1 x #> 2 1 y #> 3 2 z"},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Regression Formula — create_formula","title":"Create Regression Formula — create_formula","text":"Creates regression formula data frame, excluding specified columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Regression Formula — create_formula","text":"","code":"create_formula(dataframe, outcome, exclusions)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Regression Formula — create_formula","text":"dataframe input data frame. outcome outcome variable. exclusions vector columns exclude formula.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Regression Formula — create_formula","text":"formula object regression.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Regression Formula — create_formula","text":"","code":"create_formula(mtcars, \"mpg\", exclusions = c(\"cyl\", \"gear\")) #> mpg ~ disp + hp + drat + wt + qsec + vs + am + carb #> <environment: 0x103bc7218>"},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Columns with High NA Percentage — filter_na_columns","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"Filters columns data frame higher percentage NA values specified threshold.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"","code":"filter_na_columns(df, max_na_percent = 0.2)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"df data frame. max_na_percent Maximum allowed proportion NA values per column. Default 0.2.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"data frame filtered columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"","code":"filter_na_columns(data.frame(a = c(1, NA, 3), b = c(NA, NA, 3)), max_na_percent = 0.5) #>    a #> 1  1 #> 2 NA #> 3  3"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute Missing Values and Report NA Counts — impute_and_report_na","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"function imputes missing values matrix column means reports count missing values per column.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"","code":"impute_and_report_na(mat)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"mat numeric matrix.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"matrix imputed values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"","code":"mat <- matrix(c(1, NA, 3, 4, 5, NA), ncol = 2) impute_and_report_na(mat) #> No missing values detected. #>      [,1] [,2] #> [1,]    1    4 #> [2,]   NA    5 #> [3,]    3   NA"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute Missing Data — impute_data","title":"Impute Missing Data — impute_data","text":"Imputes missing values data frame. Numeric columns imputed median, categorical columns frequent category.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute Missing Data — impute_data","text":"","code":"impute_data(df)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute Missing Data — impute_data","text":"df data frame missing values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute Missing Data — impute_data","text":"data frame imputed values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute Missing Data — impute_data","text":"","code":"impute_data(data.frame(a = c(1, NA, 3), b = c(\"x\", \"y\", NA))) #>   a b #> 1 1 x #> 2 2 y #> 3 3 x"},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"Maps specific frequency categories numeric values, error handling invalid categories.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"","code":"map_freq_to_numeric(df, colname)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"df data frame containing column mapped. colname name column mapped.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"numeric vector mapped values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"","code":"map_freq_to_numeric(data.frame(freq = c(\"Not at all\", \"Several days\")), \"freq\") #> [1] 0 1"},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"function generates new matrix applying random linear transformation given latent matrix adding Gaussian noise.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"","code":"matrix_from_latent(latent_matrix, target_p, noise_sd = 0.3)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"latent_matrix numeric matrix representing latent structure (n x k). target_p integer specifying number columns output matrix. noise_sd numeric value indicating standard deviation Gaussian noise added. Default 0.3.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"numeric matrix dimensions (n x target_p), generated latent matrix random linear transformation added Gaussian noise.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"","code":"latent <- matrix(rnorm(20), nrow = 5, ncol = 4) generated_matrix <- matrix_from_latent(latent, target_p = 3, noise_sd = 0.2) print(generated_matrix) #>            [,1]        [,2]       [,3] #> [1,] -0.8420428 -2.26384990 -1.4360201 #> [2,] -1.4226564  0.01670062  2.9901238 #> [3,] -3.9410985 -6.29693119  4.4003814 #> [4,]  2.4102664  1.54497778 -0.5047176 #> [5,] -1.5365092  0.60855535  0.2409585"},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"function loops list matrices returns maximum number columns found across matrices list.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"","code":"max_columns_list(matrix_list)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"matrix_list list containing matrices. Non-matrix elements ignored warning.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"integer representing maximum number columns across matrices list.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"","code":"mat1 <- matrix(1:6, nrow = 2) mat2 <- matrix(1:12, nrow = 3) mat3 <- matrix(1:4, nrow = 2) max_columns_list(list(mat1, mat2, mat3)) # Returns 2 #> [1] 4"},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"Merges columns type two data frames based common column names.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"","code":"merge_same_type_columns(df1, df2)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"df1 First data frame. df2 Second data frame.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"merged data frame containing matching columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"","code":"merge_same_type_columns(data.frame(a = 1:3), data.frame(a = 4:6)) #>   a #> 1 1 #> 2 2 #> 3 3 #> 4 4 #> 5 5 #> 6 6"},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"function loops list matrices returns minimum number columns found across matrices list.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"","code":"min_columns_list(matrix_list)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"matrix_list list containing matrices. Non-matrix elements ignored warning.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"integer representing minimum number columns across matrices list.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"","code":"mat1 <- matrix(1:6, nrow = 2) mat2 <- matrix(1:12, nrow = 3) mat3 <- matrix(1:4, nrow = 2) min_columns_list(list(mat1, mat2, mat3)) # Returns 2 #> [1] 2"},{"path":"https://github.com/stnava/simlr_nhanes/reference/nhanescog.html","id":null,"dir":"Reference","previous_headings":"","what":"NHANES cognition data — nhanescog","title":"NHANES cognition data — nhanescog","text":"NHANES cognition data","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/nhanescog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NHANES cognition data — nhanescog","text":"","code":"nhanescog"},{"path":"https://github.com/stnava/simlr_nhanes/reference/nhanescog.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"NHANES cognition data — nhanescog","text":"Curated nhanes cognition data CAPRA","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/nhanescog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NHANES cognition data — nhanescog","text":"","code":"if (FALSE) { # \\dontrun{  data(\"nhanescog_2011_2014\") } # }"},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and Filter XPT File — read_and_filter_xpt","title":"Read and Filter XPT File — read_and_filter_xpt","text":"Reads XPT file, converts data frame, renames first column \"ID\", filters based unique value counts.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and Filter XPT File — read_and_filter_xpt","text":"","code":"read_and_filter_xpt(file_path, threshold = 100)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and Filter XPT File — read_and_filter_xpt","text":"file_path Path XPT file. threshold Numeric threshold filter columns based unique value counts. Default 100.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and Filter XPT File — read_and_filter_xpt","text":"data frame filtered columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and Filter XPT File — read_and_filter_xpt","text":"","code":"read_and_filter_xpt(\"data.xpt\", threshold = 50) #> Error in read_xpt(file_path): could not find function \"read_xpt\""}]
