[{"path":"https://github.com/stnava/simlr_nhanes/articles/simlr_nhanes.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"simlr: nhanes application explained","text":"extract distinct related types data NHANES. data types : demographics: age, sex, educational attainment; diet: measurements nutritional status; physical: blood pressure physical measurements; mental health: outcomes Patient Health Questionnaire-9; environmental exposures: metals related environmental toxins. combined SiMLR unsupervised dimensionality reduction. resulting low-dimensional representations used joint prediction cognitive outcomes. 400 subjects measurements available along environmental exposures.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/articles/simlr_nhanes.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"simlr: nhanes application explained","text":"Load relevant librarys.","code":"# Load necessary libraries library(ggplot2) library(ggfortify) library(gridExtra) library(ellipse) ##  ## Attaching package: 'ellipse' ## The following object is masked from 'package:graphics': ##  ##     pairs library(ANTsR) ## Warning: replacing previous import 'stats::filter' by 'dplyr::filter' when ## loading 'ANTsR' ## ANTsR 0.6.1 ## Environment variables set either in .Renviron or with a seed (e.g. XXX):  ## Sys.setenv(ANTS_RANDOM_SEED = XXX) ## Sys.setenv(ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS = 1) ## may influence reproducibility in some methods. See ## https://github.com/ANTsX/ANTs/wiki/antsRegistration-reproducibility-issues ## for more information.Also see *repro methods in antsRegistration. ##  ## Attaching package: 'ANTsR' ## The following objects are masked from 'package:stats': ##  ##     sd, var ## The following objects are masked from 'package:base': ##  ##     all, any, apply, max, min, prod, range, sum library(subtyper) ## Warning: replacing previous import 'ciTools::add_ci' by 'gtsummary::add_ci' ## when loading 'subtyper' ## Warning: replacing previous import 'dplyr::as_data_frame' by ## 'igraph::as_data_frame' when loading 'subtyper' ## Warning: replacing previous import 'dplyr::groups' by 'igraph::groups' when ## loading 'subtyper' ## Warning: replacing previous import 'dplyr::union' by 'igraph::union' when ## loading 'subtyper' ## Warning: replacing previous import 'gtsummary::add_ci' by 'ciTools::add_ci' ## when loading 'subtyper' ## Registered S3 methods overwritten by 'fmsb': ##   method    from ##   print.roc pROC ##   plot.roc  pROC ## Warning: replacing previous import 'gt::gt' by 'globaltest::gt' when loading ## 'subtyper' ## Warning: replacing previous import 'dplyr::rename' by 'plyr::rename' when ## loading 'subtyper' library( nhanesA ) library( simlr.nhanes ) library( dplyr ) ##  ## Attaching package: 'dplyr' ## The following object is masked from 'package:Biobase': ##  ##     combine ## The following objects are masked from 'package:BiocGenerics': ##  ##     combine, intersect, setdiff, union ## The following object is masked from 'package:gridExtra': ##  ##     combine ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union data(\"nhanescog_2011_2014\")"},{"path":"https://github.com/stnava/simlr_nhanes/articles/simlr_nhanes.html","id":"nhanes-example","dir":"Articles","previous_headings":"","what":"NHANES example","title":"simlr: nhanes application explained","text":"download data fly merge together using embedded data well nhanesA package.  Define categories data can used identify low-dimensional representation based SiMLR objective. Run methods using reasonable defaults recommended prior work. Apply learned representations data matrices.","code":"## simpleWarning in download.file(url, tf, mode = \"wb\", quiet = TRUE): downloaded length 0 != reported length 1245 ##  ##  ## simpleWarning in download.file(url, tf, mode = \"wb\", quiet = TRUE): downloaded length 0 != reported length 1245 ##  ##   Male Female  ##   1469   1545 ## character(0) #################################### if ( TRUE ) {   fdatanum = convert_to_numeric_matrix( fdata )   tarcols = colnames(fdatanum)   grepper =multigrep( c(\"_NA\",\"limit\"),tarcols)    fdatanum = fdatanum[ , -grepper]   tarcols=tarcols[-grepper]   fdatanum = data.frame( (fdatanum))   colnames(fdatanum)=tarcols } colcats=rep(\"Basic\",ncol(fdatanum)) colcats[ colnames(fdatanum) %in%  c(\"ridageyr\",   getNamesFromDataframe(\"riagendr\",fdatanum),   getNamesFromDataframe(\"race\",fdatanum),   \"dmdeduc2\",\"INDFMPIR\") ]='demog' bpname=getNamesFromDataframe( \"BPX\",fdatanum) bmname=getNamesFromDataframe( \"BMX\",fdatanum) colcats[ colnames(fdatanum) %in%  c(bmname,bpname,\"Testosterone\",\"TotChol\",\"Diabetes\" ) ]='physical' colcats[ colnames(fdatanum) %in%   c(   getNamesFromDataframe( \"DPQ\", fdatanum ),    getNamesFromDataframe( \"SLQ\", fdatanum ) )  ]='mentalhealth' x=c('LC','.x','.y','URDUMMAL','LBXVDE','LBX4CE') colcats[ colnames(fdatanum) %in%  getNamesFromDataframe( \"LBX\", fdatanum, exclusions=x ) ]='exposures' colcats[ colnames(fdatanum) %in%  getNamesFromDataframe( \"LBD\", fdatanum, exclusions=x ) ]='exposures' colcats[ colnames(fdatanum) %in%  getNamesFromDataframe( \"URX\", fdatanum, exclusions=x ) ]='exposures' colcats[ colnames(fdatanum) %in%  getNamesFromDataframe( \"URD\", fdatanum, exclusions=x ) ]='exposures' colcats[ colnames(fdatanum) %in%  getNamesFromDataframe( \"LBC\", fdatanum, exclusions=x ) ]='exposures' colcats[ colnames(fdatanum) %in%  getNamesFromDataframe( \"DR1T\", fdatanum, exclusions='DR1TWS' ) ]='diet' # colcats[ colnames(fdatanum) %in%  getNamesFromDataframe( \"cfd\", fdatanum )[-1] ]='digitspan' tbl=table(colcats) for ( nm in names(tbl)) {   expmiss=colSums(is.na(fdatanum[ ,colcats == nm ]) )   colcats[ colnames(fdatanum) %in% names(expmiss)[ expmiss > 800 ]  ] = 'Basic'   } tbl=table(colcats) ############## nh_list=list() knm=names(tbl)[-c(1)] mycc = complete.cases( fdatanum[ , colcats %in% 'demog' ]) # mycc = !is.na(fdata$LBXTHG) # complete.cases( fdatanum[ , colcats %in% 'exposures' ]) table(mycc) ## mycc ## FALSE  TRUE  ##   210  2387 doimp=TRUE for ( k in knm ) {     print(k) #    if ( doimp ) { #      temp0 = impute_data( fdatanum[ ,colcats==k] ) #    } else      temp0=(fdatanum[mycc,colcats==k])     temp = data.frame(convert_to_numeric_matrix( temp0 ))     vv=apply( temp, 2, FUN=var, na.rm=T )     temp = temp[ , vv > 0 ]     if ( k %in% c('exposures','diet') | TRUE ) {       nn = colnames(temp)       for (  jj in 1:ncol(temp) ) { # temp = truncatehi(temp, nn[jj], t = 50, removeit = FALSE)         temp[ , nn[jj] ] = sqrt(temp[ , nn[jj] ]-min(temp[ , nn[jj] ],na.rm=T))         } #      temp = robustMatrixTransform( temp )       colnames(temp) = nn       temp = remove_perfectly_correlated( data.frame( temp ))       vv=apply( temp, 2, FUN=var, na.rm=T )       temp = temp[ , vv > 0 ]     }     for ( j in 1:ncol(temp) ) { #        hist( temp[,j], main=colnames(temp)[j]) #        Sys.sleep(1)         }     nh_list[[length(nh_list)+1]]=data.matrix( ( temp ) )     print(colnames(nh_list[[length(nh_list)]])) #    nh_list[[length(nh_list)]]=impute_and_report_na(nh_list[[length(nh_list)]] )     } ## [1] \"demog\" ## [1] \"ridageyr\"   \"dmdeduc2\"   \"INDFMPIR\"   \"riagendr_1\" \"race_1\"     ## [6] \"race_2\"     \"race_3\"     \"race_4\"     ## [1] \"diet\" ##  [1] \"DR1TNUMF\" \"DR1TKCAL\" \"DR1TPROT\" \"DR1TCARB\" \"DR1TSUGR\" \"DR1TFIBE\" ##  [7] \"DR1TTFAT\" \"DR1TSFAT\" \"DR1TMFAT\" \"DR1TPFAT\" \"DR1TCHOL\" \"DR1TATOC\" ## [13] \"DR1TATOA\" \"DR1TRET\"  \"DR1TVARA\" \"DR1TACAR\" \"DR1TBCAR\" \"DR1TCRYP\" ## [19] \"DR1TLYCO\" \"DR1TLZ\"   \"DR1TVB1\"  \"DR1TVB2\"  \"DR1TNIAC\" \"DR1TVB6\"  ## [25] \"DR1TFOLA\" \"DR1TFA\"   \"DR1TFF\"   \"DR1TFDFE\" \"DR1TCHL\"  \"DR1TVB12\" ## [31] \"DR1TB12A\" \"DR1TVC\"   \"DR1TVD\"   \"DR1TVK\"   \"DR1TCALC\" \"DR1TPHOS\" ## [37] \"DR1TMAGN\" \"DR1TIRON\" \"DR1TZINC\" \"DR1TCOPP\" \"DR1TSODI\" \"DR1TPOTA\" ## [43] \"DR1TSELE\" \"DR1TCAFF\" \"DR1TTHEO\" \"DR1TALCO\" \"DR1TMOIS\" \"DR1TS040\" ## [49] \"DR1TS060\" \"DR1TS080\" \"DR1TS100\" \"DR1TS120\" \"DR1TS140\" \"DR1TS160\" ## [55] \"DR1TS180\" \"DR1TM161\" \"DR1TM181\" \"DR1TM201\" \"DR1TM221\" \"DR1TP182\" ## [61] \"DR1TP183\" \"DR1TP184\" \"DR1TP204\" \"DR1TP205\" \"DR1TP225\" \"DR1TP226\" ## [1] \"exposures\" ##  [1] \"LBXBPB\"   \"LBDBPBSI\" \"LBXBCD\"   \"LBXTHG\"   \"LBDTHGSI\" \"LBXBSE\"   ##  [7] \"LBDBSESI\" \"LBXBMN\"   \"LBXIHG\"   \"LBXBGE\"   \"LBXBGM\"   ## [1] \"mentalhealth\" ##  [1] \"DPQ010\" \"DPQ020\" \"DPQ030\" \"DPQ040\" \"DPQ050\" \"DPQ060\" \"DPQ070\" \"DPQ080\" ##  [9] \"DPQ090\" \"SLQ050\" \"SLQ060\" ## [1] \"physical\" ##  [1] \"BPXPLS\"          \"BPXML1\"          \"BPXSY1\"          \"BPXDI1\"          ##  [5] \"BPXSY2\"          \"BPXDI2\"          \"BPXSY3\"          \"BPXDI3\"          ##  [9] \"BMXWT\"           \"BMXHT\"           \"BMXBMI\"          \"BMXLEG\"          ## [13] \"BMXARML\"         \"BMXARMC\"         \"BMXWAIST\"        \"BMXSAD1\"         ## [17] \"BMXSAD2\"         \"BPXPULS_Regular\" \"BPXPTY_Radial\" names(nh_list)=knm ##### ################################################################################ # regs <- regularizeSimlr(nh_list,fraction=0.15,sigma=rep(1.0,length(nh_list))) # regs=list() wdemog=which( knm == 'demog') for ( wdemog in 1:length(nh_list) ) {   nh_list[[wdemog]]=antsrimpute( nh_list[[wdemog]] )   regs[[ wdemog]]=diag( ncol(nh_list[[wdemog]])) } # regs = regularizeSimlr(nh_list) names( regs ) = knm[ -1 ] initu=initializeSimlr( nh_list, k=round(max_columns_list(nh_list)), jointReduction=TRUE ) ########################### ###########################  if ( ! exists(\"resultNH\") ) {   mysigns = rep(\"positive\",length(nh_list))   mysigns[ (knm) %in% c('exposures','diet') ]='either'   resultNH <- simlr( nh_list,          iterations=100,         sparsenessQuantiles=rep(0.5,length(nh_list)),         positivities=mysigns,          energyType='regression', mixAlg='ica', #        energyType='cca', mixAlg='pca', #        scale=c(\"centerAndScale\",  \"np\"),         scale=c(\"whiten\", \"np\"),         constraint=\"Stiefelx10x10\",         randomSeed=99,         initialUMatrix=initu, verbose=T )   } ## [1] \"Stiefel\" \"10\"      \"10\"      ## [1] \"     <0> BUILD-V <0> BUILD-V <0> BUILD-V <0> BUILD-V <0>    \" ## [1] \"initialDataTerm: 2.22088688787838  <o> mixer: ica  <o> E:  regression\" ## [1] \"Iteration: 1 bestEv: 12.658266629057 bestIt: 1 CE: 12.658266629057 featOrth: 0.127908550240579\" ## [1] \"Iteration: 2 bestEv: 1.53240804841758 bestIt: 2 CE: 1.53240804841758 featOrth: 0.0817140514643591\" ## [1] \"Iteration: 3 bestEv: 0.706762126923422 bestIt: 3 CE: 0.706762126923422 featOrth: 0.0662794830178858\" ## [1] \"Iteration: 4 bestEv: 0.700318060389121 bestIt: 4 CE: 0.700318060389121 featOrth: 0.0624105598481747\" ## [1] \"Iteration: 5 bestEv: 0.52293867582784 bestIt: 5 CE: 0.52293867582784 featOrth: 0.0522994675276923\" ## [1] \"Iteration: 6 bestEv: 0.47811618670822 bestIt: 6 CE: 0.47811618670822 featOrth: 0.0479150329791277\" ## [1] \"Iteration: 7 bestEv: 0.47811618670822 bestIt: 6 CE: 0.505474416662059 featOrth: 0.0432147118795532\" ## [1] \"Iteration: 8 bestEv: 0.414096638813068 bestIt: 8 CE: 0.414096638813068 featOrth: 0.0413934249992349\" ## [1] \"Iteration: 9 bestEv: 0.414096638813068 bestIt: 8 CE: 0.489829298205251 featOrth: 0.0398031253709879\" ## [1] \"Iteration: 10 bestEv: 0.398216713452207 bestIt: 10 CE: 0.398216713452207 featOrth: 0.0397831715771987\" ## [1] \"Iteration: 11 bestEv: 0.397256837560177 bestIt: 11 CE: 0.397256837560177 featOrth: 0.0396868768705827\" ## [1] \"Iteration: 12 bestEv: 0.390738495536904 bestIt: 12 CE: 0.390738495536904 featOrth: 0.0390393208154296\" ## [1] \"Iteration: 13 bestEv: 0.390738495536904 bestIt: 12 CE: 0.406120768408403 featOrth: 0.0380319797978348\" ## [1] \"Iteration: 14 bestEv: 0.36998028691903 bestIt: 14 CE: 0.36998028691903 featOrth: 0.0369900963307585\" ## [1] \"Iteration: 15 bestEv: 0.331942256560803 bestIt: 15 CE: 0.331942256560803 featOrth: 0.0331318784582479\" ## [1] \"Iteration: 16 bestEv: 0.331156916108407 bestIt: 16 CE: 0.331156916108407 featOrth: 0.0330396242653466\" ## [1] \"Iteration: 17 bestEv: 0.326879622360449 bestIt: 17 CE: 0.326879622360449 featOrth: 0.0326108384859776\" ## [1] \"Iteration: 18 bestEv: 0.322356513059678 bestIt: 18 CE: 0.322356513059678 featOrth: 0.0321585248933008\" ## [1] \"Iteration: 19 bestEv: 0.318144944007952 bestIt: 19 CE: 0.318144944007952 featOrth: 0.0317373030973135\" ## [1] \"Iteration: 20 bestEv: 0.318144944007952 bestIt: 19 CE: 0.334599819831015 featOrth: 0.031731358176894\" ## [1] \"Iteration: 21 bestEv: 0.318144944007952 bestIt: 19 CE: 0.539606585851771 featOrth: 0.0316101037802028\" ## [1] \"Iteration: 22 bestEv: 0.313554519864511 bestIt: 22 CE: 0.313554519864511 featOrth: 0.031275837429529\" ## [1] \"Iteration: 23 bestEv: 0.3121936114328 bestIt: 23 CE: 0.3121936114328 featOrth: 0.0311397245017196\" ## [1] \"Iteration: 24 bestEv: 0.312059167278011 bestIt: 24 CE: 0.312059167278011 featOrth: 0.0311268533856157\" ## [1] \"Iteration: 25 bestEv: 0.31119915276303 bestIt: 25 CE: 0.31119915276303 featOrth: 0.0310425012077022\" ## [1] \"Iteration: 26 bestEv: 0.306313369560872 bestIt: 26 CE: 0.306313369560872 featOrth: 0.0305542652817992\" ## [1] \"Iteration: 27 bestEv: 0.306310765733845 bestIt: 27 CE: 0.306310765733845 featOrth: 0.0305540940002097\" ## [1] \"Iteration: 28 bestEv: 0.303885002357457 bestIt: 28 CE: 0.303885002357457 featOrth: 0.0303119599509904\" ## [1] \"Iteration: 29 bestEv: 0.300338582499304 bestIt: 29 CE: 0.300338582499304 featOrth: 0.0299576227695094\" ## [1] \"Iteration: 30 bestEv: 0.298516135588905 bestIt: 30 CE: 0.298516135588905 featOrth: 0.0297739092944669\" ## [1] \"Iteration: 31 bestEv: 0.298451994510741 bestIt: 31 CE: 0.298451994510741 featOrth: 0.0297675456782687\" ## [1] \"Iteration: 32 bestEv: 0.297748557491022 bestIt: 32 CE: 0.297748557491022 featOrth: 0.029697054973066\" ## [1] \"Iteration: 33 bestEv: 0.288287573800103 bestIt: 33 CE: 0.288287573800103 featOrth: 0.0287510671398897\" ## [1] \"Iteration: 34 bestEv: 0.274789980786647 bestIt: 34 CE: 0.274789980786647 featOrth: 0.0274015689676207\" ## [1] \"Iteration: 35 bestEv: 0.273405260594999 bestIt: 35 CE: 0.273405260594999 featOrth: 0.0272628286913661\" ## [1] \"Iteration: 36 bestEv: 0.268107168417337 bestIt: 36 CE: 0.268107168417337 featOrth: 0.0267332774451959\" ## [1] \"Iteration: 37 bestEv: 0.263491790510267 bestIt: 37 CE: 0.263491790510267 featOrth: 0.0262715042148289\" ## [1] \"Iteration: 38 bestEv: 0.263354657807605 bestIt: 38 CE: 0.263354657807605 featOrth: 0.026258221222214\" ## [1] \"Iteration: 39 bestEv: 0.261890267911822 bestIt: 39 CE: 0.261890267911822 featOrth: 0.0261117059826323\" ## [1] \"Iteration: 40 bestEv: 0.26186405261627 bestIt: 40 CE: 0.26186405261627 featOrth: 0.0261094741543305\" ## [1] \"Iteration: 41 bestEv: 0.260452548088697 bestIt: 41 CE: 0.260452548088697 featOrth: 0.0259684721948032\" ## [1] \"Iteration: 42 bestEv: 0.260452548088697 bestIt: 41 CE: 0.480403687019592 featOrth: 0.0258799440018222\" ## [1] \"Iteration: 43 bestEv: 0.259372390613304 bestIt: 43 CE: 0.259372390613304 featOrth: 0.0258597320466721\" ## [1] \"Iteration: 44 bestEv: 0.259350853442203 bestIt: 44 CE: 0.259350853442203 featOrth: 0.0258589881011378\" ## [1] \"Iteration: 45 bestEv: 0.257973993665508 bestIt: 45 CE: 0.257973993665508 featOrth: 0.0257209763699134\" ## [1] \"Iteration: 46 bestEv: 0.257973993665508 bestIt: 45 CE: 0.339335253729536 featOrth: 0.0257207872520511\" ## [1] \"Iteration: 47 bestEv: 0.257952451104536 bestIt: 47 CE: 0.257952451104536 featOrth: 0.0257194289512616\" ## [1] \"Iteration: 48 bestEv: 0.2552366874256 bestIt: 48 CE: 0.2552366874256 featOrth: 0.0254474485841669\" ## [1] \"Iteration: 49 bestEv: 0.255229272465716 bestIt: 49 CE: 0.255229272465716 featOrth: 0.0254474383570616\" ## [1] \"Iteration: 50 bestEv: 0.255229272465716 bestIt: 49 CE: 0.284273978643271 featOrth: 0.0254402421764693\" ## [1] \"Iteration: 51 bestEv: 0.255156701236547 bestIt: 51 CE: 0.255156701236547 featOrth: 0.0254399503136092\" ## [1] \"Iteration: 52 bestEv: 0.255154366120463 bestIt: 52 CE: 0.255154366120463 featOrth: 0.0254398993398978\" ## [1] \"Iteration: 53 bestEv: 0.254627861832724 bestIt: 53 CE: 0.254627861832724 featOrth: 0.0253873951150392\" ## [1] \"Iteration: 54 bestEv: 0.25215114583231 bestIt: 54 CE: 0.25215114583231 featOrth: 0.0251398067714319\" ## [1] \"Iteration: 55 bestEv: 0.251376160716548 bestIt: 55 CE: 0.251376160716548 featOrth: 0.0250625504303822\" ## [1] \"Iteration: 56 bestEv: 0.250711045034936 bestIt: 56 CE: 0.250711045034936 featOrth: 0.0249958818023187\" ## [1] \"Iteration: 57 bestEv: 0.250710025091104 bestIt: 57 CE: 0.250710025091104 featOrth: 0.0249958972905807\" ## [1] \"Iteration: 58 bestEv: 0.250179195925131 bestIt: 58 CE: 0.250179195925131 featOrth: 0.0249430735134733\" ## [1] \"Iteration: 59 bestEv: 0.250179195925131 bestIt: 58 CE: 0.279182784230932 featOrth: 0.0249319967171042\" ## [1] \"Iteration: 60 bestEv: 0.24877519259157 bestIt: 60 CE: 0.24877519259157 featOrth: 0.0248026220954754\" ## [1] \"Iteration: 61 bestEv: 0.248770205268549 bestIt: 61 CE: 0.248770205268549 featOrth: 0.0248024667207619\" ## [1] \"Iteration: 62 bestEv: 0.247578734452385 bestIt: 62 CE: 0.247578734452385 featOrth: 0.0246829061730936\" ## [1] \"Iteration: 63 bestEv: 0.244197670173035 bestIt: 63 CE: 0.244197670173035 featOrth: 0.0243446743891194\" ## [1] \"Iteration: 64 bestEv: 0.242050512469786 bestIt: 64 CE: 0.242050512469786 featOrth: 0.0241304571882175\" ## [1] \"Iteration: 65 bestEv: 0.242049058909188 bestIt: 65 CE: 0.242049058909188 featOrth: 0.024130424685957\" ## [1] \"Iteration: 66 bestEv: 0.242049058909188 bestIt: 65 CE: 0.242051231991025 featOrth: 0.0241304207588029\" ## [1] \"Iteration: 67 bestEv: 0.242049058909188 bestIt: 65 CE: 0.267733105059179 featOrth: 0.0237875054894155\" ## [1] \"Iteration: 68 bestEv: 0.233484392135797 bestIt: 68 CE: 0.233484392135797 featOrth: 0.0232737539896353\" ## [1] \"Iteration: 69 bestEv: 0.231141589906157 bestIt: 69 CE: 0.231141589906157 featOrth: 0.0230398195435211\" ## [1] \"Iteration: 70 bestEv: 0.229130282964457 bestIt: 70 CE: 0.229130282964457 featOrth: 0.0228387812875948\" ## [1] \"Iteration: 71 bestEv: 0.229130282964457 bestIt: 70 CE: 0.229131805330387 featOrth: 0.0228387677508363\" ## [1] \"Iteration: 72 bestEv: 0.228981545336164 bestIt: 72 CE: 0.228981545336164 featOrth: 0.0228235695162567\" ## [1] \"Iteration: 73 bestEv: 0.22669312852532 bestIt: 73 CE: 0.22669312852532 featOrth: 0.0225952684669781\" ## [1] \"Iteration: 74 bestEv: 0.22669312852532 bestIt: 73 CE: 0.226695577793235 featOrth: 0.0225952718960953\" ## [1] \"Iteration: 75 bestEv: 0.224910745862457 bestIt: 75 CE: 0.224910745862457 featOrth: 0.02241710045999\" ## [1] \"Iteration: 76 bestEv: 0.224908068140388 bestIt: 76 CE: 0.224908068140388 featOrth: 0.0224170948583248\" ## [1] \"Iteration: 77 bestEv: 0.224908068140388 bestIt: 76 CE: 0.224911333829931 featOrth: 0.0224170915036241\" ## [1] \"Iteration: 78 bestEv: 0.220237027790689 bestIt: 78 CE: 0.220237027790689 featOrth: 0.021949576856189\" ## [1] \"Iteration: 79 bestEv: 0.217269760257745 bestIt: 79 CE: 0.217269760257745 featOrth: 0.0216527026951037\" ## [1] \"Iteration: 80 bestEv: 0.217258878785886 bestIt: 80 CE: 0.217258878785886 featOrth: 0.0216527027138716\" ## [1] \"Iteration: 81 bestEv: 0.217258878785886 bestIt: 80 CE: 0.217258878785886 featOrth: 0.0216527027138716\" ## [1] \"Iteration: 82 bestEv: 0.217258878785886 bestIt: 80 CE: 0.217258878785886 featOrth: 0.0216527027138716\" ## [1] \"Iteration: 83 bestEv: 0.217258878785886 bestIt: 80 CE: 0.217258878785886 featOrth: 0.0216527027138716\" ## [1] \"Iteration: 84 bestEv: 0.217258878785886 bestIt: 80 CE: 0.217258878785886 featOrth: 0.0216527027138716\" ## [1] \"Iteration: 85 bestEv: 0.217258878785886 bestIt: 80 CE: 0.217258878785886 featOrth: 0.0216527027138716\" ## [1] \"Iteration: 86 bestEv: 0.217258878785886 bestIt: 80 CE: 0.217258878785886 featOrth: 0.0216527027138716\" ##################################################### # ##################################################### # ##################################################### # drwwrd projlist=list() mysimk=ncol(initu) for ( k in 1:length(nh_list)) rownames(resultNH$v[[k]])=colnames(nh_list[[k]]) simdf2=data.frame(fdatanum) simdf2=apply_simlr_matrices( simdf2, resultNH$v, n_limit=ncol(initu), robust=FALSE, center=TRUE,    scale=TRUE, absolute_value=mysigns=='positive', verbose=FALSE ) newnames=simdf2[[2]] simdf2=simdf2[[1]] cognames = c(   \"z_cerad_re\", \"z_animal_re\",      \"z_delayed_re\",    \"z_global_re\",     \"z_digit_re\" #  \"z_cerad_age\", \"z_animal_age\",     \"z_digit_age\",      \"z_delayed_age\",    \"z_global_age\", #  \"z_cerad_edu\", \"z_animal_edu\",     \"z_digit_edu\",      \"z_delayed_edu\",    \"z_global_edu\" ) # cognames=c(\"cerad_sum\",\"cfdast\",\"cfdds\") dnames = c( \"riagendr\", \"ridageyr\", \"race\", \"dmdeduc2\", \"INDFMPIR\",'wtint2yr','wtmec2yr') simdf2 = data.frame(simdf2) simdf2[,dnames]=fdata[,dnames] simdf2[,cognames]=fdata[,cognames] sep='PC' tocomp = c(\"dietPC1\",\"mentalhealthPC1\",'physicalPC1') mycc2 = complete.cases( simdf2[,tocomp]  ) simdf2=simdf2[mycc2,] for ( n in 'exposures' ) {     for ( v in 1:mysimk ) {       thiscol=paste0(n,sep,v)       if ( any( is.na( simdf2[,thiscol] ) )) { #        simdf2 = simlr_impute( data.frame(simdf2), knm, v, n, separator=sep ) #        simdf2[,thiscol]=antsrimpute(simdf2[,thiscol])       }     }   } thesena=is.na(simdf2) nn=colnames(simdf2) # simdf2 = data.frame( robustMatrixTransform(simdf2)) colnames(simdf2)=nn simdf2[thesena]=NA ################################## covars=\" ~ riagendr + ridageyr + dmdeduc2  +\" # race adjusted scores covars=\" ~ 1 +\" # race adjusted scores covars=\" ~ riagendr + ridageyr  + dmdeduc2 + INDFMPIR + \" basep=1e-4 # rooter if ( ! exists(\"cogind\" ) ) cogind = length(cognames) ############################# pnames=knm[-1] nsig=0 for ( kk in 1:ncol(initu)) {   bform = paste0( cognames[cogind], covars, \"1\" )   myform = paste0( cognames[cogind], covars,paste0( paste0(pnames,sep,kk), collapse='+'))   tempdf = simdf2   for ( qq in knm ) {     tt=paste0(qq,sep,kk)     tempdf[ , tt]=psych::winsor( sqrt(tempdf[ , tt] - min(tempdf[ , tt],na.rm=T)), 0.005 ) #    if ( qq == 'exposures' ) tempdf[ , tt]=antsrimpute( tempdf[ , tt] )   }   mdl = lm( myform, data=tempdf )   bmdl = lm( bform, data=tempdf[names(predict(mdl)),] ) #  if (doimp) mdl = lm( myform, data=tempdf, weights=tempdf$wtint2yr ) else mdl = lm( myform, data=tempdf, weights=tempdf$wtint2yr  )   myanv = anova( bmdl, mdl )   if ( myanv$Pr[2] < basep/mysimk ) {     cat(\"*** result begin ***********************************\\n\")     print(\"individual coefficients\")     tailcoffs = tail( coefficients( summary( mdl ) ), 4 )     print( tailcoffs )     print( paste(\"multivar-ANOVA p-value\", insight::format_p(myanv$Pr[2],digits=4) ) )     print( cognames[cogind])     gglist=list()     for ( k in pnames ) {       print( paste(\"Simlr weights\", k ) )       print( interpret_simlr_vector2( resultNH$v[[k]], kk, n2show=3, shortnames=F ) )       ttl = paste0(k,kk, \" \", insight::format_p(tailcoffs[paste0(k,sep,kk),\"Pr(>|t|)\"],digits=4)  )       gglist[[length(gglist)+1]]=visreg::visreg(mdl, paste0(k,sep,kk), gg=TRUE ) + ggtitle(ttl) + theme_minimal()       }     ( grid.arrange( grobs=gglist, nrow=2 ) )     nsig=nsig+1     cat(\"*** result end ***********************************\\n\\n\") #    Sys.sleep(3)   } } ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate Std. Error   t value    Pr(>|t|) ## dietPC21           395.1302   119.8381  3.297201 0.001000220 ## exposuresPC21      482.0323   149.3303  3.227960 0.001274704 ## mentalhealthPC21 -7741.7667  2729.5342 -2.836296 0.004627570 ## physicalPC21      6881.2958  2476.3117  2.778849 0.005525726 ## [1] \"multivar-ANOVA p-value p = 4.3668e-08\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##   DR1TMOIS   DR1TACAR   DR1TLYCO  ##  1.0000000 -0.9019752 -0.7841863  ## [1] \"Simlr weights exposures\" ##       LBXBCD       LBXBSE       LBXBGM  ## -1.000000000  0.053040535  0.005583562  ## [1] \"Simlr weights mentalhealth\" ##    DPQ040    DPQ010    DPQ070  ## 1.0000000 0.7176994 0.5435708  ## [1] \"Simlr weights physical\" ##    BPXDI3     BMXWT     BMXHT  ## 1.0000000 0.5005630 0.4556534 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate Std. Error   t value     Pr(>|t|) ## dietPC32           207.7355   57.17922  3.633059 0.0002898697 ## exposuresPC32    -2623.1279 1259.64576 -2.082433 0.0374782382 ## mentalhealthPC32 -8350.8200 2576.95878 -3.240572 0.0012200241 ## physicalPC32      2253.3165  810.63111  2.779706 0.0055112341 ## [1] \"multivar-ANOVA p-value p = 1.5566e-07\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TSODI  DR1TMOIS  DR1TKCAL  ## 1.0000000 0.9125228 0.6647885  ## [1] \"Simlr weights exposures\" ##     LBXBSE     LBXBPB   LBDTHGSI  ## -1.0000000 -0.6698740 -0.1724832  ## [1] \"Simlr weights mentalhealth\" ##    DPQ040    DPQ070    DPQ020  ## 1.0000000 0.8794767 0.8300997  ## [1] \"Simlr weights physical\" ##     BMXHT     BMXWT    BMXLEG  ## 1.0000000 0.3619778 0.1728898 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate Std. Error   t value     Pr(>|t|) ## dietPC37           -504.1021   257.2135 -1.959859 0.0502039970 ## exposuresPC37      1992.7716   636.2399  3.132107 0.0017703407 ## mentalhealthPC37 -10830.2864  3065.1218 -3.533395 0.0004231628 ## physicalPC37       4573.9384  1848.7901  2.474017 0.0134743348 ## [1] \"multivar-ANOVA p-value p = 1.2260e-06\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##   DR1TBCAR     DR1TLZ   DR1TACAR  ## -1.0000000 -0.8228792 -0.6045778  ## [1] \"Simlr weights exposures\" ##    LBXBSE    LBXBGM  LBDTHGSI  ## 1.0000000 0.1850074 0.1643903  ## [1] \"Simlr weights mentalhealth\" ##    DPQ060    SLQ060    DPQ070  ## 1.0000000 0.7017441 0.4488809  ## [1] \"Simlr weights physical\" ##           BMXWT         BMXSAD1 BPXPULS_Regular  ##       1.0000000       0.5052017       0.3168124 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate Std. Error    t value     Pr(>|t|) ## dietPC38            155.8040    45.7694  3.4041086 6.819466e-04 ## exposuresPC38      -421.9229  1882.9340 -0.2240774 8.227287e-01 ## mentalhealthPC38 -13104.9088  3213.7699 -4.0777371 4.795158e-05 ## physicalPC38       2001.2019   764.1270  2.6189389 8.912519e-03 ## [1] \"multivar-ANOVA p-value p = 5.9416e-07\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TLYCO  DR1TACAR  DR1TPOTA  ## 1.0000000 0.4724369 0.3003654  ## [1] \"Simlr weights exposures\" ##     LBXTHG     LBXBGM     LBXBMN  ## -1.0000000 -0.5618649 -0.2122381  ## [1] \"Simlr weights mentalhealth\" ##    SLQ060    DPQ050    DPQ060  ## 1.0000000 0.6478813 0.6165836  ## [1] \"Simlr weights physical\" ##     BMXHT     BMXWT    BMXLEG  ## 1.0000000 0.4453258 0.3572142 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate Std. Error   t value     Pr(>|t|) ## dietPC39           265.3441   89.12589  2.977183 0.0029574577 ## exposuresPC39    -2785.5701  709.16822 -3.927940 0.0000897123 ## mentalhealthPC39   -66.0108   17.59693 -3.751268 0.0001828892 ## physicalPC39      5324.4739 1687.64303  3.154976 0.0016381508 ## [1] \"multivar-ANOVA p-value p = 3.7409e-10\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TLYCO  DR1TPOTA  DR1TVARA  ## 1.0000000 0.8980955 0.6548388  ## [1] \"Simlr weights exposures\" ##     LBXBSE     LBXBCD   LBDTHGSI  ## -1.0000000  0.9260540 -0.2001664  ## [1] \"Simlr weights mentalhealth\" ##      SLQ060      DPQ080      DPQ060  ## 1.000000000 0.806745571 0.001213691  ## [1] \"Simlr weights physical\" ##     BMXWT    BPXDI1    BPXDI2  ## 1.0000000 0.5254374 0.3215069 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate Std. Error   t value     Pr(>|t|) ## dietPC45          -478.5723   403.2117 -1.186901 2.354616e-01 ## exposuresPC45     2453.3263   611.2954  4.013324 6.293377e-05 ## mentalhealthPC45 -9342.0533  4470.3090 -2.089800 3.680998e-02 ## physicalPC45      3446.4215  1107.0111  3.113267 1.886539e-03 ## [1] \"multivar-ANOVA p-value p = 6.6855e-07\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##   DR1TACAR   DR1TCRYP   DR1TBCAR  ##  1.0000000 -0.7946618 -0.7547341  ## [1] \"Simlr weights exposures\" ##     LBXBCD     LBXBSE     LBXBPB  ## -1.0000000  0.6935497 -0.4293767  ## [1] \"Simlr weights mentalhealth\" ##    SLQ060    DPQ020    DPQ090  ## 1.0000000 0.8722423 0.8009564  ## [1] \"Simlr weights physical\" ##     BMXHT     BMXWT    BPXDI3  ## 1.0000000 0.8334606 0.7712278 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate Std. Error   t value     Pr(>|t|) ## dietPC47           135.7923   49.96251  2.717884 6.648504e-03 ## exposuresPC47    -1587.8816  767.01643 -2.070205 3.861015e-02 ## mentalhealthPC47 -7600.5714 1813.03003 -4.192193 2.930184e-05 ## physicalPC47      1819.1063  647.94957  2.807481 5.060060e-03 ## [1] \"multivar-ANOVA p-value p = 7.8739e-08\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TCAFF  DR1TLYCO   DR1TRET  ## 1.0000000 0.8317310 0.7164778  ## [1] \"Simlr weights exposures\" ##      LBXBSE    LBDTHGSI      LBXBMN  ## -1.00000000  0.92451192 -0.04151911  ## [1] \"Simlr weights mentalhealth\" ##    DPQ060    SLQ060    DPQ080  ## 1.0000000 0.3371820 0.2993631  ## [1] \"Simlr weights physical\" ##     BMXHT     BMXWT  BMXWAIST  ## 1.0000000 0.8112952 0.2223226 ## *** result end *********************************** print(nsig) ## [1] 7 ########################################################################################## ########################################################################################## # https://wwwn.cdc.gov/nchs/nhanes/search/default.aspx # > interpret_simlr_vector2( resultNH$v[['exposures']], 1, n2show=5, shortnames=F ) #   LBXVBZ    LBXVOX    LBXVFN    LBX2DF  # benzene, Xylene, furan, Dimethylfuran # 1.0000000 0.3346728 0.1868323 0.0586727  ##########################################################################################"},{"path":"https://github.com/stnava/simlr_nhanes/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Brian Avants. Maintainer.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"c, \"Avants\", role=c, ) e (2025). simlr.nhanes: SiMLR example using NHANES data. R package version 1.0.0, https://github.com/stnava/simlr_nhanes.","code":"@Manual{,   title = {simlr.nhanes: SiMLR example using NHANES data},   author = {{c} and {\"Avants\"} and {role=c} and email=\"stnava@gmail.com\") )},   year = {2025},   note = {R package version 1.0.0},   url = {https://github.com/stnava/simlr_nhanes}, }"},{"path":"https://github.com/stnava/simlr_nhanes/index.html","id":"simlr_nhanes","dir":"","previous_headings":"","what":"Helper package for simlr NHANES example analyses","title":"Helper package for simlr NHANES example analyses","text":"documentation page ","code":""},{"path":"https://github.com/stnava/simlr_nhanes/index.html","id":"simlr-nhanes","dir":"","previous_headings":"","what":"SiMLR NHANES","title":"Helper package for simlr NHANES example analyses","text":"TODO Data sources: NHANES raw CAPRA curated data nhanesA Code sources: haven ","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Formula Factors — check_formula_factors","title":"Check Formula Factors — check_formula_factors","text":"Identifies factor variables formula fewer two levels.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Formula Factors — check_formula_factors","text":"","code":"check_formula_factors(formula, dataframe)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Formula Factors — check_formula_factors","text":"formula formula object. dataframe data frame containing variables formula.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Formula Factors — check_formula_factors","text":"vector factor variable names fewer two levels.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Formula Factors — check_formula_factors","text":"","code":"check_formula_factors(mpg ~ cyl + gear, mtcars) #> character(0)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"Converts data frame categorical numeric columns numeric matrix, using one-hot encoding categorical variables.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"","code":"convert_to_numeric_matrix(df)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"df data frame.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"numeric matrix.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"","code":"df <- data.frame(a = c(1, 2), b = c(\"yes\", \"no\")) convert_to_numeric_matrix(df) #>      a b_no b_yes #> [1,] 1    0     1 #> [2,] 2    1     0"},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Count Unique Values and Filter Columns — count_unique_values","title":"Count Unique Values and Filter Columns — count_unique_values","text":"Counts unique values column data frame retains columns exceeding specified threshold.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count Unique Values and Filter Columns — count_unique_values","text":"","code":"count_unique_values(df, threshold)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count Unique Values and Filter Columns — count_unique_values","text":"df data frame. threshold integer specifying minimum number unique values retain column.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count Unique Values and Filter Columns — count_unique_values","text":"data frame filtered columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count Unique Values and Filter Columns — count_unique_values","text":"","code":"df <- data.frame(a = c(1, 1, 2), b = c(\"x\", \"y\", \"z\")) count_unique_values(df, 1) #> a : 2 unique values #> b : 3 unique values #>   a b #> 1 1 x #> 2 1 y #> 3 2 z"},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Regression Formula — create_formula","title":"Create Regression Formula — create_formula","text":"Creates regression formula data frame, excluding specified columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Regression Formula — create_formula","text":"","code":"create_formula(dataframe, outcome, exclusions)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Regression Formula — create_formula","text":"dataframe input data frame. outcome outcome variable. exclusions vector columns exclude formula.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Regression Formula — create_formula","text":"formula object regression.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Regression Formula — create_formula","text":"","code":"create_formula(mtcars, \"mpg\", exclusions = c(\"cyl\", \"gear\")) #> mpg ~ disp + hp + drat + wt + qsec + vs + am + carb #> <environment: 0x13b10be38>"},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Columns with High NA Percentage — filter_na_columns","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"Filters columns data frame higher percentage NA values specified threshold.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"","code":"filter_na_columns(df, max_na_percent = 0.2)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"df data frame. max_na_percent Maximum allowed proportion NA values per column. Default 0.2.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"data frame filtered columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"","code":"filter_na_columns(data.frame(a = c(1, NA, 3), b = c(NA, NA, 3)), max_na_percent = 0.5) #>    a #> 1  1 #> 2 NA #> 3  3"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute Missing Values and Report NA Counts — impute_and_report_na","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"function imputes missing values matrix column means reports count missing values per column.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"","code":"impute_and_report_na(mat)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"mat numeric matrix.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"matrix imputed values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"","code":"mat <- matrix(c(1, NA, 3, 4, 5, NA), ncol = 2) impute_and_report_na(mat) #> No missing values detected. #>      [,1] [,2] #> [1,]    1    4 #> [2,]   NA    5 #> [3,]    3   NA"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute Missing Data — impute_data","title":"Impute Missing Data — impute_data","text":"Imputes missing values data frame. Numeric columns imputed median, categorical columns frequent category.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute Missing Data — impute_data","text":"","code":"impute_data(df)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute Missing Data — impute_data","text":"df data frame missing values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute Missing Data — impute_data","text":"data frame imputed values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute Missing Data — impute_data","text":"","code":"impute_data(data.frame(a = c(1, NA, 3), b = c(\"x\", \"y\", NA))) #>   a b #> 1 1 x #> 2 2 y #> 3 3 x"},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"Maps specific frequency categories numeric values, error handling invalid categories.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"","code":"map_freq_to_numeric(df, colname)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"df data frame containing column mapped. colname name column mapped.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"numeric vector mapped values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"","code":"map_freq_to_numeric(data.frame(freq = c(\"Not at all\", \"Several days\")), \"freq\") #> [1] 0 1"},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"function generates new matrix applying random linear transformation given latent matrix adding Gaussian noise.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"","code":"matrix_from_latent(latent_matrix, target_p, noise_sd = 0.3)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"latent_matrix numeric matrix representing latent structure (n x k). target_p integer specifying number columns output matrix. noise_sd numeric value indicating standard deviation Gaussian noise added. Default 0.3.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"numeric matrix dimensions (n x target_p), generated latent matrix random linear transformation added Gaussian noise.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"","code":"latent <- matrix(rnorm(20), nrow = 5, ncol = 4) generated_matrix <- matrix_from_latent(latent, target_p = 3, noise_sd = 0.2) print(generated_matrix) #>            [,1]        [,2]       [,3] #> [1,] -0.8420428 -2.26384990 -1.4360201 #> [2,] -1.4226564  0.01670062  2.9901238 #> [3,] -3.9410985 -6.29693119  4.4003814 #> [4,]  2.4102664  1.54497778 -0.5047176 #> [5,] -1.5365092  0.60855535  0.2409585"},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"function loops list matrices returns maximum number columns found across matrices list.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"","code":"max_columns_list(matrix_list)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"matrix_list list containing matrices. Non-matrix elements ignored warning.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"integer representing maximum number columns across matrices list.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"","code":"mat1 <- matrix(1:6, nrow = 2) mat2 <- matrix(1:12, nrow = 3) mat3 <- matrix(1:4, nrow = 2) max_columns_list(list(mat1, mat2, mat3)) # Returns 2 #> [1] 4"},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"Merges columns type two data frames based common column names.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"","code":"merge_same_type_columns(df1, df2)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"df1 First data frame. df2 Second data frame.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"merged data frame containing matching columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"","code":"merge_same_type_columns(data.frame(a = 1:3), data.frame(a = 4:6)) #>   a #> 1 1 #> 2 2 #> 3 3 #> 4 4 #> 5 5 #> 6 6"},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"function loops list matrices returns minimum number columns found across matrices list.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"","code":"min_columns_list(matrix_list)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"matrix_list list containing matrices. Non-matrix elements ignored warning.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"integer representing minimum number columns across matrices list.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"","code":"mat1 <- matrix(1:6, nrow = 2) mat2 <- matrix(1:12, nrow = 3) mat3 <- matrix(1:4, nrow = 2) min_columns_list(list(mat1, mat2, mat3)) # Returns 2 #> [1] 2"},{"path":"https://github.com/stnava/simlr_nhanes/reference/nhanescog.html","id":null,"dir":"Reference","previous_headings":"","what":"NHANES cognition data — nhanescog","title":"NHANES cognition data — nhanescog","text":"NHANES cognition data","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/nhanescog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NHANES cognition data — nhanescog","text":"","code":"nhanescog"},{"path":"https://github.com/stnava/simlr_nhanes/reference/nhanescog.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"NHANES cognition data — nhanescog","text":"Curated nhanes cognition data CAPRA","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/nhanescog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NHANES cognition data — nhanescog","text":"","code":"if (FALSE) { # \\dontrun{  data(\"nhanescog_2011_2014\") } # }"},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and Filter XPT File — read_and_filter_xpt","title":"Read and Filter XPT File — read_and_filter_xpt","text":"Reads XPT file, converts data frame, renames first column \"ID\", filters based unique value counts.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and Filter XPT File — read_and_filter_xpt","text":"","code":"read_and_filter_xpt(file_path, threshold = 100)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and Filter XPT File — read_and_filter_xpt","text":"file_path Path XPT file. threshold Numeric threshold filter columns based unique value counts. Default 100.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and Filter XPT File — read_and_filter_xpt","text":"data frame filtered columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and Filter XPT File — read_and_filter_xpt","text":"","code":"read_and_filter_xpt(\"data.xpt\", threshold = 50) #> Error in read_xpt(file_path): could not find function \"read_xpt\""},{"path":"https://github.com/stnava/simlr_nhanes/reference/remove_perfectly_correlated.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Perfectly Correlated Columns from a Data Frame — remove_perfectly_correlated","title":"Remove Perfectly Correlated Columns from a Data Frame — remove_perfectly_correlated","text":"function identifies columns data frame perfectly correlated (correlation coefficient 1 -1) removes second instance pair, ensuring two columns resulting data frame perfectly correlated.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/remove_perfectly_correlated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Perfectly Correlated Columns from a Data Frame — remove_perfectly_correlated","text":"","code":"remove_perfectly_correlated(df, tolerance = 1e-06)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/remove_perfectly_correlated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Perfectly Correlated Columns from a Data Frame — remove_perfectly_correlated","text":"df data frame containing numeric columns checked perfect correlation. tolerance float tolerance value","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/remove_perfectly_correlated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Perfectly Correlated Columns from a Data Frame — remove_perfectly_correlated","text":"data frame redundant perfectly correlated columns removed.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/remove_perfectly_correlated.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove Perfectly Correlated Columns from a Data Frame — remove_perfectly_correlated","text":"","code":"df <- data.frame(a = 1:5, b = 1:5, c = 5:1+rnorm(5), d = c(2, 1, 6, 8, 10)) remove_perfectly_correlated(df) #>   a         c  d #> 1 1 5.5777091  2 #> 2 2 4.1181949  1 #> 3 3 1.0882795  6 #> 4 4 2.8620865  8 #> 5 5 0.7567633 10"}]
