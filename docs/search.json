[{"path":"https://github.com/stnava/simlr_nhanes/articles/simlr_nhanes.html","id":"nhanes-example","dir":"Articles","previous_headings":"","what":"NHANES example","title":"simlr: nhanes application explained","text":"five publicly available data categories : - Demographics (DEMO) - Dietary (DIET) - Examination (EXAM) - Laboratory (LAB) - Questionnaire (Q). abbreviated forms parentheses may substituted long form nhanesA commands. INDFMPIR: Poverty Income Ratio (0 = income, higher values = higher income relative poverty threshold). • INDHHIN2: Annual Household Income (categorized ranges). • DMDEDUC2: Education Level (adults 20+ years). • OCD390G: Employment Status (occupation questionnaire).","code":"## simpleWarning in download.file(url, tf, mode = \"wb\", quiet = TRUE): downloaded length 0 != reported length 1245 ##  ##  ## simpleWarning in download.file(url, tf, mode = \"wb\", quiet = TRUE): downloaded length 0 != reported length 1245 ##  ##   Male Female  ##   1469   1545 ## character(0) #################################### colcats=rep(\"Basic\",ncol(fdata)) colcats[ colnames(fdata) %in%  c(\"ridageyr\",\"riagendr\",\"race\",\"dmdeduc2\",\"INDFMPIR\") ]='demog' bpname=getNamesFromDataframe( \"BPX\",fdata) bmname=getNamesFromDataframe( \"BMX\",fdata) colcats[ colnames(fdata) %in%  c(bmname,bpname,\"Testosterone\",\"TotChol\",\"Diabetes\" ) ]='physical' colcats[ colnames(fdata) %in%   c(   getNamesFromDataframe( \"DPQ\", fdata ),    getNamesFromDataframe( \"SLQ\", fdata ) )  ]='mentalhealth' x=c('LC','.x','.y','URDUMMAL','LBXVDE','LBX4CE') colcats[ colnames(fdata) %in%  getNamesFromDataframe( \"LBX\", fdata, exclusions=x ) ]='exposures' colcats[ colnames(fdata) %in%  getNamesFromDataframe( \"LBD\", fdata, exclusions=x ) ]='exposures' #colcats[ colnames(fdata) %in%  getNamesFromDataframe( \"URX\", fdata, exclusions=x ) ]='exposures' # colcats[ colnames(fdata) %in%  getNamesFromDataframe( \"URD\", fdata, exclusions=x ) ]='exposures' # colcats[ colnames(fdata) %in%  getNamesFromDataframe( \"LBC\", fdata, exclusions=x ) ]='exposures' colcats[ colnames(fdata) %in%  getNamesFromDataframe( \"DR1T\", fdata ) ]='diet' # colcats[ colnames(fdata) %in%  getNamesFromDataframe( \"cfd\", fdata )[-1] ]='digitspan' tbl=table(colcats) ############## nh_list=list() knm=names(tbl)[-1] mycc = complete.cases( fdata[ , colcats %in% 'demog' ]) mycc = complete.cases( fdata[ , colcats %in% 'exposures' ]) table(mycc) ## mycc ## FALSE  TRUE  ##  2135   462 doimp=TRUE for ( k in knm ) {     print(k)     if ( doimp ) {       temp0 = impute_data( fdata[ ,colcats==k] )     } else temp0=(fdata[mycc,colcats==k])     temp = data.frame(convert_to_numeric_matrix( temp0 ))     if ( TRUE ) {       vv=apply( temp, 2, FUN=var )       temp = temp[ , vv > 0 ] #      temp = robustMatrixTransform( temp )     }     for ( j in 1:ncol(temp) ) {         hist( temp[,j], main=colnames(temp)[j]) #        Sys.sleep(1)         }     nh_list[[length(nh_list)+1]]=data.matrix( ( temp ) )     print(colnames(nh_list[[length(nh_list)]])) #    nh_list[[length(nh_list)]]=impute_and_report_na(nh_list[[length(nh_list)]] )     } ## [1] \"demog\" ## [1] \"ridageyr\"   \"dmdeduc2\"   \"INDFMPIR\"   \"riagendr_1\" \"riagendr_2\" ## [6] \"race_1\"     \"race_2\"     \"race_3\"     \"race_4\"     ## [1] \"dietommunity.supply\"      \"DR1TWS_Well.or.rain.cistern\"  ## [69] \"DR1TWS_Spring\"                \"DR1TWS_Don.t.drink.tap.water\" ## [71] \"DR1TWS_Don.t.know\"            ## [1] \"exposures\" ##  [1] \"LBXBPB\"   \"LBDBPBSI\" \"LBXBCD\"   \"LBDBCDSI\" \"LBXTHG\"   \"LBDTHGSI\" ##  [7] \"LBXBSE\"   \"LBDBSESI\" \"LBXBMN\"   \"LBDBMNSI\" \"LBX2DF\"   \"LBXV06\"   ## [13] \"LBXV2A\"   \"LBXV3B\"   \"LBXV4C\"   \"LBXVBZ\"   \"LBXVCB\"   \"LBXVDB\"   ## [19] \"LBXVEB\"   \"LBXVFN\"   \"LBXVIPB\"  \"LBXVMC\"   \"LBXVOX\"   \"LBXVTC\"   ## [25] \"LBXVTE\"   \"LBXVXY\"   \"LBXSCU\"   \"LBDSCUSI\" \"LBXSSE\"   \"LBDSSESI\" ## [31] \"LBXSZN\"   \"LBDSZNSI\" \"LBXIHG\"   \"LBDIHGSI\" \"LBXBGE\"   \"LBXBGM\"   ## [1] \"mentalhealth\" ##  [1] \"DPQ010\" \"DPQ020\" \"DPQ030\" \"DPQ040\" \"DPQ050\" \"DPQ060\" \"DPQ070\" \"DPQ080\" ##  [9] \"DPQ090\" \"DPQ100\" \"SLQ050\" \"SLQ060\" ## [1] \"physical\" ##  [1] \"BPXPLS\"            \"BPXML1\"            \"BPXSY1\"            ##  [4] \"BPXDI1\"            \"BPXSY2\"            \"BPXDI2\"            ##  [7] \"BPXSY3\"            \"BPXDI3\"            \"BMXWT\"             ## [10] \"BMXHT\"             \"BMXBMI\"            \"BMXLEG\"            ## [13] \"BMXARML\"           \"BMXARMC\"           \"BMXWAIST\"          ## [16] \"BMXSAD1\"           \"BMXSAD2\"           \"BPXPULS_Regular\"   ## [19] \"BPXPULS_Irregular\" \"BPXPTY_Radial\"     \"BPXPTY_Brachial\" names(nh_list)=knm ##### ################################################################################ # regs <- regularizeSimlr(nh_list,fraction=0.15,sigma=rep(1.0,length(nh_list))) # regs <- regularizeSimlr(nh_list) # regs=list() wdemog=which( knm == 'demog') for ( wdemog in 1:length(nh_list) ) regs[[ wdemog]]=diag( ncol(nh_list[[wdemog]])) names( regs ) = knm[ -1 ] initu=initializeSimlr( nh_list, k=round(max_columns_list(nh_list)), jointReduction=TRUE ) initu=initializeSimlr( nh_list, k=min_columns_list(nh_list), jointReduction=TRUE ) initu=initializeSimlr( nh_list, k=round(min_columns_list(nh_list)*2), jointReduction=TRUE ) resultNH <- simlr( nh_list,          iterations=25,         sparsenessQuantiles=rep(0.5,length(nh_list)),         positivities=rep(\"positive\",length(nh_list)),          energyType='regression', mixAlg='ica', #        energyType='cca', mixAlg='svd',         scale=c(\"centerAndScale\", \"whiten\",  \"np\"),         constraint=\"Stiefelx10x10\",         initialUMatrix=initu, verbose=T ) ## [1] \"Stiefel\" \"10\"      \"10\"      ## [1] \"     <0> BUILD-V <0> BUILD-V <0> BUILD-V <0> BUILD-V <0>    \" ## [1] \"initialDataTerm: 1.87954372184907  <o> mixer: ica  <o> E:  regression\" ## [1] \"Iteration: 1 bestEv: 11.4529316804837 bestIt: 1 CE: 11.4529316804837 featOrth: 0.0832926616874281\" ## [1] \"Iteration: 2 bestEv: 1.31473265429006 bestIt: 2 CE: 1.31473265429006 featOrth: 0.108427121469211\" ## [1] \"Iteration: 3 bestEv: 0.878881806359599 bestIt: 3 CE: 0.878881806359599 featOrth: 0.088171969335291\" ## [1] \"Iteration: 4 bestEv: 0.796981391249049 bestIt: 4 CE: 0.796981391249049 featOrth: 0.0798386585896333\" ## [1] \"Iteration: 5 bestEv: 0.73160542890382 bestIt: 5 CE: 0.73160542890382 featOrth: 0.0730340614955392\" ## [1] \"Iteration: 6 bestEv: 0.699248295814313 bestIt: 6 CE: 0.699248295814313 featOrth: 0.0698437593378205\" ## [1] \"Iteration: 7 bestEv: 0.562032935023409 bestIt: 7 CE: 0.562032935023408 featOrth: 0.0560812260430303\" ## [1] \"Iteration: 8 bestEv: 0.506312904146108 bestIt: 8 CE: 0.506312904146108 featOrth: 0.0505069558908114\" ## [1] \"Iteration: 9 bestEv: 0.444592134325045 bestIt: 9 CE: 0.444592134325045 featOrth: 0.0441652057342797\" ## [1] \"Iteration: 10 bestEv: 0.404713273860327 bestIt: 10 CE: 0.404713273860327 featOrth: 0.0402175695173946\" ## [1] \"Iteration: 11 bestEv: 0.299565330332076 bestIt: 11 CE: 0.299565330332076 featOrth: 0.0298431164043728\" ## [1] \"Iteration: 12 bestEv: 0.261973801747632 bestIt: 12 CE: 0.261973801747632 featOrth: 0.0260967328703157\" ## [1] \"Iteration: 13 bestEv: 0.209763925122335 bestIt: 13 CE: 0.209763925122335 featOrth: 0.0208979590085675\" ## [1] \"Iteration: 14 bestEv: 0.18426277175189 bestIt: 14 CE: 0.18426277175189 featOrth: 0.0182946568306513\" ## [1] \"Iteration: 15 bestEv: 0.159541057232364 bestIt: 15 CE: 0.159541057232364 featOrth: 0.0158631592639052\" ## [1] \"Iteration: 16 bestEv: 0.145340171529146 bestIt: 16 CE: 0.145340171529146 featOrth: 0.0144189930612603\" ## [1] \"Iteration: 17 bestEv: 0.101777498702288 bestIt: 17 CE: 0.101777498702288 featOrth: 0.00997407899909496\" ## [1] \"Iteration: 18 bestEv: 0.0774007759856676 bestIt: 18 CE: 0.0774007759856676 featOrth: 0.00760515662328707\" ## [1] \"Iteration: 19 bestEv: 0.0717684583000541 bestIt: 19 CE: 0.0717684583000541 featOrth: 0.00665021255845684\" ## [1] \"Iteration: 20 bestEv: 0.0613470729848001 bestIt: 20 CE: 0.0613470729848001 featOrth: 0.00596509879409936\" ## [1] \"Iteration: 21 bestEv: 0.0521110250101564 bestIt: 21 CE: 0.0521110250101564 featOrth: 0.00507136604296313\" ## [1] \"Iteration: 22 bestEv: 0.0429537437446619 bestIt: 22 CE: 0.0429537437446619 featOrth: 0.0041977438980101\" ## [1] \"Iteration: 23 bestEv: 0.0272378536540587 bestIt: 23 CE: 0.0272378536540587 featOrth: 0.00263735089861445\" ## [1] \"Iteration: 24 bestEv: 0.0229217292194073 bestIt: 24 CE: 0.0229217292194073 featOrth: 0.00220130019523011\" ## [1] \"Iteration: 25 bestEv: 0.0119744198491191 bestIt: 25 CE: 0.0119744198491191 featOrth: 0.00106033953655917\" ##################################################### # drwwrd projlist=list() mysimk=ncol(initu) for ( k in 2:length(nh_list)) {     rownames(resultNH$v[[k]])=colnames( nh_list[[k]])     ux=data.frame(nh_list[[k]] %*% abs(resultNH$v[[k]][,1:mysimk]))     colnames(ux)=paste0(names(nh_list)[k],1:ncol(ux))     projlist[[length(projlist)+1]]=ux     names( projlist )[length(projlist)]=knm[k] } simdf=simdf2=dplyr::bind_cols(projlist) cognames = c(   \"z_cerad_re\", \"z_animal_re\",      \"z_delayed_re\",    \"z_global_re\",     \"z_digit_re\" #  \"z_cerad_age\", \"z_animal_age\",     \"z_digit_age\",      \"z_delayed_age\",    \"z_global_age\", #  \"z_cerad_edu\", \"z_animal_edu\",     \"z_digit_edu\",      \"z_delayed_edu\",    \"z_global_edu\" ) # cognames=c(\"cerad_sum\",\"cfdast\",\"cfdds\") dnames = c( \"riagendr\", \"ridageyr\", \"race\", \"dmdeduc2\", \"INDFMPIR\",'wtint2yr','wtmec2yr') if ( doimp ) {   simdf2[,dnames]=fdata[,dnames]   simdf2[,cognames]=fdata[,cognames]   } else {   simdf2[,dnames]=fdata[mycc,dnames]   simdf2[,cognames]=fdata[mycc,cognames]   } ################################# covars=\" ~ riagendr + ridageyr + race + dmdeduc2 + INDFMPIR + \" covars=\" ~ riagendr + ridageyr + race + dmdeduc2 +  \" ############################# for ( kk in 1:ncol(initu)) {   bform = paste0( cognames[length(cognames)], covars, \"1\" )   myform = paste0( cognames[length(cognames)], covars,paste0( paste0(names(projlist),kk), collapse='+'))   tempdf = simdf2[mycc,]   bmdl = lm( bform, data=tempdf )   mdl = lm( myform, data=tempdf ) #  if (doimp) mdl = lm( myform, data=tempdf, weights=tempdf$wtint2yr ) else mdl = lm( myform, data=tempdf, weights=tempdf$wtint2yr  )   myanv = anova( bmdl, mdl )   if ( myanv$Pr[2] < 1e-5 ) {     cat(\"*** result begin ***********************************\\n\")     print(\"individual coefficients\")     print( tail( coefficients( summary( mdl ) ), 4 ))     print( paste(\"multivar-ANOVA p-value\", myanv$Pr[2] ) )     print( cognames[length(cognames)])     for ( k in names(projlist) ) {       print( paste(\"Simlr weights\", k ) )       print( interpret_simlr_vector2( resultNH$v[[k]], kk, n2show=3, shortnames=F ) )       visreg::visreg(mdl, paste0(k,kk) )       }     cat(\"*** result end ***********************************\\n\\n\") #    Sys.sleep(3)   } } ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate   Std. Error   t value     Pr(>|t|) ## diet1          7.838042e+02      197.184  3.974988 8.194466e-05 ## exposures1    -2.833631e+04    23118.301 -1.225709 2.209478e-01 ## mentalhealth1 -4.512145e+07 12700424.645 -3.552751 4.213889e-04 ## physical1     -8.261832e+04    45388.740 -1.820238 6.938538e-02 ## [1] \"multivar-ANOVA p-value 1.9348132204652e-07\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##                DR1TNUMF                DR1TALCO DR1TWS_Community.supply  ##               1.0000000               0.5629291               0.5392898 ## [1] \"Simlr weights exposures\" ##  LBDSCUSI    LBXSCU    LBXBCD  ## 1.0000000 0.9997199 0.4249701 ## [1] \"Simlr weights mentalhealth\" ##    DPQ080    DPQ010    DPQ050  ## 1.0000000 0.5696911 0.5638994 ## [1] \"Simlr weights physical\" ##           BMXSAD2            BPXPLS BPXPULS_Irregular  ##         1.0000000         0.9912346         0.6636011 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate   Std. Error   t value     Pr(>|t|) ## diet6          3.063059e+01 1.109299e+01  2.761255 5.992908e-03 ## exposures6    -2.531048e+03 1.544242e+03 -1.639023 1.019059e-01 ## mentalhealth6 -2.519468e+07 5.996008e+06 -4.201908 3.191763e-05 ## physical6      6.978863e+03 6.656998e+03  1.048350 2.950389e-01 ## [1] \"multivar-ANOVA p-value 8.12213481011615e-06\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TPOTA  DR1TZINC  DR1TNIAC  ## 1.0000000 0.7044041 0.6814416 ## [1] \"Simlr weights exposures\" ##     LBXBMN   LBDBMNSI     LBXBGM  ## 1.00000000 0.99994662 0.06533231 ## [1] \"Simlr weights mentalhealth\" ##    SLQ050    DPQ020    DPQ050  ## 1.0000000 0.9188841 0.9076930 ## [1] \"Simlr weights physical\" ##    BMXBMI    BMXLEG     BMXWT  ## 1.0000000 0.7257347 0.5646809 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate   Std. Error   t value     Pr(>|t|) ## diet9          2.992743e+02 9.496750e+01  3.151334 0.0017335049 ## exposures9     5.942592e+02 3.387338e+02  1.754355 0.0800488462 ## mentalhealth9 -5.061627e+08 1.329061e+08 -3.808425 0.0001592143 ## physical9      2.986089e+02 1.515997e+02  1.969720 0.0494820301 ## [1] \"multivar-ANOVA p-value 7.46406846129752e-07\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TPHOS  DR1TP182  DR1TP183  ## 1.0000000 0.9616088 0.8381792 ## [1] \"Simlr weights exposures\" ##    LBXVBZ    LBXVFN    LBXVMC  ## 1.0000000 0.8697670 0.7227572 ## [1] \"Simlr weights mentalhealth\" ##    DPQ060    DPQ040    DPQ010  ## 1.0000000 0.6744663 0.3990794 ## [1] \"Simlr weights physical\" ##     BMXHT    BMXLEG   BMXARML  ## 1.0000000 0.6463603 0.6383448 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error   t value     Pr(>|t|) ## diet13          1.593838e+02 4.045343e+01  3.939933 9.442461e-05 ## exposures13    -4.681889e+05 2.473866e+05 -1.892540 5.905924e-02 ## mentalhealth13 -8.621373e+07 2.051922e+07 -4.201608 3.195844e-05 ## physical13     -2.021175e+04 1.246329e+04 -1.621703 1.055659e-01 ## [1] \"multivar-ANOVA p-value 1.9636614950595e-07\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TMOIS    DR1TFF  DR1TPHOS  ## 1.0000000 0.9098449 0.7634796 ## [1] \"Simlr weights exposures\" ##    LBXVTE    LBXVEB    LBXV3B  ## 1.0000000 0.8819384 0.7009481 ## [1] \"Simlr weights mentalhealth\" ##    DPQ100    DPQ070    DPQ050  ## 1.0000000 0.7674969 0.4689283 ## [1] \"Simlr weights physical\" ##    BMXLEG   BMXARMC    BPXDI3  ## 1.0000000 0.8077846 0.7591493 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error    t value     Pr(>|t|) ## diet18          1.571542e+02 4.573734e+01  3.4360147 0.0006449912 ## exposures18    -6.357785e+04 3.996502e+04 -1.5908373 0.1123468767 ## mentalhealth18 -3.659108e+08 9.895825e+07 -3.6976277 0.0002444306 ## physical18     -2.269277e+02 7.928052e+02 -0.2862339 0.7748304084 ## [1] \"multivar-ANOVA p-value 8.786148711207e-06\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ## DR1TWS_Don.t.drink.tap.water                     DR1TNUMF  ##                     1.000000                     0.934732  ##                       DR1TVC  ##                     0.893079 ## [1] \"Simlr weights exposures\" ##    LBXSCU  LBDSCUSI  LBDBMNSI  ## 1.0000000 0.9970354 0.3159336 ## [1] \"Simlr weights mentalhealth\" ##    DPQ100    DPQ020    DPQ040  ## 1.0000000 0.9795729 0.9540009 ## [1] \"Simlr weights physical\" ##    BPXDI3   BMXARMC    BPXDI2  ## 1.0000000 0.9217437 0.8623526 ## *** result end *********************************** ####################### ########################################################################################## # https://wwwn.cdc.gov/nchs/nhanes/search/default.aspx # > interpret_simlr_vector2( resultNH$v[['exposures']], 1, n2show=5, shortnames=F ) #   LBXVBZ    LBXVOX    LBXVFN    LBX2DF  # benzene, Xylene, furan, Dimethylfuran # 1.0000000 0.3346728 0.1868323 0.0586727  ##########################################################################################"},{"path":"https://github.com/stnava/simlr_nhanes/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Brian Avants. Maintainer.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"c, \"Avants\", role=c, ) e (2025). simlr.nhanes: SiMLR example using NHANES data. R package version 1.0.0, https://github.com/stnava/simlr_nhanes.","code":"@Manual{,   title = {simlr.nhanes: SiMLR example using NHANES data},   author = {{c} and {\"Avants\"} and {role=c} and email=\"stnava@gmail.com\") )},   year = {2025},   note = {R package version 1.0.0},   url = {https://github.com/stnava/simlr_nhanes}, }"},{"path":"https://github.com/stnava/simlr_nhanes/index.html","id":"simlr_nhanes","dir":"","previous_headings":"","what":"Helper package for simlr NHANES example analyses","title":"Helper package for simlr NHANES example analyses","text":"documentation page ","code":""},{"path":"https://github.com/stnava/simlr_nhanes/index.html","id":"simlr-nhanes","dir":"","previous_headings":"","what":"SiMLR NHANES","title":"Helper package for simlr NHANES example analyses","text":"TODO Data sources: NHANES raw CAPRA curated data nhanesA Code sources: haven ","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Formula Factors — check_formula_factors","title":"Check Formula Factors — check_formula_factors","text":"Identifies factor variables formula fewer two levels.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Formula Factors — check_formula_factors","text":"","code":"check_formula_factors(formula, dataframe)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Formula Factors — check_formula_factors","text":"formula formula object. dataframe data frame containing variables formula.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Formula Factors — check_formula_factors","text":"vector factor variable names fewer two levels.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Formula Factors — check_formula_factors","text":"","code":"check_formula_factors(mpg ~ cyl + gear, mtcars) #> character(0)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"Converts data frame categorical numeric columns numeric matrix, using one-hot encoding categorical variables.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"","code":"convert_to_numeric_matrix(df)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"df data frame.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"numeric matrix.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"","code":"df <- data.frame(a = c(1, 2), b = c(\"yes\", \"no\")) convert_to_numeric_matrix(df) #>      a b_no b_yes #> [1,] 1    0     1 #> [2,] 2    1     0"},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Count Unique Values and Filter Columns — count_unique_values","title":"Count Unique Values and Filter Columns — count_unique_values","text":"Counts unique values column data frame retains columns exceeding specified threshold.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count Unique Values and Filter Columns — count_unique_values","text":"","code":"count_unique_values(df, threshold)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count Unique Values and Filter Columns — count_unique_values","text":"df data frame. threshold integer specifying minimum number unique values retain column.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count Unique Values and Filter Columns — count_unique_values","text":"data frame filtered columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count Unique Values and Filter Columns — count_unique_values","text":"","code":"df <- data.frame(a = c(1, 1, 2), b = c(\"x\", \"y\", \"z\")) count_unique_values(df, 1) #> a : 2 unique values #> b : 3 unique values #>   a b #> 1 1 x #> 2 1 y #> 3 2 z"},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Regression Formula — create_formula","title":"Create Regression Formula — create_formula","text":"Creates regression formula data frame, excluding specified columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Regression Formula — create_formula","text":"","code":"create_formula(dataframe, outcome, exclusions)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Regression Formula — create_formula","text":"dataframe input data frame. outcome outcome variable. exclusions vector columns exclude formula.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Regression Formula — create_formula","text":"formula object regression.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Regression Formula — create_formula","text":"","code":"create_formula(mtcars, \"mpg\", exclusions = c(\"cyl\", \"gear\")) #> mpg ~ disp + hp + drat + wt + qsec + vs + am + carb #> <environment: 0x116525cf8>"},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Columns with High NA Percentage — filter_na_columns","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"Filters columns data frame higher percentage NA values specified threshold.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"","code":"filter_na_columns(df, max_na_percent = 0.2)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"df data frame. max_na_percent Maximum allowed proportion NA values per column. Default 0.2.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"data frame filtered columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"","code":"filter_na_columns(data.frame(a = c(1, NA, 3), b = c(NA, NA, 3)), max_na_percent = 0.5) #>    a #> 1  1 #> 2 NA #> 3  3"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute Missing Values and Report NA Counts — impute_and_report_na","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"function imputes missing values matrix column means reports count missing values per column.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"","code":"impute_and_report_na(mat)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"mat numeric matrix.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"matrix imputed values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"","code":"mat <- matrix(c(1, NA, 3, 4, 5, NA), ncol = 2) impute_and_report_na(mat) #> No missing values detected. #>      [,1] [,2] #> [1,]    1    4 #> [2,]   NA    5 #> [3,]    3   NA"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute Missing Data — impute_data","title":"Impute Missing Data — impute_data","text":"Imputes missing values data frame. Numeric columns imputed median, categorical columns frequent category.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute Missing Data — impute_data","text":"","code":"impute_data(df)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute Missing Data — impute_data","text":"df data frame missing values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute Missing Data — impute_data","text":"data frame imputed values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute Missing Data — impute_data","text":"","code":"impute_data(data.frame(a = c(1, NA, 3), b = c(\"x\", \"y\", NA))) #>   a b #> 1 1 x #> 2 2 y #> 3 3 x"},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"Maps specific frequency categories numeric values, error handling invalid categories.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"","code":"map_freq_to_numeric(df, colname)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"df data frame containing column mapped. colname name column mapped.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"numeric vector mapped values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"","code":"map_freq_to_numeric(data.frame(freq = c(\"Not at all\", \"Several days\")), \"freq\") #> [1] 0 1"},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"function generates new matrix applying random linear transformation given latent matrix adding Gaussian noise.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"","code":"matrix_from_latent(latent_matrix, target_p, noise_sd = 0.3)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"latent_matrix numeric matrix representing latent structure (n x k). target_p integer specifying number columns output matrix. noise_sd numeric value indicating standard deviation Gaussian noise added. Default 0.3.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"numeric matrix dimensions (n x target_p), generated latent matrix random linear transformation added Gaussian noise.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"","code":"latent <- matrix(rnorm(20), nrow = 5, ncol = 4) generated_matrix <- matrix_from_latent(latent, target_p = 3, noise_sd = 0.2) print(generated_matrix) #>            [,1]        [,2]       [,3] #> [1,] -0.8420428 -2.26384990 -1.4360201 #> [2,] -1.4226564  0.01670062  2.9901238 #> [3,] -3.9410985 -6.29693119  4.4003814 #> [4,]  2.4102664  1.54497778 -0.5047176 #> [5,] -1.5365092  0.60855535  0.2409585"},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"function loops list matrices returns maximum number columns found across matrices list.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"","code":"max_columns_list(matrix_list)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"matrix_list list containing matrices. Non-matrix elements ignored warning.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"integer representing maximum number columns across matrices list.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"","code":"mat1 <- matrix(1:6, nrow = 2) mat2 <- matrix(1:12, nrow = 3) mat3 <- matrix(1:4, nrow = 2) max_columns_list(list(mat1, mat2, mat3)) # Returns 2 #> [1] 4"},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"Merges columns type two data frames based common column names.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"","code":"merge_same_type_columns(df1, df2)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"df1 First data frame. df2 Second data frame.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"merged data frame containing matching columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"","code":"merge_same_type_columns(data.frame(a = 1:3), data.frame(a = 4:6)) #> Error in bind_rows(df1[, matching_columns, drop = FALSE], df2[, matching_columns,     drop = FALSE]): could not find function \"bind_rows\""},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"function loops list matrices returns minimum number columns found across matrices list.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"","code":"min_columns_list(matrix_list)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"matrix_list list containing matrices. Non-matrix elements ignored warning.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"integer representing minimum number columns across matrices list.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"","code":"mat1 <- matrix(1:6, nrow = 2) mat2 <- matrix(1:12, nrow = 3) mat3 <- matrix(1:4, nrow = 2) min_columns_list(list(mat1, mat2, mat3)) # Returns 2 #> [1] 2"},{"path":"https://github.com/stnava/simlr_nhanes/reference/nhanescog.html","id":null,"dir":"Reference","previous_headings":"","what":"NHANES cognition data — nhanescog","title":"NHANES cognition data — nhanescog","text":"NHANES cognition data","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/nhanescog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NHANES cognition data — nhanescog","text":"","code":"nhanescog"},{"path":"https://github.com/stnava/simlr_nhanes/reference/nhanescog.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"NHANES cognition data — nhanescog","text":"Curated nhanes cognition data CAPRA","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/nhanescog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NHANES cognition data — nhanescog","text":"","code":"if (FALSE) { # \\dontrun{  data(\"nhanescog_2011_2014\") } # }"},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and Filter XPT File — read_and_filter_xpt","title":"Read and Filter XPT File — read_and_filter_xpt","text":"Reads XPT file, converts data frame, renames first column \"ID\", filters based unique value counts.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and Filter XPT File — read_and_filter_xpt","text":"","code":"read_and_filter_xpt(file_path, threshold = 100)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and Filter XPT File — read_and_filter_xpt","text":"file_path Path XPT file. threshold Numeric threshold filter columns based unique value counts. Default 100.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and Filter XPT File — read_and_filter_xpt","text":"data frame filtered columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and Filter XPT File — read_and_filter_xpt","text":"","code":"read_and_filter_xpt(\"data.xpt\", threshold = 50) #> Error in read_xpt(file_path): could not find function \"read_xpt\""}]
