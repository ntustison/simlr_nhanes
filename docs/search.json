[{"path":"https://github.com/stnava/simlr_nhanes/articles/simlr_nhanes.html","id":"nhanes-example","dir":"Articles","previous_headings":"","what":"NHANES example","title":"simlr: nhanes application explained","text":"five publicly available data categories : - Demographics (DEMO) - Dietary (DIET) - Examination (EXAM) - Laboratory (LAB) - Questionnaire (Q). abbreviated forms parentheses may substituted long form nhanesA commands. INDFMPIR: Poverty Income Ratio (0 = income, higher values = higher income relative poverty threshold). • INDHHIN2: Annual Household Income (categorized ranges). • DMDEDUC2: Education Level (adults 20+ years). • OCD390G: Employment Status (occupation questionnaire).","code":"# Demographic data (e.g., 2011-2012 cycle) demo_data <- nhanes('DEMO_G') cog_data <- nhanes('CFQ_G') depression_data <- nhanes('DPQ_G') sleep_data <- nhanes('SLQ_G') bp = nhanes( \"BPX_G\") bm = nhanes( \"BMX_G\") env_data <- nhanes('PBCD_G')  # Example for phthalates and blood metals  # Demographic data (e.g., 2013-2014 cycle) demo_data13 <- nhanes('DEMO_H') cog_data13<- nhanes('CFQ_H') depression_data13 <- nhanes('DPQ_H') sleep_data13 <- nhanes('SLQ_H') bp13 = nhanes( \"BPX_H\") bm13 = nhanes( \"BMX_H\") env_data13 <- nhanes('PBCD_H')  # Example for phthalates and blood metals   phdata <- nhanes('PHTHTE_G')  # Example for phthalates and blood metals phdata13 <- nhanes('PHTHTE_H')  # Example for phthalates and blood metals # pfasd <- nhanes('SSPFAS_G')  # Example for phthalates and blood metals # pfasd13 <- nhanes('SSPFAS_H')  # Example for phthalates and blood metals vocd <- nhanes('VOCWB_G')  # Example for phthalates and blood metals vocd13 <- nhanes('VOCWB_H')  # Example for phthalates and blood metals hvmt <- nhanes('UAS_G')  # Example for phthalates and blood metals hvmt13 <- nhanes('UAS_H')  # Example for phthalates and blood metals pst <- nhanes('PSTPOL_G')  # Example for phthalates and blood metals pst13 <- nhanes('PSTPOL_H')  # Example for phthalates and blood metals pfc <- nhanes('PFC_G')  # Example for phthalates and blood metals pfc13 <- nhanes('PFC_H')  # Example for phthalates and blood metals ## simpleWarning in download.file(url, tf, mode = \"wb\", quiet = TRUE): downloaded length 0 != reported length 1245 mm <- nhanes('UHM_G')  # Example for phthalates and blood metals mm13 <- nhanes('UHM_H')  # Example for phthalates and blood metals ## simpleWarning in download.file(url, tf, mode = \"wb\", quiet = TRUE): downloaded length 0 != reported length 1245 cu <- nhanes('CUSEZN_G')  # Example for phthalates and blood metals cu13 <- nhanes('CUSEZN_H')  # Example for phthalates and blood metals ig <- nhanes('IHgEM_G')  # Example for phthalates and blood metals ig13 <- nhanes('IHgEM_H')  # Example for phthalates and blood metals uh <- nhanes('UHG_G')  # Example for phthalates and blood metals uh13 <- nhanes('UHG_H')  # Example for phthalates and blood metals  di <- nhanes('DR1TOT_G')  # Example for phthalates and blood metals di13 <- nhanes('DR1TOT_H')  # Example for phthalates and blood metals   merge_nhanes_data <- function( joinid, nacol,  ...) {   datasets <- list(...)   dfout <- Reduce(function(x, y) {     left_join(x, y, by = joinid)  # Adjust \"ID\" to your common column name   }, datasets)   dfout = dfout[ !is.na( dfout[,nacol] ), ]   return( dfout ) }  merged_data <- merge_nhanes_data( 'SEQN', 'CFDDS',   merge_same_type_columns(cog_data, cog_data13),   merge_same_type_columns(demo_data,demo_data13),   merge_same_type_columns(di,di13),   merge_same_type_columns(depression_data,depression_data13),   merge_same_type_columns(sleep_data,sleep_data13),   merge_same_type_columns(bp,bp13),   merge_same_type_columns(bm,bm13),   merge_same_type_columns(env_data, env_data13),   merge_same_type_columns(phdata, phdata13),   merge_same_type_columns(vocd, vocd13),   merge_same_type_columns(cu, cu13),   merge_same_type_columns(ig, ig13),   merge_same_type_columns(uh, uh13),   mm, #  merge_same_type_columns(pst, pst13) ) #  merge_same_type_columns(pfc, pfc13) ,   merge_same_type_columns(hvmt, hvmt13))  table(merged_data$RIAGENDR) ##  ##   Male Female  ##   1469   1545 nhanescog$SEQN = nhanescog$seqn merged_data=merge(nhanescog, merged_data, by='SEQN')   depnames = c(    getNamesFromDataframe( \"SLQ\", merged_data ), #  getNamesFromDataframe( \"DPQ\", merged_data, exclusions='DPQ100' )   getNamesFromDataframe( \"DPQ\", merged_data ) ) for ( x in depnames ) merged_data[,x]=map_freq_to_numeric(merged_data,x)   # deek   idata = impute_data(merged_data) idata = idata[ idata$BPXDI1 > 20 & idata$BPXDI2 > 20 & idata$BPXDI3 > 20 & idata$BPXDI4 > 20,  ] fdata <- filter_na_columns(merged_data, max_na_percent = 0.5)  # Removes columns with >10% NAs fdata = fdata[ na2f(fdata$BPXDI1 > 20 & fdata$BPXDI2 > 20 & fdata$BPXDI3 > 20 ),  ] fdata$race = factor( fdata$race ) fdata$riagendr = factor( fdata$riagendr )  myformR =  create_formula( fdata, 'z_digit_re', c('SEQN', 'RIDAGEMN','RIDRETH3', 'CFASTAT', 'CFDCRNC', 'CFDCIT', 'CFDCST', 'CFDAPP', 'CFDAST', 'CFALANG', 'BPAARM', 'CFDCCS', 'CFDCST', 'CFDCIT', 'CFDCSR', 'CFDCIR', 'CFDCST', 'CFDCIT', 'CFDARNC', 'CFDDS', 'INDHHIN2','DMDHRBR4','INDFMIN2','PEASCST1','PEASCCT1','PEASCTM1','BPACSZ','BPXML1','URXMBP','URXMC1','URDUMMAL','SLD010H','LBXBMN','URXCNP','URXECP','URXMHH','URXMHP','URXMHNC','LBXV06','LBXV2A','LBXV3B','LBXV4C','LBXVCB','LBXVEB','LBXVCB','LBXVIPB','LBXVMC','LBXVOX','LBXVTC','LBXVTE','LBXVXY','URXUAS5','URXUAB','URXUAC','URXUMMA','URXUAS3','LBXBSE', 'RIAGENDR', 'RIDAGEYR', 'RIDRETH1', 'seqn', 'age_cat','ridreth1','ridreth3','edu_cat','cfastat','year','female','cerad_sum', # 'wtint2yr','wtmec2yr', 'BMXARML','BMXARMC','BMXHT','BMXLEG','BMXWAIST', 'INDFMPIR', 'DRABF', getNamesFromDataframe( 'DRQS',fdata), getNamesFromDataframe( 'DPD',fdata), getNamesFromDataframe( 'cfd',fdata), getNamesFromDataframe( 'z_',fdata), getNamesFromDataframe( 'low_',fdata), getNamesFromDataframe( 'sdm',fdata), # getNamesFromDataframe( 'DPQ',depression_data, exclusions=c('DPQ080','DPQ030''DPQ080',)), # getNamesFromDataframe( 'DPQ',depression_data, exclusions=c('DPQ100')), getNamesFromDataframe( 'URXUCR',fdata ), getNamesFromDataframe( 'BMXSAD',fdata ), getNamesFromDataframe( 'BPAEN',fdata ), getNamesFromDataframe( 'BPXP',fdata ), getNamesFromDataframe( 'DMD',fdata ), getNamesFromDataframe( 'DMDHHSZ',fdata ), getNamesFromDataframe( 'DRD',fdata ), getNamesFromDataframe( 'DBD',fdata ), #getNamesFromDataframe( 'DR1',fdata ), getNamesFromDataframe( 'WT',fdata ), getNamesFromDataframe( 'SDM',fdata ), getNamesFromDataframe( 'DMQ',fdata ), getNamesFromDataframe( 'FIA',fdata ), getNamesFromDataframe( 'MIA',fdata ), getNamesFromDataframe( 'AIA',fdata ), getNamesFromDataframe( 'DMDCIT',fdata ), getNamesFromDataframe( 'DMDYRS',fdata ), getNamesFromDataframe( 'RIDE',fdata ), getNamesFromDataframe( 'CFDCST',fdata ), getNamesFromDataframe( 'SDDSRVY', fdata ), getNamesFromDataframe( 'CFDCIT',fdata ), getNamesFromDataframe( 'LC',fdata ), getNamesFromDataframe( 'SI',fdata ) ) ) problematic_factors <- check_formula_factors(myformR, df) print(problematic_factors) ## character(0) idata2=impute_data(fdata ) # mdl = lm( myformR, data=idata2) # summary( mdl ) # mdl0 = lm( myformR, data=fdata) # summary( mdl0 ) ############## #### colcats=rep(\"Basic\",ncol(fdata)) colcats[ colnames(fdata) %in%  c(\"ridageyr\",\"riagendr\",\"race\",\"dmdeduc2\",\"INDFMPIR\") ]='demog' bpname=getNamesFromDataframe( \"BPX\",fdata) bmname=getNamesFromDataframe( \"BMX\",fdata) colcats[ colnames(fdata) %in%  c(bmname,bpname,\"Testosterone\",\"TotChol\",\"Diabetes\" ) ]='physical' colcats[ colnames(fdata) %in%   c(   getNamesFromDataframe( \"DPQ\", fdata ),    getNamesFromDataframe( \"SLQ\", fdata ) )  ]='mentalhealth' colcats[ colnames(fdata) %in%  getNamesFromDataframe( \"LBX\", fdata ) ]='exposures' colcats[ colnames(fdata) %in%  getNamesFromDataframe( \"DR1T\", fdata ) ]='diet' # colcats[ colnames(fdata) %in%  getNamesFromDataframe( \"cfd\", fdata )[-1] ]='digitspan' tbl=table(colcats) ############## nh_list=list() knm=names(tbl)[-1] mycc = complete.cases( fdata[ , colcats %in% knm ]) for ( k in knm ) {     print(k)     temp0=(fdata[mycc,colcats==k])     temp = data.frame(convert_to_numeric_matrix( temp0 ))     for ( j in 1:ncol(temp) ) {         hist( temp[,j], main=colnames(temp)[j]) #        Sys.sleep(1)         }     nh_list[[length(nh_list)+1]]=data.matrix( ( temp ) ) #    nh_list[[length(nh_list)]]=impute_and_report_na(nh_list[[length(nh_list)]] )     } ## [1] \"demog\" ## [1] \"diet\" ## [1] \"exposures\" ## [1] \"mentalhealth\" ## [1] \"physical\" names(nh_list)=knm ##### ################################################################################ regs <- regularizeSimlr(nh_list,fraction=0.15,sigma=rep(1.0,length(nh_list))) # regs <- regularizeSimlr(nh_list) wdemog=which( knm == 'demog') for ( wdemog in 1:length(nh_list) ) regs[[ wdemog]]=diag( ncol(nh_list[[wdemog]])) initu=initializeSimlr( nh_list, k=min_columns_list(nh_list), jointReduction=TRUE ) resultNH <- simlr( nh_list,          iterations=300,         sparsenessQuantiles=rep(0.8,length(nh_list)),         positivities=rep(\"positive\",length(nh_list)),          energyType='regression', mixAlg='ica', #        energyType='cca', mixAlg='pca', #        scale=c( \"whiten\", \"np\"),         scale=c(\"centerAndScale\", \"np\"), #        scale=c( \"robust\",  \"np\" ),         constraint=\"Stiefelx10x10\",         initialUMatrix=initu, verbose=T ) ## [1] \"Stiefel\" \"10\"      \"10\"      ## [1] \"     <0> BUILD-V <0> BUILD-V <0> BUILD-V <0> BUILD-V <0>    \" ## [1] \"initialDataTerm: 1.0890740516988  <o> mixer: ica  <o> E:  regression\" ## [1] \"Iteration: 1 bestEv: 5.63524952807998 bestIt: 1 CE: 5.63524952807998 featOrth: 0.049595830147726\" ## [1] \"Iteration: 2 bestEv: 0.423522810057676 bestIt: 2 CE: 0.423522810057676 featOrth: 0.0315172228095127\" ## [1] \"Iteration: 3 bestEv: 0.0166226779968481 bestIt: 3 CE: 0.0166226779968481 featOrth: 0.000459145467296793\" ## [1] \"Iteration: 4 bestEv: 0.0141073576765037 bestIt: 4 CE: 0.0141073576765037 featOrth: 0.000324307937160679\" ## [1] \"Iteration: 5 bestEv: 0.0140951165631652 bestIt: 5 CE: 0.0140951165631652 featOrth: 0.000326385423645034\" ## [1] \"Iteration: 6 bestEv: 0.0126977855438986 bestIt: 6 CE: 0.0126977855438986 featOrth: 0.000225233882824743\" ## [1] \"Iteration: 7 bestEv: 0.0126131001096133 bestIt: 7 CE: 0.0126131001096133 featOrth: 0.000214964287811514\" ## [1] \"Iteration: 8 bestEv: 0.011927772764599 bestIt: 8 CE: 0.011927772764599 featOrth: 0.000196075197251433\" ## [1] \"Iteration: 9 bestEv: 0.0102917930327512 bestIt: 9 CE: 0.0102917930327512 featOrth: 6.30777933574503e-05\" ## [1] \"Iteration: 10 bestEv: 0.0101179647384271 bestIt: 10 CE: 0.0101179647384271 featOrth: 5.66386625748901e-05\" ## [1] \"Iteration: 11 bestEv: 0.0101179647384271 bestIt: 10 CE: 0.0101251355570842 featOrth: 5.49533810592744e-05\" ## [1] \"Iteration: 12 bestEv: 0.010037138050642 bestIt: 12 CE: 0.010037138050642 featOrth: 4.70834707646448e-05\" ## [1] \"Iteration: 13 bestEv: 0.010037138050642 bestIt: 12 CE: 0.0100643596389671 featOrth: 4.65529530530676e-05\" ## [1] \"Iteration: 14 bestEv: 0.00983287368849932 bestIt: 14 CE: 0.00983287368849932 featOrth: 3.16031408442645e-05\" ## [1] \"Iteration: 15 bestEv: 0.00941177631481232 bestIt: 15 CE: 0.00941177631481232 featOrth: 3.36447276257218e-06\" ## [1] \"Iteration: 16 bestEv: 0.00941177631481232 bestIt: 15 CE: 0.00951053495347653 featOrth: 3.39509882669611e-06\" ## [1] \"Iteration: 17 bestEv: 0.00941177631481232 bestIt: 15 CE: 0.00951111319916607 featOrth: 3.13653875312184e-06\" ## [1] \"Iteration: 18 bestEv: 0.00935753027137603 bestIt: 18 CE: 0.00935753027137603 featOrth: 3.07041388089175e-06\" ## [1] \"Iteration: 19 bestEv: 0.00935753027137603 bestIt: 18 CE: 0.00946172546193925 featOrth: 2.5038567094812e-06\" ## [1] \"Iteration: 20 bestEv: 0.00935753027137603 bestIt: 18 CE: 0.0094540016472056 featOrth: 2.46794602885008e-06\" ## [1] \"Iteration: 21 bestEv: 0.00935753027137603 bestIt: 18 CE: 0.00940943014356957 featOrth: 2.46511488981337e-06\" ## [1] \"Iteration: 22 bestEv: 0.00935753027137603 bestIt: 18 CE: 0.00937737236271678 featOrth: 2.44106462713996e-06\" ## [1] \"Iteration: 23 bestEv: 0.00935753027137603 bestIt: 18 CE: 0.00937737236271678 featOrth: 2.44106462713996e-06\" ## [1] \"Iteration: 24 bestEv: 0.00935753027137603 bestIt: 18 CE: 0.00937737236271678 featOrth: 2.44106462713996e-06\" ##################################################### projlist=list() mysimk=2 for ( k in 1:length(nh_list)) {     rownames(resultNH$v[[k]])=colnames( nh_list[[k]])     ux=data.frame(nh_list[[k]] %*% abs(resultNH$v[[k]][,1:mysimk]))     colnames(ux)=paste0(names(nh_list)[k],1:ncol(ux))     projlist[[length(projlist)+1]]=ux } simdf=simdf2=dplyr::bind_cols(projlist) cognames=c(\"cerad_sum\",\"cfdast\",\"cfdds\") cognames = c(   \"z_cerad_re\", \"z_animal_re\",     \"z_digit_re\",      \"z_delayed_re\",    \"z_global_re\" #  \"z_cerad_age\", \"z_animal_age\",     \"z_digit_age\",      \"z_delayed_age\",    \"z_global_age\", #  \"z_cerad_edu\", \"z_animal_edu\",     \"z_digit_edu\",      \"z_delayed_edu\",    \"z_global_edu\" ) simdf2[,cognames]=fdata[mycc,cognames] for ( kk in 1:length(cognames)) {   myform = paste0( cognames[kk],\" ~ \",paste0( colnames(simdf), collapse='+'))   mdl = lm( myform, data=simdf2 )   print( summary( mdl ) )   print( cognames[kk])   Sys.sleep(3) } ##  ## Call: ## lm(formula = myform, data = simdf2) ##  ## Residuals: ##     Min      1Q  Median      3Q     Max  ## -3.4576 -0.5967  0.0339  0.6473  2.3741  ##  ## Coefficients: ##                 Estimate Std. Error t value Pr(>|t|)     ## (Intercept)   -8.765e-02  3.433e-01  -0.255   0.7986     ## demog1         4.636e+03  1.010e+03   4.590 5.10e-06 *** ## demog2         4.914e+05  4.411e+05   1.114   0.2656     ## diet1          2.574e+02  2.197e+02   1.172   0.2416     ## diet2          1.294e+03  7.306e+02   1.772   0.0768 .   ## exposures1     9.000e+04  1.172e+05   0.768   0.4428     ## exposures2     3.638e+04  6.582e+04   0.553   0.5806     ## mentalhealth1 -1.199e+04  1.904e+05  -0.063   0.9498     ## mentalhealth2 -1.793e+05  4.219e+05  -0.425   0.6709     ## physical1     -1.259e+05  2.262e+04  -5.568 3.45e-08 *** ## physical2      2.821e+05  4.824e+04   5.847 7.13e-09 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Residual standard error: 0.8946 on 858 degrees of freedom ##   (12 observations deleted due to missingness) ## Multiple R-squared:  0.08425,    Adjusted R-squared:  0.07357  ## F-statistic: 7.893 on 10 and 858 DF,  p-value: 3.236e-12 ##  ## [1] \"z_cerad_re\" ##  ## Call: ## lm(formula = myform, data = simdf2) ##  ## Residuals: ##     Min      1Q  Median      3Q     Max  ## -2.7804 -0.6862 -0.0637  0.6247  3.3807  ##  ## Coefficients: ##                 Estimate Std. Error t value Pr(>|t|)     ## (Intercept)    6.355e-01  3.708e-01   1.714 0.086912 .   ## demog1         6.978e+03  1.086e+03   6.423 2.22e-10 *** ## demog2        -2.040e+06  4.745e+05  -4.299 1.91e-05 *** ## diet1          9.081e+01  2.287e+02   0.397 0.691416     ## diet2          2.213e+03  7.844e+02   2.821 0.004898 **  ## exposures1     7.651e+04  1.257e+05   0.609 0.542839     ## exposures2     1.733e+04  7.132e+04   0.243 0.808029     ## mentalhealth1 -3.596e+05  2.051e+05  -1.753 0.079912 .   ## mentalhealth2 -8.861e+04  4.558e+05  -0.194 0.845914     ## physical1     -8.636e+04  2.445e+04  -3.532 0.000435 *** ## physical2      1.883e+05  5.214e+04   3.611 0.000323 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Residual standard error: 0.9581 on 850 degrees of freedom ##   (20 observations deleted due to missingness) ## Multiple R-squared:  0.1165, Adjusted R-squared:  0.1062  ## F-statistic: 11.21 on 10 and 850 DF,  p-value: < 2.2e-16 ##  ## [1] \"z_animal_re\" ##  ## Call: ## lm(formula = myform, data = simdf2) ##  ## Residuals: ##      Min       1Q   Median       3Q      Max  ## -2.72944 -0.64016 -0.02586  0.57247  3.13672  ##  ## Coefficients: ##                 Estimate Std. Error t value Pr(>|t|)     ## (Intercept)   -1.388e-01  3.414e-01  -0.406   0.6845     ## demog1         1.151e+04  1.005e+03  11.452  < 2e-16 *** ## demog2        -2.772e+05  4.371e+05  -0.634   0.5261     ## diet1          3.919e+02  2.120e+02   1.849   0.0648 .   ## diet2          1.187e+03  7.251e+02   1.637   0.1019     ## exposures1     2.054e+05  1.169e+05   1.757   0.0793 .   ## exposures2    -7.970e+04  6.545e+04  -1.218   0.2236     ## mentalhealth1 -7.878e+04  1.888e+05  -0.417   0.6765     ## mentalhealth2 -2.113e+05  4.211e+05  -0.502   0.6160     ## physical1     -1.085e+05  2.254e+04  -4.815 1.73e-06 *** ## physical2      2.416e+05  4.811e+04   5.022 6.19e-07 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Residual standard error: 0.8946 on 870 degrees of freedom ## Multiple R-squared:  0.2035, Adjusted R-squared:  0.1943  ## F-statistic: 22.23 on 10 and 870 DF,  p-value: < 2.2e-16 ##  ## [1] \"z_digit_re\" ##  ## Call: ## lm(formula = myform, data = simdf2) ##  ## Residuals: ##      Min       1Q   Median       3Q      Max  ## -2.77745 -0.58617  0.04431  0.70828  2.01525  ##  ## Coefficients: ##                 Estimate Std. Error t value Pr(>|t|)     ## (Intercept)   -2.996e-01  3.543e-01  -0.846 0.398001     ## demog1         3.740e+03  1.043e+03   3.586 0.000355 *** ## demog2         3.013e+05  4.553e+05   0.662 0.508330     ## diet1          3.597e+02  2.192e+02   1.641 0.101111     ## diet2          5.214e+02  7.535e+02   0.692 0.489135     ## exposures1     5.296e+04  1.210e+05   0.438 0.661652     ## exposures2     9.918e+04  6.797e+04   1.459 0.144904     ## mentalhealth1  5.143e+04  1.960e+05   0.262 0.793115     ## mentalhealth2 -3.013e+05  4.357e+05  -0.691 0.489440     ## physical1     -1.051e+05  2.334e+04  -4.501 7.69e-06 *** ## physical2      2.658e+05  4.981e+04   5.336 1.21e-07 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Residual standard error: 0.9239 on 859 degrees of freedom ##   (11 observations deleted due to missingness) ## Multiple R-squared:  0.06042,    Adjusted R-squared:  0.04948  ## F-statistic: 5.524 on 10 and 859 DF,  p-value: 5.324e-08 ##  ## [1] \"z_delayed_re\" ##  ## Call: ## lm(formula = myform, data = simdf2) ##  ## Residuals: ##    Min     1Q Median     3Q    Max  ## -6.619 -1.487  0.077  1.508  7.500  ##  ## Coefficients: ##                 Estimate Std. Error t value Pr(>|t|)     ## (Intercept)    5.887e-01  8.277e-01   0.711   0.4772     ## demog1         2.310e+04  2.425e+03   9.523  < 2e-16 *** ## demog2        -2.021e+06  1.060e+06  -1.906   0.0570 .   ## diet1          5.664e+02  5.284e+02   1.072   0.2840     ## diet2          4.494e+03  1.754e+03   2.563   0.0106 *   ## exposures1     3.762e+05  2.805e+05   1.341   0.1802     ## exposures2    -5.841e+03  1.597e+05  -0.037   0.9708     ## mentalhealth1 -4.988e+05  4.590e+05  -1.087   0.2774     ## mentalhealth2 -4.639e+05  1.017e+06  -0.456   0.6485     ## physical1     -3.225e+05  5.462e+04  -5.904 5.12e-09 *** ## physical2      7.106e+05  1.164e+05   6.105 1.57e-09 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Residual standard error: 2.136 on 846 degrees of freedom ##   (24 observations deleted due to missingness) ## Multiple R-squared:  0.1786, Adjusted R-squared:  0.1688  ## F-statistic: 18.39 on 10 and 846 DF,  p-value: < 2.2e-16 ##  ## [1] \"z_global_re\" ####################### for ( k in knm ) {   print(k)   print( interpret_simlr_vector2( resultNH$v[[k]], 1, n2show=3, shortnames=F ) )   print( interpret_simlr_vector2( resultNH$v[[k]], 2, n2show=3, shortnames=F ) ) } ## [1] \"demog\" ##    INDFMPIR      race_1  ## 1.000000000 0.007899114  ## riagendr_2   ridageyr  ## 1.00000000 0.03034381  ## [1] \"diet\" ##  DR1TP226  DR1TP205  DR1TSELE  ## 1.0000000 0.8320150 0.5024791  ##  DR1TS080  DR1TPFAT    DR1TFF  ## 1.0000000 0.8704197 0.8427415  ## [1] \"exposures\" ##     LBXIHG     LBXTHG  ## 1.00000000 0.02937689  ##    LBXBCD    LBXBPB  ## 1.0000000 0.3071669  ## [1] \"mentalhealth\" ##     DPQ020     DPQ040     DPQ050  ## 1.00000000 0.27580993 0.03502688  ##     DPQ040     DPQ100     DPQ060  ## 1.00000000 0.89331099 0.03260283  ## [1] \"physical\" ##  BMXWAIST   BMXSAD1   BMXSAD2  ## 1.0000000 0.9307866 0.8276917  ##     BMXBMI    BMXARMC    BMXSAD2  ## 1.00000000 0.35673771 0.05068375 ########################################################################################## # https://wwwn.cdc.gov/nchs/nhanes/search/default.aspx # > interpret_simlr_vector2( resultNH$v[['exposures']], 1, n2show=5, shortnames=F ) #   LBXVBZ    LBXVOX    LBXVFN    LBX2DF  # benzene, Xylene, furan, Dimethylfuran # 1.0000000 0.3346728 0.1868323 0.0586727  ########################################################################################## ###"},{"path":"https://github.com/stnava/simlr_nhanes/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Brian Avants. Maintainer.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"c, \"Avants\", role=c, ) e (2025). simlr.nhanes: SiMLR example using NHANES data. R package version 1.0.0, https://github.com/stnava/simlr_nhanes.","code":"@Manual{,   title = {simlr.nhanes: SiMLR example using NHANES data},   author = {{c} and {\"Avants\"} and {role=c} and email=\"stnava@gmail.com\") )},   year = {2025},   note = {R package version 1.0.0},   url = {https://github.com/stnava/simlr_nhanes}, }"},{"path":"https://github.com/stnava/simlr_nhanes/index.html","id":"simlr_nhanes","dir":"","previous_headings":"","what":"Helper package for simlr NHANES example analyses","title":"Helper package for simlr NHANES example analyses","text":"documentation page ","code":""},{"path":"https://github.com/stnava/simlr_nhanes/index.html","id":"simlr-nhanes","dir":"","previous_headings":"","what":"SiMLR NHANES","title":"Helper package for simlr NHANES example analyses","text":"TODO Data sources: NHANES raw CAPRA curated data nhanesA Code sources: haven ","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Formula Factors — check_formula_factors","title":"Check Formula Factors — check_formula_factors","text":"Identifies factor variables formula fewer two levels.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Formula Factors — check_formula_factors","text":"","code":"check_formula_factors(formula, dataframe)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Formula Factors — check_formula_factors","text":"formula formula object. dataframe data frame containing variables formula.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Formula Factors — check_formula_factors","text":"vector factor variable names fewer two levels.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Formula Factors — check_formula_factors","text":"","code":"check_formula_factors(mpg ~ cyl + gear, mtcars) #> character(0)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"Converts data frame categorical numeric columns numeric matrix, using one-hot encoding categorical variables.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"","code":"convert_to_numeric_matrix(df)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"df data frame.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"numeric matrix.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"","code":"df <- data.frame(a = c(1, 2), b = c(\"yes\", \"no\")) convert_to_numeric_matrix(df) #>      a b_no b_yes #> [1,] 1    0     1 #> [2,] 2    1     0"},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Count Unique Values and Filter Columns — count_unique_values","title":"Count Unique Values and Filter Columns — count_unique_values","text":"Counts unique values column data frame retains columns exceeding specified threshold.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count Unique Values and Filter Columns — count_unique_values","text":"","code":"count_unique_values(df, threshold)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count Unique Values and Filter Columns — count_unique_values","text":"df data frame. threshold integer specifying minimum number unique values retain column.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count Unique Values and Filter Columns — count_unique_values","text":"data frame filtered columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count Unique Values and Filter Columns — count_unique_values","text":"","code":"df <- data.frame(a = c(1, 1, 2), b = c(\"x\", \"y\", \"z\")) count_unique_values(df, 1) #> a : 2 unique values #> b : 3 unique values #>   a b #> 1 1 x #> 2 1 y #> 3 2 z"},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Regression Formula — create_formula","title":"Create Regression Formula — create_formula","text":"Creates regression formula data frame, excluding specified columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Regression Formula — create_formula","text":"","code":"create_formula(dataframe, outcome, exclusions)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Regression Formula — create_formula","text":"dataframe input data frame. outcome outcome variable. exclusions vector columns exclude formula.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Regression Formula — create_formula","text":"formula object regression.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Regression Formula — create_formula","text":"","code":"create_formula(mtcars, \"mpg\", exclusions = c(\"cyl\", \"gear\")) #> mpg ~ disp + hp + drat + wt + qsec + vs + am + carb #> <environment: 0x15956c9d8>"},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Columns with High NA Percentage — filter_na_columns","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"Filters columns data frame higher percentage NA values specified threshold.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"","code":"filter_na_columns(df, max_na_percent = 0.2)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"df data frame. max_na_percent Maximum allowed proportion NA values per column. Default 0.2.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"data frame filtered columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"","code":"filter_na_columns(data.frame(a = c(1, NA, 3), b = c(NA, NA, 3)), max_na_percent = 0.5) #>    a #> 1  1 #> 2 NA #> 3  3"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute Missing Values and Report NA Counts — impute_and_report_na","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"function imputes missing values matrix column means reports count missing values per column.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"","code":"impute_and_report_na(mat)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"mat numeric matrix.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"matrix imputed values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"","code":"mat <- matrix(c(1, NA, 3, 4, 5, NA), ncol = 2) impute_and_report_na(mat) #> No missing values detected. #>      [,1] [,2] #> [1,]    1    4 #> [2,]   NA    5 #> [3,]    3   NA"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute Missing Data — impute_data","title":"Impute Missing Data — impute_data","text":"Imputes missing values data frame. Numeric columns imputed median, categorical columns frequent category.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute Missing Data — impute_data","text":"","code":"impute_data(df)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute Missing Data — impute_data","text":"df data frame missing values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute Missing Data — impute_data","text":"data frame imputed values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute Missing Data — impute_data","text":"","code":"impute_data(data.frame(a = c(1, NA, 3), b = c(\"x\", \"y\", NA))) #>   a b #> 1 1 x #> 2 2 y #> 3 3 x"},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"Maps specific frequency categories numeric values, error handling invalid categories.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"","code":"map_freq_to_numeric(df, colname)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"df data frame containing column mapped. colname name column mapped.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"numeric vector mapped values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"","code":"map_freq_to_numeric(data.frame(freq = c(\"Not at all\", \"Several days\")), \"freq\") #> [1] 0 1"},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"function generates new matrix applying random linear transformation given latent matrix adding Gaussian noise.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"","code":"matrix_from_latent(latent_matrix, target_p, noise_sd = 0.3)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"latent_matrix numeric matrix representing latent structure (n x k). target_p integer specifying number columns output matrix. noise_sd numeric value indicating standard deviation Gaussian noise added. Default 0.3.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"numeric matrix dimensions (n x target_p), generated latent matrix random linear transformation added Gaussian noise.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"","code":"latent <- matrix(rnorm(20), nrow = 5, ncol = 4) generated_matrix <- matrix_from_latent(latent, target_p = 3, noise_sd = 0.2) print(generated_matrix) #>            [,1]        [,2]       [,3] #> [1,] -0.8420428 -2.26384990 -1.4360201 #> [2,] -1.4226564  0.01670062  2.9901238 #> [3,] -3.9410985 -6.29693119  4.4003814 #> [4,]  2.4102664  1.54497778 -0.5047176 #> [5,] -1.5365092  0.60855535  0.2409585"},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"Merges columns type two data frames based common column names.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"","code":"merge_same_type_columns(df1, df2)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"df1 First data frame. df2 Second data frame.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"merged data frame containing matching columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"","code":"merge_same_type_columns(data.frame(a = 1:3), data.frame(a = 4:6)) #> Error in bind_rows(df1[, matching_columns, drop = FALSE], df2[, matching_columns,     drop = FALSE]): could not find function \"bind_rows\""},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"function loops list matrices returns minimum number columns found across matrices list.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"","code":"min_columns_list(matrix_list)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"matrix_list list containing matrices. Non-matrix elements ignored warning.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"integer representing minimum number columns across matrices list.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"","code":"mat1 <- matrix(1:6, nrow = 2) mat2 <- matrix(1:12, nrow = 3) mat3 <- matrix(1:4, nrow = 2) min_columns_list(list(mat1, mat2, mat3)) # Returns 2 #> [1] 2"},{"path":"https://github.com/stnava/simlr_nhanes/reference/nhanescog.html","id":null,"dir":"Reference","previous_headings":"","what":"NHANES cognition data — nhanescog","title":"NHANES cognition data — nhanescog","text":"NHANES cognition data","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/nhanescog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NHANES cognition data — nhanescog","text":"","code":"nhanescog"},{"path":"https://github.com/stnava/simlr_nhanes/reference/nhanescog.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"NHANES cognition data — nhanescog","text":"Curated nhanes cognition data CAPRA","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/nhanescog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NHANES cognition data — nhanescog","text":"","code":"if (FALSE) { # \\dontrun{  data(\"nhanescog_2011_2014\") } # }"},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and Filter XPT File — read_and_filter_xpt","title":"Read and Filter XPT File — read_and_filter_xpt","text":"Reads XPT file, converts data frame, renames first column \"ID\", filters based unique value counts.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and Filter XPT File — read_and_filter_xpt","text":"","code":"read_and_filter_xpt(file_path, threshold = 100)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and Filter XPT File — read_and_filter_xpt","text":"file_path Path XPT file. threshold Numeric threshold filter columns based unique value counts. Default 100.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and Filter XPT File — read_and_filter_xpt","text":"data frame filtered columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and Filter XPT File — read_and_filter_xpt","text":"","code":"read_and_filter_xpt(\"data.xpt\", threshold = 50) #> Error in read_xpt(file_path): could not find function \"read_xpt\""}]
