[{"path":"https://github.com/stnava/simlr_nhanes/articles/simlr_nhanes.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"simlr: nhanes application explained","text":"extract distinct related types data NHANES. data types : demographics: age, sex, educational attainment; diet: measurements nutritional status; physical: blood pressure physical measurements; mental health: outcomes Patient Health Questionnaire-9; environmental exposures: metals related environmental toxins. combined SiMLR unsupervised dimensionality reduction. resulting low-dimensional representations used joint prediction cognitive outcomes. 400 subjects measurements available along environmental exposures.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/articles/simlr_nhanes.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"simlr: nhanes application explained","text":"Load relevant librarys.","code":"# Load necessary libraries library(ggplot2) library(ggfortify) library(ellipse) ##  ## Attaching package: 'ellipse' ## The following object is masked from 'package:graphics': ##  ##     pairs library(ANTsR) ## Warning: replacing previous import 'stats::filter' by 'dplyr::filter' when ## loading 'ANTsR' ## ANTsR 0.6.1 ## Environment variables set either in .Renviron or with a seed (e.g. XXX):  ## Sys.setenv(ANTS_RANDOM_SEED = XXX) ## Sys.setenv(ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS = 1) ## may influence reproducibility in some methods. See ## https://github.com/ANTsX/ANTs/wiki/antsRegistration-reproducibility-issues ## for more information.Also see *repro methods in antsRegistration. ##  ## Attaching package: 'ANTsR' ## The following objects are masked from 'package:stats': ##  ##     sd, var ## The following objects are masked from 'package:base': ##  ##     all, any, apply, max, min, prod, range, sum library(subtyper) ## Warning: replacing previous import 'ciTools::add_ci' by 'gtsummary::add_ci' ## when loading 'subtyper' ## Warning: replacing previous import 'dplyr::as_data_frame' by ## 'igraph::as_data_frame' when loading 'subtyper' ## Warning: replacing previous import 'dplyr::groups' by 'igraph::groups' when ## loading 'subtyper' ## Warning: replacing previous import 'dplyr::union' by 'igraph::union' when ## loading 'subtyper' ## Warning: replacing previous import 'gtsummary::add_ci' by 'ciTools::add_ci' ## when loading 'subtyper' ## Registered S3 methods overwritten by 'fmsb': ##   method    from ##   print.roc pROC ##   plot.roc  pROC ## Warning: replacing previous import 'gt::gt' by 'globaltest::gt' when loading ## 'subtyper' ## Warning: replacing previous import 'dplyr::rename' by 'plyr::rename' when ## loading 'subtyper' library( nhanesA ) library( simlr.nhanes ) library( dplyr ) ##  ## Attaching package: 'dplyr' ## The following object is masked from 'package:Biobase': ##  ##     combine ## The following objects are masked from 'package:BiocGenerics': ##  ##     combine, intersect, setdiff, union ## The following objects are masked from 'package:stats': ##  ##     filter, lag ## The following objects are masked from 'package:base': ##  ##     intersect, setdiff, setequal, union data(\"nhanescog_2011_2014\")"},{"path":"https://github.com/stnava/simlr_nhanes/articles/simlr_nhanes.html","id":"nhanes-example","dir":"Articles","previous_headings":"","what":"NHANES example","title":"simlr: nhanes application explained","text":"download data fly merge together using embedded data well nhanesA package. Define categories data can used identify low-dimensional representation based SiMLR objective.      Run methods using reasonable defaults recommended prior work. Apply learned representations data matrices.","code":"## simpleWarning in download.file(url, tf, mode = \"wb\", quiet = TRUE): downloaded length 0 != reported length 1245 ##  ##  ## simpleWarning in download.file(url, tf, mode = \"wb\", quiet = TRUE): downloaded length 0 != reported length 1245 ##  ##   Male Female  ##   1469   1545 ## character(0) #################################### colcats=rep(\"Basic\",ncol(fdata)) colcats[ colnames(fdata) %in%  c(\"ridageyr\",\"riagendr\",\"race\",\"dmdeduc2\",\"INDFMPIR\") ]='demog' bpname=getNamesFromDataframe( \"BPX\",fdata) bmname=getNamesFromDataframe( \"BMX\",fdata) colcats[ colnames(fdata) %in%  c(bmname,bpname,\"Testosterone\",\"TotChol\",\"Diabetes\" ) ]='physical' colcats[ colnames(fdata) %in%   c(   getNamesFromDataframe( \"DPQ\", fdata ),    getNamesFromDataframe( \"SLQ\", fdata ) )  ]='mentalhealth' x=c('LC','.x','.y','URDUMMAL','LBXVDE','LBX4CE') colcats[ colnames(fdata) %in%  getNamesFromDataframe( \"LBX\", fdata, exclusions=x ) ]='exposures' colcats[ colnames(fdata) %in%  getNamesFromDataframe( \"LBD\", fdata, exclusions=x ) ]='exposures' #colcats[ colnames(fdata) %in%  getNamesFromDataframe( \"URX\", fdata, exclusions=x ) ]='exposures' # colcats[ colnames(fdata) %in%  getNamesFromDataframe( \"URD\", fdata, exclusions=x ) ]='exposures' # colcats[ colnames(fdata) %in%  getNamesFromDataframe( \"LBC\", fdata, exclusions=x ) ]='exposures' colcats[ colnames(fdata) %in%  getNamesFromDataframe( \"DR1T\", fdata ) ]='diet' # colcats[ colnames(fdata) %in%  getNamesFromDataframe( \"cfd\", fdata )[-1] ]='digitspan' tbl=table(colcats) ############## nh_list=list() knm=names(tbl)[-1] mycc = complete.cases( fdata[ , colcats %in% 'demog' ]) mycc = complete.cases( fdata[ , colcats %in% 'exposures' ]) table(mycc) ## mycc ## FALSE  TRUE  ##  2135   462 doimp=TRUE for ( k in knm ) {     print(k)     if ( doimp ) {       temp0 = impute_data( fdata[ ,colcats==k] )     } else temp0=(fdata[mycc,colcats==k])     temp = data.frame(convert_to_numeric_matrix( temp0 ))     vv=apply( temp, 2, FUN=var )     temp = temp[ , vv > 0 ]     if ( k %in% c('exposures','diet') ) {       nn = colnames(temp)       for (  jj in 1:ncol(temp) ) temp = truncatehi(temp, nn[jj], t = 10, removeit = FALSE) #      temp = robustMatrixTransform( temp )       colnames(temp) = nn       temp = remove_perfectly_correlated( temp )     }     for ( j in 1:ncol(temp) ) {         hist( temp[,j], main=colnames(temp)[j]) #        Sys.sleep(1)         }     nh_list[[length(nh_list)+1]]=data.matrix( ( temp ) )     print(colnames(nh_list[[length(nh_list)]])) #    nh_list[[length(nh_list)]]=impute_and_report_na(nh_list[[length(nh_list)]] )     } ## [1] \"demog\" ## [1] \"ridageyr\"   \"dmdeduc2\"   \"INDFMPIR\"   \"riagendr_1\" \"riagendr_2\" ## [6] \"race_1\"     \"race_2\"     \"race_3\"     \"race_4\"     ## [1] \"dietommunity.supply\"      \"DR1TWS_Well.or.rain.cistern\"  ## [69] \"DR1TWS_Spring\"                \"DR1TWS_Don.t.drink.tap.water\" ## [71] \"DR1TWS_Don.t.know\"            ## [1] \"exposures\" ##  [1] \"LBXBPB\"   \"LBDBPBSI\" \"LBXBCD\"   \"LBXTHG\"   \"LBDTHGSI\" \"LBXBSE\"   ##  [7] \"LBDBSESI\" \"LBXBMN\"   \"LBX2DF\"   \"LBXV06\"   \"LBXV2A\"   \"LBXV3B\"   ## [13] \"LBXV4C\"   \"LBXVBZ\"   \"LBXVCB\"   \"LBXVDB\"   \"LBXVEB\"   \"LBXVFN\"   ## [19] \"LBXVOX\"   \"LBXVTC\"   \"LBXVTE\"   \"LBXVXY\"   \"LBXSCU\"   \"LBXSSE\"   ## [25] \"LBDSSESI\" \"LBXSZN\"   \"LBXIHG\"   \"LBDIHGSI\" \"LBXBGE\"   \"LBXBGM\"   ## [1] \"mentalhealth\" ##  [1] \"DPQ010\" \"DPQ020\" \"DPQ030\" \"DPQ040\" \"DPQ050\" \"DPQ060\" \"DPQ070\" \"DPQ080\" ##  [9] \"DPQ090\" \"DPQ100\" \"SLQ050\" \"SLQ060\" ## [1] \"physical\" ##  [1] \"BPXPLS\"            \"BPXML1\"            \"BPXSY1\"            ##  [4] \"BPXDI1\"            \"BPXSY2\"            \"BPXDI2\"            ##  [7] \"BPXSY3\"            \"BPXDI3\"            \"BMXWT\"             ## [10] \"BMXHT\"             \"BMXBMI\"            \"BMXLEG\"            ## [13] \"BMXARML\"           \"BMXARMC\"           \"BMXWAIST\"          ## [16] \"BMXSAD1\"           \"BMXSAD2\"           \"BPXPULS_Regular\"   ## [19] \"BPXPULS_Irregular\" \"BPXPTY_Radial\"     \"BPXPTY_Brachial\" names(nh_list)=knm ##### ################################################################################ # regs <- regularizeSimlr(nh_list,fraction=0.15,sigma=rep(1.0,length(nh_list))) # regs=list() wdemog=which( knm == 'demog') for ( wdemog in 1:length(nh_list) ) regs[[ wdemog]]=diag( ncol(nh_list[[wdemog]])) # regs = regularizeSimlr(nh_list) names( regs ) = knm[ -1 ] initu=initializeSimlr( nh_list, k=round(max_columns_list(nh_list)), jointReduction=TRUE ) ########################### if ( ! exists(\"resultNH\") ) {   resultNH <- simlr( nh_list,          iterations=100,         sparsenessQuantiles=rep(0.5,length(nh_list)),         positivities=rep(\"positive\",length(nh_list)),          energyType='regression', mixAlg='ica', #        energyType='cca', mixAlg='pca',         scale=c(\"centerAndScale\",  \"np\"), #        scale=c(\"whiten\", \"np\"),         constraint=\"Stiefelx10x10\",         initialUMatrix=initu, verbose=T )   } ## [1] \"Stiefel\" \"10\"      \"10\"      ## [1] \"     <0> BUILD-V <0> BUILD-V <0> BUILD-V <0> BUILD-V <0>    \" ## [1] \"initialDataTerm: 2.51017494350807  <o> mixer: ica  <o> E:  regression\" ## [1] \"Iteration: 1 bestEv: 14.1720223919346 bestIt: 1 CE: 14.1720223919346 featOrth: 0.0997937029176957\" ## [1] \"Iteration: 2 bestEv: 1.94843283352136 bestIt: 2 CE: 1.94843283352136 featOrth: 0.0688726338075352\" ## [1] \"Iteration: 3 bestEv: 0.638654439879271 bestIt: 3 CE: 0.638654439879271 featOrth: 0.0618242914512352\" ## [1] \"Iteration: 4 bestEv: 0.524940285261373 bestIt: 4 CE: 0.524940285261373 featOrth: 0.0515910117513421\" ## [1] \"Iteration: 5 bestEv: 0.497488786674734 bestIt: 5 CE: 0.497488786674734 featOrth: 0.0492611700955596\" ## [1] \"Iteration: 6 bestEv: 0.430614805604086 bestIt: 6 CE: 0.430614805604086 featOrth: 0.0426325329192561\" ## [1] \"Iteration: 7 bestEv: 0.428168486828324 bestIt: 7 CE: 0.428168486828324 featOrth: 0.0402476322614494\" ## [1] \"Iteration: 8 bestEv: 0.397828526803514 bestIt: 8 CE: 0.397828526803514 featOrth: 0.0377313221055792\" ## [1] \"Iteration: 9 bestEv: 0.385449195905981 bestIt: 9 CE: 0.385449195905981 featOrth: 0.0360408158437857\" ## [1] \"Iteration: 10 bestEv: 0.375260830119813 bestIt: 10 CE: 0.375260830119813 featOrth: 0.0355057282242329\" ## [1] \"Iteration: 11 bestEv: 0.368106021283093 bestIt: 11 CE: 0.368106021283093 featOrth: 0.0347843752848464\" ## [1] \"Iteration: 12 bestEv: 0.333983002641932 bestIt: 12 CE: 0.333983002641932 featOrth: 0.0326606483316205\" ## [1] \"Iteration: 13 bestEv: 0.331071987892403 bestIt: 13 CE: 0.331071987892403 featOrth: 0.0324532354722316\" ## [1] \"Iteration: 14 bestEv: 0.331071987892403 bestIt: 13 CE: 0.336139964002688 featOrth: 0.0317291774235265\" ## [1] \"Iteration: 15 bestEv: 0.331071987892403 bestIt: 13 CE: 0.33445230975592 featOrth: 0.0315009923765108\" ## [1] \"Iteration: 16 bestEv: 0.331071987892403 bestIt: 13 CE: 0.33209804422964 featOrth: 0.0312584583240931\" ## [1] \"Iteration: 17 bestEv: 0.331054865522649 bestIt: 17 CE: 0.331054865522649 featOrth: 0.0311688910675321\" ## [1] \"Iteration: 18 bestEv: 0.330820603851131 bestIt: 18 CE: 0.330820603851131 featOrth: 0.0311390096404302\" ## [1] \"Iteration: 19 bestEv: 0.307315004890572 bestIt: 19 CE: 0.307315004890572 featOrth: 0.0301511796426144\" ## [1] \"Iteration: 20 bestEv: 0.30474350956543 bestIt: 20 CE: 0.30474350956543 featOrth: 0.0298966195439327\" ## [1] \"Iteration: 21 bestEv: 0.304274036901479 bestIt: 21 CE: 0.304274036901479 featOrth: 0.0298455231985655\" ## [1] \"Iteration: 22 bestEv: 0.29270761270825 bestIt: 22 CE: 0.29270761270825 featOrth: 0.0273559297990821\" ## [1] \"Iteration: 23 bestEv: 0.289759259172705 bestIt: 23 CE: 0.289759259172705 featOrth: 0.0270671985444614\" ## [1] \"Iteration: 24 bestEv: 0.275575493151391 bestIt: 24 CE: 0.275575493151391 featOrth: 0.0270019546267767\" ## [1] \"Iteration: 25 bestEv: 0.275575493151391 bestIt: 24 CE: 0.288583684500593 featOrth: 0.0269780831071685\" ## [1] \"Iteration: 26 bestEv: 0.275575493151391 bestIt: 24 CE: 0.288374062256534 featOrth: 0.0269608657268016\" ## [1] \"Iteration: 27 bestEv: 0.275575493151391 bestIt: 24 CE: 0.288058648759467 featOrth: 0.0269283621198341\" ## [1] \"Iteration: 28 bestEv: 0.275575493151391 bestIt: 24 CE: 0.287816401720803 featOrth: 0.0269049862983755\" ## [1] \"Iteration: 29 bestEv: 0.275575493151391 bestIt: 24 CE: 0.287590417149125 featOrth: 0.0268898230855148\" ## [1] \"Iteration: 30 bestEv: 0.27405003616992 bestIt: 30 CE: 0.27405003616992 featOrth: 0.0268760425610211\" ## [1] \"Iteration: 31 bestEv: 0.27405003616992 bestIt: 30 CE: 0.28738746134481 featOrth: 0.0268691762953614\" ## [1] \"Iteration: 32 bestEv: 0.27405003616992 bestIt: 30 CE: 0.287293145195785 featOrth: 0.0268568825188998\" ## [1] \"Iteration: 33 bestEv: 0.273808034840371 bestIt: 33 CE: 0.273808034840371 featOrth: 0.0268514089811346\" ## [1] \"Iteration: 34 bestEv: 0.273808034840371 bestIt: 33 CE: 0.282942998181403 featOrth: 0.0268364935296805\" ## [1] \"Iteration: 35 bestEv: 0.273539729631552 bestIt: 35 CE: 0.273539729631552 featOrth: 0.0268327630076216\" ## [1] \"Iteration: 36 bestEv: 0.273479301814332 bestIt: 36 CE: 0.273479301814332 featOrth: 0.0268245071036943\" ## [1] \"Iteration: 37 bestEv: 0.273371430938955 bestIt: 37 CE: 0.273371430938955 featOrth: 0.0268179412792021\" ## [1] \"Iteration: 38 bestEv: 0.273344180475613 bestIt: 38 CE: 0.273344180475613 featOrth: 0.026813177575336\" ## [1] \"Iteration: 39 bestEv: 0.273249786798694 bestIt: 39 CE: 0.273249786798694 featOrth: 0.0268057892093142\" ## [1] \"Iteration: 40 bestEv: 0.273157376448472 bestIt: 40 CE: 0.273157376448472 featOrth: 0.0268012863432112\" ## [1] \"Iteration: 41 bestEv: 0.273157376448472 bestIt: 40 CE: 0.286540429930871 featOrth: 0.0267978415162117\" ## [1] \"Iteration: 42 bestEv: 0.273157376448472 bestIt: 40 CE: 0.284605552446613 featOrth: 0.0266358510404241\" ## [1] \"Iteration: 43 bestEv: 0.271000736529978 bestIt: 43 CE: 0.271000736529978 featOrth: 0.0266153499739604\" ## [1] \"Iteration: 44 bestEv: 0.271000736529978 bestIt: 43 CE: 0.284124006779817 featOrth: 0.0265888081956054\" ## [1] \"Iteration: 45 bestEv: 0.271000736529978 bestIt: 43 CE: 0.283872305004984 featOrth: 0.0265624785883458\" ## [1] \"Iteration: 46 bestEv: 0.270399229137192 bestIt: 46 CE: 0.270399229137192 featOrth: 0.0265548246097578\" ## [1] \"Iteration: 47 bestEv: 0.270399229137192 bestIt: 46 CE: 0.283703500480097 featOrth: 0.0265484145845429\" ## [1] \"Iteration: 48 bestEv: 0.268687741074546 bestIt: 48 CE: 0.268687741074546 featOrth: 0.0263844251974592\" ## [1] \"Iteration: 49 bestEv: 0.268687741074546 bestIt: 48 CE: 0.28204931789611 featOrth: 0.02637988906298\" ## [1] \"Iteration: 50 bestEv: 0.26861813432118 bestIt: 50 CE: 0.26861813432118 featOrth: 0.0263777544620968\" ## [1] \"Iteration: 51 bestEv: 0.268531622185068 bestIt: 51 CE: 0.268531622185068 featOrth: 0.0263699953168462\" ## [1] \"Iteration: 52 bestEv: 0.268531622185068 bestIt: 51 CE: 0.268535114245451 featOrth: 0.0263700082596763\" ## [1] \"Iteration: 53 bestEv: 0.265943479001955 bestIt: 53 CE: 0.265943479001955 featOrth: 0.0247712401433158\" ## [1] \"Iteration: 54 bestEv: 0.252539513493158 bestIt: 54 CE: 0.252539513493158 featOrth: 0.0247696334311141\" ## [1] \"Iteration: 55 bestEv: 0.252519863071793 bestIt: 55 CE: 0.252519863071793 featOrth: 0.024767812352475\" ## [1] \"Iteration: 56 bestEv: 0.252514565909042 bestIt: 56 CE: 0.252514565909042 featOrth: 0.0247671337363971\" ## [1] \"Iteration: 57 bestEv: 0.252514565909042 bestIt: 56 CE: 0.265914753196789 featOrth: 0.0247657846387183\" ## [1] \"Iteration: 58 bestEv: 0.252514565909042 bestIt: 56 CE: 0.265893284638223 featOrth: 0.0247651334290972\" ## [1] \"Iteration: 59 bestEv: 0.252476301630547 bestIt: 59 CE: 0.252476301630547 featOrth: 0.0247646931027629\" ## [1] \"Iteration: 60 bestEv: 0.252476301630547 bestIt: 59 CE: 0.252495246437406 featOrth: 0.0247645466809951\" ## [1] \"Iteration: 61 bestEv: 0.252476301630547 bestIt: 59 CE: 0.265887913404921 featOrth: 0.0247645258558319\" ## [1] \"Iteration: 62 bestEv: 0.252476301630547 bestIt: 59 CE: 0.265877284298643 featOrth: 0.0247642765003555\" ## [1] \"Iteration: 63 bestEv: 0.252476301630547 bestIt: 59 CE: 0.265882413572749 featOrth: 0.024763408097006\" ## [1] \"Iteration: 64 bestEv: 0.252476301630547 bestIt: 59 CE: 0.265865262849639 featOrth: 0.0247614733422332\" ## [1] \"Iteration: 65 bestEv: 0.252476301630547 bestIt: 59 CE: 0.265878904765705 featOrth: 0.0247614438596925\" ##################################################### # drwwrd projlist=list() mysimk=ncol(initu) for ( k in 2:length(nh_list)) {     rownames(resultNH$v[[k]])=colnames( nh_list[[k]])     ux=data.frame(nh_list[[k]] %*% abs(resultNH$v[[k]][,1:mysimk]))     colnames(ux)=paste0(names(nh_list)[k],1:ncol(ux))     projlist[[length(projlist)+1]]=ux     names( projlist )[length(projlist)]=knm[k] } simdf=simdf2=dplyr::bind_cols(projlist) cognames = c(   \"z_cerad_re\", \"z_animal_re\",      \"z_delayed_re\",    \"z_global_re\",     \"z_digit_re\" #  \"z_cerad_age\", \"z_animal_age\",     \"z_digit_age\",      \"z_delayed_age\",    \"z_global_age\", #  \"z_cerad_edu\", \"z_animal_edu\",     \"z_digit_edu\",      \"z_delayed_edu\",    \"z_global_edu\" ) # cognames=c(\"cerad_sum\",\"cfdast\",\"cfdds\") dnames = c( \"riagendr\", \"ridageyr\", \"race\", \"dmdeduc2\", \"INDFMPIR\",'wtint2yr','wtmec2yr') if ( doimp ) {   simdf2[,dnames]=fdata[,dnames]   simdf2[,cognames]=fdata[,cognames]   } else {   simdf2[,dnames]=fdata[mycc,dnames]   simdf2[,cognames]=fdata[mycc,cognames]   } ################################# covars=\" ~ riagendr + ridageyr + race + dmdeduc2 + INDFMPIR + \" covars=\" ~ riagendr + ridageyr + dmdeduc2 +  \" # race adjusted scores basep=0.01 # basep=1e-12 # rooter if ( ! exists(\"cogind\" ) ) cogind = length(cognames) ############################# for ( kk in 1:ncol(initu)) {   bform = paste0( cognames[cogind], covars, \"1\" )   myform = paste0( cognames[cogind], covars,paste0( paste0(names(projlist),kk), collapse='+'))   if ( basep >= 0.001 ) tempdf = simdf2[mycc,] else tempdf = simdf2[,]   bmdl = lm( bform, data=tempdf )   mdl = lm( myform, data=tempdf ) #  if (doimp) mdl = lm( myform, data=tempdf, weights=tempdf$wtint2yr ) else mdl = lm( myform, data=tempdf, weights=tempdf$wtint2yr  )   myanv = anova( bmdl, mdl )   if ( myanv$Pr[2] < basep/mysimk ) {     cat(\"*** result begin ***********************************\\n\")     print(\"individual coefficients\")     tailcoffs = tail( coefficients( summary( mdl ) ), 4 )     print( tailcoffs )     print( paste(\"multivar-ANOVA p-value\", insight::format_p(myanv$Pr[2],digits=4) ) )     print( cognames[cogind])     for ( k in names(projlist) ) {       print( paste(\"Simlr weights\", k ) )       print( interpret_simlr_vector2( resultNH$v[[k]], kk, n2show=3, shortnames=F ) )       ttl = paste0(k,kk, \" \", insight::format_p(tailcoffs[paste0(k,kk),\"Pr(>|t|)\"],digits=4)  )       visreg::visreg(mdl, paste0(k,kk), main=ttl )       }     cat(\"*** result end ***********************************\\n\\n\") #    Sys.sleep(3)   } } ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate   Std. Error   t value     Pr(>|t|) ## diet1          2.084777e+02 5.585041e+01  3.732787 2.134196e-04 ## exposures1     6.353857e+05 7.677524e+05  0.827592 4.083364e-01 ## mentalhealth1 -1.076923e+07 2.697311e+06 -3.992581 7.621099e-05 ## physical1      1.146752e+07 8.231462e+06  1.393133 1.642612e-01 ## [1] \"multivar-ANOVA p-value p = 3.8193e-07\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TMOIS  DR1TPROT  DR1TSODI  ## 1.0000000 0.9325442 0.9009289 ## [1] \"Simlr weights exposures\" ##    LBXBMN    LBXVFN    LBXV2A  ## 1.0000000 0.5259348 0.4407065 ## [1] \"Simlr weights mentalhealth\" ##    DPQ020    DPQ050    DPQ040  ## 1.0000000 0.6803791 0.5103406 ## [1] \"Simlr weights physical\" ##   BMXARML    BMXLEG     BMXWT  ## 1.0000000 0.8640124 0.8518553 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate   Std. Error    t value     Pr(>|t|) ## diet2          5.390687e+02 1.422671e+02  3.7891300 0.0001715434 ## exposures2     1.352205e+05 1.629956e+05  0.8295961 0.4072031535 ## mentalhealth2 -4.776592e+06 1.431160e+06 -3.3375669 0.0009146646 ## physical2     -2.951730e+07 1.715242e+07 -1.7208830 0.0859533712 ## [1] \"multivar-ANOVA p-value p = 1.2248e-06\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TMFAT  DR1TM201  DR1TP182  ## 1.0000000 0.9689730 0.9424808 ## [1] \"Simlr weights exposures\" ##    LBXBGM  LBDTHGSI    LBXTHG  ## 1.0000000 0.9594913 0.9573589 ## [1] \"Simlr weights mentalhealth\" ##    SLQ060    DPQ010    DPQ040  ## 1.0000000 0.2400937 0.1988204 ## [1] \"Simlr weights physical\" ##    BMXBMI    BPXSY3    BPXDI3  ## 1.0000000 0.8114585 0.6777227 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate   Std. Error   t value     Pr(>|t|) ## diet4              1170.948     568.3725  2.060178 0.0399508870 ## exposures4       141575.992  111455.9630  1.270242 0.2046492079 ## mentalhealth4 -14676321.615 3771511.5225 -3.891363 0.0001146137 ## physical4      -2350385.671 1346502.4989 -1.745549 0.0815658976 ## [1] \"multivar-ANOVA p-value p = 3.7255e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TB12A  DR1TATOA  DR1TALCO  ## 1.0000000 0.9592518 0.9361474 ## [1] \"Simlr weights exposures\" ##  LBDBSESI    LBXBSE    LBXV3B  ## 1.0000000 0.9992273 0.8370495 ## [1] \"Simlr weights mentalhealth\" ##    SLQ060    DPQ050    DPQ040  ## 1.0000000 0.4237296 0.3087827 ## [1] \"Simlr weights physical\" ##    BPXML1    BPXSY2   BMXSAD1  ## 1.0000000 0.4592230 0.2974505 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate   Std. Error   t value     Pr(>|t|) ## diet7              384.8579 9.728273e+01  3.956076 0.0000883833 ## exposures7     1202967.3347 8.906803e+05  1.350616 0.1774911766 ## mentalhealth7 -1537540.6835 6.942775e+05 -2.214591 0.0272840375 ## physical7      2928390.3949 1.652244e+06  1.772371 0.0770034879 ## [1] \"multivar-ANOVA p-value p = 3.3269e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TACAR  DR1TCRYP  DR1TFIBE  ## 1.0000000 0.8856388 0.8552610 ## [1] \"Simlr weights exposures\" ##    LBXSSE  LBDSSESI    LBXBSE  ## 1.0000000 0.9943789 0.5115414 ## [1] \"Simlr weights mentalhealth\" ##    SLQ060    SLQ050    DPQ100  ## 1.0000000 0.2891646 0.1164478 ## [1] \"Simlr weights physical\" ##     BMXHT    BMXLEG   BMXARML  ## 1.0000000 0.6895449 0.6797044 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error    t value     Pr(>|t|) ## diet10              433.6215 1.205862e+02  3.5959470 0.0003586631 ## exposures10       51303.6959 9.551881e+04  0.5371057 0.5914577384 ## mentalhealth10 -3542435.5191 1.075478e+06 -3.2938232 0.0010656443 ## physical10      8507876.4918 1.203235e+07  0.7070836 0.4798772758 ## [1] \"multivar-ANOVA p-value p = 3.3787e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TCAFF  DR1TVARA   DR1TVB2  ## 1.0000000 0.8561069 0.8220359 ## [1] \"Simlr weights exposures\" ##    LBXVFN    LBX2DF    LBXSSE  ## 1.0000000 0.9571696 0.8008686 ## [1] \"Simlr weights mentalhealth\" ##    SLQ060    DPQ010    SLQ050  ## 1.0000000 0.3095514 0.2806451 ## [1] \"Simlr weights physical\" ##    BMXBMI   BMXSAD1   BMXSAD2  ## 1.0000000 0.9442514 0.9133866 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error    t value     Pr(>|t|) ## diet11              649.8302     261.9873  2.4803881 1.348539e-02 ## exposures11       25644.6507  103964.8785  0.2466665 8.052778e-01 ## mentalhealth11 -2933343.8545  712409.6420 -4.1174960 4.550777e-05 ## physical11      -937607.2185 2254030.5226 -0.4159692 6.776291e-01 ## [1] \"multivar-ANOVA p-value p = 5.4252e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TZINC  DR1TSELE  DR1TPROT  ## 1.0000000 0.9575517 0.9395957 ## [1] \"Simlr weights exposures\" ##  LBDTHGSI    LBXTHG    LBXBGM  ## 1.0000000 0.9997743 0.9937863 ## [1] \"Simlr weights mentalhealth\" ##    DPQ040    DPQ010    DPQ050  ## 1.0000000 0.7370697 0.7296091 ## [1] \"Simlr weights physical\" ##   BMXARMC    BPXPLS     BMXWT  ## 1.0000000 0.9979656 0.3955360 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error   t value     Pr(>|t|) ## diet12              773.8149     227.5737  3.400282 0.0007326220 ## exposures12      301465.0163  214606.9784  1.404731 0.1607851712 ## mentalhealth12 -8882727.5441 2649405.3823 -3.352725 0.0008671658 ## physical12     -2176737.2085 1145321.2354 -1.900547 0.0579944630 ## [1] \"multivar-ANOVA p-value p = 2.0054e-06\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TCAFF  DR1TFIBE  DR1TMAGN  ## 1.0000000 0.7611522 0.7573892 ## [1] \"Simlr weights exposures\" ##    LBX2DF  LBDBSESI    LBXBSE  ## 1.0000000 0.6462743 0.6419574 ## [1] \"Simlr weights mentalhealth\" ##    SLQ060    DPQ050    DPQ020  ## 1.0000000 0.9129330 0.5617838 ## [1] \"Simlr weights physical\" ##    BPXPLS    BPXML1    BPXSY3  ## 1.0000000 0.5438065 0.2722697 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error    t value     Pr(>|t|) ## diet13              609.2152     219.8631  2.7708845 0.0058199120 ## exposures13    -6019458.2267 4778491.4607 -1.2596984 0.2084253520 ## mentalhealth13 -3594548.0392  961807.1976 -3.7372854 0.0002097507 ## physical13      2670169.1320 3212448.9944  0.8311942 0.4063008300 ## [1] \"multivar-ANOVA p-value p = 3.1298e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TVB12  DR1TMOIS  DR1TIRON  ## 1.0000000 0.9639306 0.9123256 ## [1] \"Simlr weights exposures\" ##    LBXV3B    LBXVTE  LBDBPBSI  ## 1.0000000 0.7603309 0.6808227 ## [1] \"Simlr weights mentalhealth\" ##    DPQ010    DPQ020    DPQ080  ## 1.0000000 0.8909926 0.8866655 ## [1] \"Simlr weights physical\" ##     BMXHT   BMXARML     BMXWT  ## 1.0000000 0.7585095 0.6611244 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error   t value     Pr(>|t|) ## diet14          3.159036e+02 1.125066e+02  2.807868 5.201955e-03 ## exposures14     5.264098e+05 3.672714e+05  1.433299 1.524606e-01 ## mentalhealth14 -8.780457e+06 2.078273e+06 -4.224881 2.890573e-05 ## physical14     -7.821012e+07 5.162918e+07 -1.514843 1.305079e-01 ## [1] \"multivar-ANOVA p-value p = 1.8413e-06\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TPROT  DR1TACAR  DR1TCALC  ## 1.0000000 0.9919309 0.9865034 ## [1] \"Simlr weights exposures\" ##    LBXV06    LBXVEB    LBXBSE  ## 1.0000000 0.5364403 0.4372662 ## [1] \"Simlr weights mentalhealth\" ##    DPQ070    DPQ020    DPQ080  ## 1.0000000 0.9223092 0.7993927 ## [1] \"Simlr weights physical\" ## BPXPTY_Brachial          BPXML1          BMXBMI  ##       1.0000000       0.3772007       0.3642257 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error    t value    Pr(>|t|) ## diet17              511.5846     173.7649  2.9441197 0.003404920 ## exposures17      -77794.1610  545246.0461 -0.1426772 0.886608448 ## mentalhealth17 -3245511.2388 1182709.2345 -2.7441328 0.006307494 ## physical17     -8103128.7458 4576574.2538 -1.7705664 0.077303812 ## [1] \"multivar-ANOVA p-value p = 0.0001\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##    DR1TVC  DR1TMAGN  DR1TPOTA  ## 1.0000000 0.8241960 0.7715346 ## [1] \"Simlr weights exposures\" ##    LBXVBZ    LBXBCD    LBXVFN  ## 1.0000000 0.9465769 0.8236069 ## [1] \"Simlr weights mentalhealth\" ##    DPQ010    DPQ100    SLQ050  ## 1.0000000 0.5162123 0.1441040 ## [1] \"Simlr weights physical\" ##    BPXPLS    BPXSY3    BPXSY2  ## 1.0000000 0.3363820 0.2787351 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error    t value     Pr(>|t|) ## diet18               275.712 9.333582e+01  2.9539781 0.0033000253 ## exposures18    -10886954.138 1.133509e+07 -0.9604651 0.3373324230 ## mentalhealth18  -3657653.508 9.670037e+05 -3.7824606 0.0001760615 ## physical18       4409967.539 1.046364e+07  0.4214562 0.6736214469 ## [1] \"multivar-ANOVA p-value p = 4.0354e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TCAFF   DR1TVB2  DR1TCALC  ## 1.0000000 0.6656482 0.6502483 ## [1] \"Simlr weights exposures\" ##    LBXBCD    LBXVXY    LBXVEB  ## 1.0000000 0.8603879 0.7497717 ## [1] \"Simlr weights mentalhealth\" ##    DPQ080    DPQ070    DPQ050  ## 1.0000000 0.4533581 0.2085048 ## [1] \"Simlr weights physical\" ##   BMXARML     BMXHT     BMXWT  ## 1.0000000 0.9650196 0.7407070 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error    t value     Pr(>|t|) ## diet22              439.4203 1.197281e+02  3.6701507 0.0002712059 ## exposures22     4038168.5143 1.178725e+07  0.3425877 0.7320672001 ## mentalhealth22 -4993273.3177 1.513260e+06 -3.2996807 0.0010441654 ## physical22      4600060.8480 2.821162e+06  1.6305554 0.1036776721 ## [1] \"multivar-ANOVA p-value p = 2.3128e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ## DR1TWS_Don.t.drink.tap.water                     DR1TVARA  ##                    1.0000000                    0.7819798  ##                     DR1TCALC  ##                    0.6779389 ## [1] \"Simlr weights exposures\" ##    LBXVFN    LBXVXY    LBXVEB  ## 1.0000000 0.8744749 0.7939664 ## [1] \"Simlr weights mentalhealth\" ##    DPQ090    SLQ060    DPQ060  ## 1.0000000 0.7983581 0.2244878 ## [1] \"Simlr weights physical\" ##    BMXLEG     BMXHT    BMXBMI  ## 1.0000000 0.9526412 0.1937365 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error    t value     Pr(>|t|) ## diet23              225.3143 7.049555e+01  3.1961492 0.0014899207 ## exposures23      118191.0791 2.678803e+05  0.4412086 0.6592720327 ## mentalhealth23 -3321654.0240 9.565286e+05 -3.4726132 0.0005647865 ## physical23      1286621.3808 1.132772e+07  0.1135817 0.9096196285 ## [1] \"multivar-ANOVA p-value p = 3.9071e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##    DR1TVC   DR1TVB1   DR1TVB6  ## 1.0000000 0.7756255 0.6887479 ## [1] \"Simlr weights exposures\" ##    LBXBGM  LBDTHGSI    LBXTHG  ## 1.0000000 0.9092152 0.9088345 ## [1] \"Simlr weights mentalhealth\" ##    DPQ060    DPQ010    DPQ020  ## 1.0000000 0.8052218 0.4786574 ## [1] \"Simlr weights physical\" ##            BPXPLS            BMXBMI BPXPULS_Irregular  ##         1.0000000         0.9848642         0.6330299 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error    t value     Pr(>|t|) ## diet25              424.2575     144.7898  2.9301611 0.0035586549 ## exposures25     2259188.4361 2175446.7640  1.0384940 0.2995928865 ## mentalhealth25 -5057371.1360 1524996.1475 -3.3163173 0.0009853332 ## physical25      1522677.8427 2163167.1387  0.7039113 0.4818488681 ## [1] \"multivar-ANOVA p-value p = 9.9553e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##    DR1TFF  DR1TMAGN  DR1TALCO  ## 1.0000000 0.9835777 0.9576532 ## [1] \"Simlr weights exposures\" ##  LBDBPBSI    LBXBPB    LBX2DF  ## 1.0000000 0.9954247 0.9245335 ## [1] \"Simlr weights mentalhealth\" ##    DPQ080    SLQ060    DPQ010  ## 1.0000000 0.7794922 0.5672456 ## [1] \"Simlr weights physical\" ##     BMXWT   BMXARMC  BMXWAIST  ## 1.0000000 0.9986844 0.8387049 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error    t value     Pr(>|t|) ## diet26              295.0777 8.076964e+01  3.6533249 0.0002890710 ## exposures26      383723.8604 3.458496e+05  1.1095107 0.2677972568 ## mentalhealth26 -8238641.1913 2.145338e+06 -3.8402525 0.0001403722 ## physical26      3174364.1126 4.007865e+06  0.7920336 0.4287547192 ## [1] \"multivar-ANOVA p-value p = 2.7994e-06\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TVARA  DR1TBCAR  DR1TP183  ## 1.0000000 0.8862726 0.8860236 ## [1] \"Simlr weights exposures\" ##    LBXBCD    LBXBGE    LBXTHG  ## 1.0000000 0.7172419 0.4606238 ## [1] \"Simlr weights mentalhealth\" ##    DPQ060    DPQ050    SLQ060  ## 1.0000000 0.9499917 0.9142276 ## [1] \"Simlr weights physical\" ##    BMXBMI  BMXWAIST   BMXSAD2  ## 1.0000000 0.8224457 0.8223149 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                    Estimate   Std. Error    t value     Pr(>|t|) ## diet28             1033.544     413.9579  2.4967368 1.288756e-02 ## exposures28     2435227.761 2106730.0525  1.1559278 2.483186e-01 ## mentalhealth28 -7707571.839 1897916.5856 -4.0610699 5.753772e-05 ## physical28      -800657.374 5266203.9461 -0.1520369 8.792254e-01 ## [1] \"multivar-ANOVA p-value p = 3.1638e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TMAGN   DR1TVB1    DR1TVC  ## 1.0000000 0.9153066 0.7920317 ## [1] \"Simlr weights exposures\" ##  LBDBPBSI    LBXBPB    LBXBGE  ## 1.0000000 0.9835403 0.7828549 ## [1] \"Simlr weights mentalhealth\" ##    DPQ060    DPQ040    DPQ020  ## 1.0000000 0.5767137 0.5759865 ## [1] \"Simlr weights physical\" ##     BMXWT   BMXARMC   BMXSAD2  ## 1.0000000 0.7760479 0.5231017 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error   t value    Pr(>|t|) ## diet30              1734.522     529.4569  3.276041 0.001133388 ## exposures30       774168.044  386675.5796  2.002113 0.045866981 ## mentalhealth30  -3991134.102 1419099.7617 -2.812441 0.005129833 ## physical30     -14889858.280 7892470.3542 -1.886590 0.059853330 ## [1] \"multivar-ANOVA p-value p = 1.0417e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TB12A  DR1TATOA  DR1TIRON  ## 1.0000000 0.9499233 0.8507155 ## [1] \"Simlr weights exposures\" ##    LBXBCD  LBDBSESI    LBXBSE  ## 1.0000000 0.5660244 0.5580889 ## [1] \"Simlr weights mentalhealth\" ##    DPQ020    DPQ080    DPQ030  ## 1.0000000 0.9289549 0.8637748 ## [1] \"Simlr weights physical\" ##    BPXML1    BPXSY1   BMXSAD1  ## 1.0000000 0.8199230 0.7414586 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error    t value     Pr(>|t|) ## diet31              991.0641     261.0814  3.7959965 0.0001670062 ## exposures31       40585.1663  106009.0786  0.3828461 0.7020130291 ## mentalhealth31 -4212894.6572 1078073.7795 -3.9077981 0.0001073297 ## physical31     -2379078.1197 3591854.2445 -0.6623537 0.5080806231 ## [1] \"multivar-ANOVA p-value p = 1.8259e-06\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##                DR1TNUMF                  DR1TFF DR1TWS_Community.supply  ##               1.0000000               0.8969864               0.7898186 ## [1] \"Simlr weights exposures\" ##  LBDTHGSI    LBXTHG    LBXBGM  ## 1.0000000 0.9982673 0.9301799 ## [1] \"Simlr weights mentalhealth\" ##    SLQ050    DPQ050    DPQ040  ## 1.0000000 0.7993398 0.7073818 ## [1] \"Simlr weights physical\" ##     BMXWT    BPXML1    BPXSY3  ## 1.0000000 0.6127105 0.3633163 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error   t value     Pr(>|t|) ## diet34          4.903733e+02 1.540418e+02  3.183378 1.555708e-03 ## exposures34    -1.359111e+06 1.354673e+06 -1.003276 3.162621e-01 ## mentalhealth34 -1.338361e+07 3.309552e+06 -4.043933 6.175288e-05 ## physical34     -2.354482e+07 1.573956e+07 -1.495900 1.353745e-01 ## [1] \"multivar-ANOVA p-value p = 4.9952e-06\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TCALC  DR1TPOTA    DR1TVD  ## 1.0000000 0.9569425 0.8077670 ## [1] \"Simlr weights exposures\" ##    LBXBPB  LBDBPBSI    LBXVBZ  ## 1.0000000 0.9997662 0.6803928 ## [1] \"Simlr weights mentalhealth\" ##    DPQ050    DPQ090    DPQ060  ## 1.0000000 0.5757498 0.4523480 ## [1] \"Simlr weights physical\" ##    BMXLEG    BPXSY2    BPXPLS  ## 1.0000000 0.9021579 0.6347575 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error   t value     Pr(>|t|) ## diet36              490.7633     129.7551  3.782228 0.0001762208 ## exposures36      141981.9014   95916.2809  1.480269 0.1394950561 ## mentalhealth36 -6939385.2524 2699634.3842 -2.570491 0.0104731540 ## physical36     -5951446.9508 3060296.3950 -1.944729 0.0524247431 ## [1] \"multivar-ANOVA p-value p = 9.5105e-06\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TPROT  DR1TPHOS  DR1TP225  ## 1.0000000 0.8495743 0.8078020 ## [1] \"Simlr weights exposures\" ##    LBXBSE  LBDBSESI  LBDSSESI  ## 1.0000000 0.9956869 0.7085741 ## [1] \"Simlr weights mentalhealth\" ##    SLQ050    SLQ060    DPQ040  ## 1.0000000 0.6620314 0.5082893 ## [1] \"Simlr weights physical\" ##    BPXML1    BPXSY1    BPXSY2  ## 1.0000000 0.9092991 0.9054499 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error   t value     Pr(>|t|) ## diet37              706.7338     243.3736  2.903905 0.0038651163 ## exposures37      899397.0162 1836864.8497  0.489637 0.6246272771 ## mentalhealth37 -7549624.0595 2194824.8804 -3.439739 0.0006360399 ## physical37     -1183765.3189  734899.5703 -1.610785 0.1079215500 ## [1] \"multivar-ANOVA p-value p = 6.5708e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##   DR1TVB2  DR1TPOTA  DR1TCOPP  ## 1.0000000 0.7372991 0.7145682 ## [1] \"Simlr weights exposures\" ##    LBXV2A    LBXV3B    LBXVFN  ## 1.0000000 0.8140768 0.7411735 ## [1] \"Simlr weights mentalhealth\" ##    SLQ060    DPQ040    SLQ050  ## 1.0000000 0.2980092 0.2578879 ## [1] \"Simlr weights physical\" ##   BMXARMC    BPXSY3    BPXSY2  ## 1.0000000 0.8127011 0.7023257 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error     t value     Pr(>|t|) ## diet38              163.2612 4.873439e+01  3.35002099 8.754671e-04 ## exposures38      -60443.9988 7.353387e+05 -0.08219886 9.345248e-01 ## mentalhealth38 -3593504.8283 9.013145e+05 -3.98695976 7.797574e-05 ## physical38      6858921.6822 2.654902e+07  0.25834929 7.962544e-01 ## [1] \"multivar-ANOVA p-value p = 1.1398e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##    DR1TLZ    DR1TVK  DR1TP204  ## 1.0000000 0.9286492 0.8016690 ## [1] \"Simlr weights exposures\" ##    LBXBCD    LBX2DF    LBXBPB  ## 1.0000000 0.5135337 0.4640583 ## [1] \"Simlr weights mentalhealth\" ##    DPQ050    DPQ040    SLQ060  ## 1.0000000 0.6001996 0.4819445 ## [1] \"Simlr weights physical\" ##   BMXARMC    BPXDI3    BMXLEG  ## 1.0000000 0.8984944 0.6812669 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error   t value     Pr(>|t|) ## diet40              392.1956 9.523375e+01  4.118242 4.536608e-05 ## exposures40     1464758.1705 1.249784e+06  1.172009 2.418081e-01 ## mentalhealth40 -6713068.3769 2.541134e+06 -2.641760 8.532337e-03 ## physical40      -814607.5065 4.298147e+05 -1.895253 5.869388e-02 ## [1] \"multivar-ANOVA p-value p = 4.2034e-06\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TCALC  DR1TMAGN  DR1TPOTA  ## 1.0000000 0.9069363 0.7965832 ## [1] \"Simlr weights exposures\" ##    LBXVTC    LBX2DF    LBXBCD  ## 1.0000000 0.6231757 0.6223453 ## [1] \"Simlr weights mentalhealth\" ##    DPQ080    DPQ090    DPQ030  ## 1.0000000 0.5128294 0.4291490 ## [1] \"Simlr weights physical\" ##    BPXSY3   BMXARML    BPXSY2  ## 1.0000000 0.9253358 0.8772461 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error   t value     Pr(>|t|) ## diet41              138.5619 8.104395e+01  1.709714 0.0880021376 ## exposures41      220934.7880 1.239393e+05  1.782604 0.0753188532 ## mentalhealth41 -4709559.9992 1.209924e+06 -3.892442 0.0001141218 ## physical41      6199528.7308 5.612865e+06  1.104521 0.2699521562 ## [1] \"multivar-ANOVA p-value p = 9.9604e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##                    DR1TCAFF DR1TWS_Well.or.rain.cistern  ##                   1.0000000                   0.9879683  ##                     DR1TVB2  ##                   0.8153577 ## [1] \"Simlr weights exposures\" ##  LBDTHGSI    LBXTHG    LBXBGM  ## 1.0000000 0.9994966 0.9370844 ## [1] \"Simlr weights mentalhealth\" ##    DPQ040    DPQ060    SLQ060  ## 1.0000000 0.8746972 0.4787399 ## [1] \"Simlr weights physical\" ##     BMXHT   BMXARML    BMXLEG  ## 1.0000000 0.2313118 0.2193417 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                   Estimate   Std. Error     t value     Pr(>|t|) ## diet42             552.038     149.7538  3.68630297 0.0002550372 ## exposures42      47345.831 1034281.1238  0.04577656 0.9635084706 ## mentalhealth42   -1484.549     534.4868 -2.77752286 0.0057043241 ## physical42     -981636.917  938034.6780 -1.04648255 0.2958951220 ## [1] \"multivar-ANOVA p-value p = 6.7405e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ## DR1TWS_Spring      DR1TP225      DR1TCAFF  ##     1.0000000     0.8900809     0.8040516 ## [1] \"Simlr weights exposures\" ##    LBXBGM    LBXTHG  LBDTHGSI  ## 1.0000000 0.8655881 0.8649545 ## [1] \"Simlr weights mentalhealth\" ##    DPQ010    SLQ050    DPQ040  ## 1.0000000 0.9690362 0.8591096 ## [1] \"Simlr weights physical\" ##     BMXHT   BMXARML    BPXSY3  ## 1.0000000 0.9120062 0.5938212 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error    t value     Pr(>|t|) ## diet46          7.710219e+01      28.6597  2.6902651 7.402748e-03 ## exposures46     5.099787e+05 1109145.1924  0.4597944 6.458839e-01 ## mentalhealth46 -1.676923e+07 4111268.2650 -4.0788453 5.345508e-05 ## physical46     -8.640745e+06 4048207.1104 -2.1344622 3.333998e-02 ## [1] \"multivar-ANOVA p-value p = 7.6863e-06\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TKCAL  DR1TPROT  DR1TNIAC  ## 1.0000000 0.8589942 0.8554878 ## [1] \"Simlr weights exposures\" ##  LBDSSESI    LBXSSE  LBDIHGSI  ## 1.0000000 0.9729116 0.4942745 ## [1] \"Simlr weights mentalhealth\" ##    DPQ070    DPQ050    DPQ100  ## 1.0000000 0.6871187 0.5377580 ## [1] \"Simlr weights physical\" ##    BPXDI2    BPXSY1    BPXPLS  ## 1.0000000 0.3221193 0.2930094 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error     t value     Pr(>|t|) ## diet48              272.7954     448.8071  0.60782332 5.436086e-01 ## exposures48       -7279.5465  300900.2673 -0.02419256 9.807096e-01 ## mentalhealth48 -6443734.2724 1387092.0018 -4.64549883 4.450481e-06 ## physical48     -1575473.7369  942355.8349 -1.67184590 9.524374e-02 ## [1] \"multivar-ANOVA p-value p = 7.4666e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TS180    DR1TVC  DR1TS140  ## 1.0000000 0.7589670 0.7516782 ## [1] \"Simlr weights exposures\" ##    LBXBPB  LBDBPBSI    LBXVBZ  ## 1.0000000 0.9995124 0.4829268 ## [1] \"Simlr weights mentalhealth\" ##    DPQ040    DPQ020    DPQ100  ## 1.0000000 0.8798535 0.6173470 ## [1] \"Simlr weights physical\" ##    BPXDI3     BMXHT    BPXML1  ## 1.0000000 0.8826354 0.7891928 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error   t value     Pr(>|t|) ## diet49          6.569443e+02     197.4613  3.326953 9.493524e-04 ## exposures49    -1.075317e+07 5824336.4170 -1.846248 6.550692e-02 ## mentalhealth49 -7.197176e+06 1803416.2138 -3.990857 7.674822e-05 ## physical49     -9.205253e+05  535545.5998 -1.718855 8.632243e-02 ## [1] \"multivar-ANOVA p-value p = 5.5686e-07\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TNUMF  DR1TS120  DR1TS080  ## 1.0000000 0.7495266 0.6605490 ## [1] \"Simlr weights exposures\" ##    LBXBCD    LBX2DF    LBXVEB  ## 1.0000000 0.3001702 0.2817344 ## [1] \"Simlr weights mentalhealth\" ##    DPQ060    DPQ080    DPQ050  ## 1.0000000 0.6667410 0.5719157 ## [1] \"Simlr weights physical\" ##    BMXLEG    BPXDI2    BPXSY3  ## 1.0000000 0.8389196 0.8218275 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error    t value     Pr(>|t|) ## diet51              902.1539 2.207991e+02  4.0858580 5.192145e-05 ## exposures51        3000.8472 1.295587e+04  0.2316207 8.169370e-01 ## mentalhealth51 -1710839.1137 4.101131e+05 -4.1716272 3.624597e-05 ## physical51      2177370.2132 1.234826e+07  0.1763301 8.601132e-01 ## [1] \"multivar-ANOVA p-value p = 4.1995e-07\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TS040  DR1TS060  DR1TS140  ## 1.0000000 0.7284464 0.6977556 ## [1] \"Simlr weights exposures\" ##    LBXBPB  LBDBPBSI    LBXBGM  ## 1.0000000 0.9993942 0.4508393 ## [1] \"Simlr weights mentalhealth\" ##    DPQ050    DPQ040    SLQ050  ## 1.0000000 0.7725628 0.6504166 ## [1] \"Simlr weights physical\" ##     BMXHT    BMXLEG   BMXARML  ## 1.0000000 0.8314546 0.6353009 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error   t value     Pr(>|t|) ## diet53          1.549781e+02 4.109091e+01  3.771591 0.0001836666 ## exposures53    -1.444880e+06 1.263421e+06 -1.143625 0.2533817569 ## mentalhealth53 -4.831935e+06 1.832002e+06 -2.637517 0.0086381707 ## physical53     -1.487397e+07 7.874920e+06 -1.888777 0.0595588323 ## [1] \"multivar-ANOVA p-value p = 3.1733e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TBCAR    DR1TFF  DR1TFOLA  ## 1.0000000 0.9889694 0.8017904 ## [1] \"Simlr weights exposures\" ##    LBXBCD    LBXBPB  LBDBPBSI  ## 1.0000000 0.9074958 0.9063471 ## [1] \"Simlr weights mentalhealth\" ##    DPQ050    DPQ030    DPQ020  ## 1.0000000 0.9644221 0.2474463 ## [1] \"Simlr weights physical\" ##    BPXML1    BPXSY1    BPXSY2  ## 1.0000000 0.9771972 0.8207566 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error    t value     Pr(>|t|) ## diet56              727.5794     286.8749  2.5362249 0.0115395756 ## exposures56      143774.2773  461333.7764  0.3116491 0.7554502429 ## mentalhealth56 -4568697.6462 1178135.5310 -3.8779050 0.0001209245 ## physical56     -1450909.7256 1247583.5741 -1.1629760 0.2454501574 ## [1] \"multivar-ANOVA p-value p = 7.0468e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##      DR1TMOIS DR1TWS_Spring      DR1TS060  ##     1.0000000     0.6182352     0.5169213 ## [1] \"Simlr weights exposures\" ##    LBXBPB  LBDBPBSI    LBXBCD  ## 1.0000000 0.9977438 0.5560881 ## [1] \"Simlr weights mentalhealth\" ##    DPQ020    DPQ050    DPQ060  ## 1.0000000 0.4144192 0.1094852 ## [1] \"Simlr weights physical\" ##    BMXLEG   BMXARML    BPXSY3  ## 1.0000000 0.4075884 0.2532310 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate  Std. Error    t value    Pr(>|t|) ## diet58              427.0912    166.8346  2.5599676 0.010790897 ## exposures58      214027.3289 136415.1304  1.5689413 0.117358298 ## mentalhealth58 -3067564.8911 934628.8872 -3.2821208 0.001109789 ## physical58       279327.8040 292470.4964  0.9550632 0.340053993 ## [1] \"multivar-ANOVA p-value p = 9.0835e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TPOTA   DR1TVB2   DR1TVB6  ## 1.0000000 0.8283381 0.7969937 ## [1] \"Simlr weights exposures\" ##  LBDTHGSI    LBXTHG    LBXBGM  ## 1.0000000 0.9993681 0.9768894 ## [1] \"Simlr weights mentalhealth\" ##    DPQ010    DPQ050    DPQ060  ## 1.0000000 0.4866873 0.3539674 ## [1] \"Simlr weights physical\" ##     BMXHT   BMXSAD2   BMXSAD1  ## 1.0000000 0.2054590 0.2039115 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error    t value     Pr(>|t|) ## diet59              477.3371     131.1234  3.6403653 0.0003035789 ## exposures59      145947.5763  188887.7160  0.7726684 0.4401206901 ## mentalhealth59 -4830119.9174 1249090.3781 -3.8669099 0.0001263228 ## physical59       514871.0208  493927.9305  1.0424011 0.2977805083 ## [1] \"multivar-ANOVA p-value p = 1.5656e-06\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TFIBE  DR1TATOC  DR1TCOPP  ## 1.0000000 0.9359951 0.8529683 ## [1] \"Simlr weights exposures\" ##    LBXBGM  LBDTHGSI    LBXTHG  ## 1.0000000 0.9461398 0.9460664 ## [1] \"Simlr weights mentalhealth\" ##    DPQ060    DPQ080    DPQ020  ## 1.0000000 0.8743927 0.4829924 ## [1] \"Simlr weights physical\" ##     BMXHT   BMXARML    BPXPLS  ## 1.0000000 0.8203702 0.3404926 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error     t value     Pr(>|t|) ## diet61              117.7533 5.849614e+01  2.01300978 0.0447034023 ## exposures61     2504945.2338 1.760811e+06  1.42260919 0.1555361931 ## mentalhealth61 -7230018.1217 1.855651e+06 -3.89621569 0.0001124158 ## physical61        67270.5495 1.816509e+06  0.03703288 0.9704750643 ## [1] \"multivar-ANOVA p-value p = 0.0001\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TM201    DR1TLZ  DR1TFIBE  ## 1.0000000 0.9975434 0.9868845 ## [1] \"Simlr weights exposures\" ##    LBXVXY    LBXVEB    LBXVTE  ## 1.0000000 0.9278228 0.8338193 ## [1] \"Simlr weights mentalhealth\" ##    DPQ020    DPQ040    DPQ010  ## 1.0000000 0.3219281 0.2712690 ## [1] \"Simlr weights physical\" ##     BMXWT    BPXSY3    BMXBMI  ## 1.0000000 0.6223161 0.6103312 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error    t value     Pr(>|t|) ## diet63              1179.129     465.0253  2.5356228 0.0115591494 ## exposures63        98864.703  109291.4245  0.9045971 0.3661586547 ## mentalhealth63 -14494037.137 3702732.3297 -3.9144167 0.0001045219 ## physical63        489670.558  583702.2755  0.8389047 0.4019642989 ## [1] \"multivar-ANOVA p-value p = 4.2018e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TNUMF    DR1TVC  DR1TCOPP  ## 1.0000000 0.6761245 0.6279582 ## [1] \"Simlr weights exposures\" ##    LBXBGM    LBXTHG  LBDTHGSI  ## 1.0000000 0.9576354 0.9561931 ## [1] \"Simlr weights mentalhealth\" ##    DPQ060    DPQ020    DPQ010  ## 1.0000000 0.9293246 0.7796525 ## [1] \"Simlr weights physical\" ##     BMXLEG      BMXWT   BMXWAIST  ## 1.00000000 0.20242965 0.08923804 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error    t value     Pr(>|t|) ## diet67          6.025103e+01 2.761215e+01  2.1820475 0.0296180039 ## exposures67     3.883968e+04 3.913970e+04  0.9923346 0.3215629319 ## mentalhealth67 -5.763206e+06 1.511212e+06 -3.8136329 0.0001558661 ## physical67      4.368706e+06 1.997796e+06  2.1867634 0.0292694606 ## [1] \"multivar-ANOVA p-value p = 0.0001\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TFIBE    DR1TFF  DR1TMAGN  ## 1.0000000 0.9657865 0.8818575 ## [1] \"Simlr weights exposures\" ##    LBXBGM  LBDTHGSI    LBXTHG  ## 1.0000000 0.9871150 0.9856478 ## [1] \"Simlr weights mentalhealth\" ##    SLQ060    DPQ090    DPQ050  ## 1.0000000 0.4824985 0.3128870 ## [1] \"Simlr weights physical\" ##     BMXHT   BMXARMC     BMXWT  ## 1.0000000 0.2103116 0.1152352 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error    t value     Pr(>|t|) ## diet68              452.6829     113.4525  3.9900660 7.699587e-05 ## exposures68     -830213.5722 1931979.5698 -0.4297217 6.676020e-01 ## mentalhealth68 -2855939.3097  792696.5429 -3.6028154 3.495726e-04 ## physical68      -485148.2984 2104561.5212 -0.2305223 8.177898e-01 ## [1] \"multivar-ANOVA p-value p = 4.6266e-06\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##  DR1TS040  DR1TCALC  DR1TS060  ## 1.0000000 0.7879048 0.7422918 ## [1] \"Simlr weights exposures\" ##    LBX2DF    LBXVFN    LBXVBZ  ## 1.0000000 0.9714041 0.8492377 ## [1] \"Simlr weights mentalhealth\" ##    SLQ060    DPQ040    DPQ060  ## 1.0000000 0.7832059 0.2737045 ## [1] \"Simlr weights physical\" ##    BPXDI3    BPXDI2    BPXDI1  ## 1.0000000 0.9365439 0.8809460 ## *** result end *********************************** ##  ## *** result begin *********************************** ## [1] \"individual coefficients\" ##                     Estimate   Std. Error   t value     Pr(>|t|) ## diet70          5.289213e+02 2.555168e+02  2.070006 0.0390167490 ## exposures70     2.914183e+06 2.088770e+06  1.395167 0.1636476157 ## mentalhealth70 -8.681066e+06 2.452460e+06 -3.539738 0.0004418413 ## physical70     -2.393467e+07 1.287913e+07 -1.858407 0.0637582906 ## [1] \"multivar-ANOVA p-value p = 6.7347e-05\" ## [1] \"z_digit_re\" ## [1] \"Simlr weights diet\" ##          DR1TCAFF          DR1TALCO DR1TWS_Don.t.know  ##         1.0000000         0.7972873         0.4053632 ## [1] \"Simlr weights exposures\" ##    LBXBCD    LBXVEB    LBXVXY  ## 1.0000000 0.7497329 0.6461673 ## [1] \"Simlr weights mentalhealth\" ##    DPQ080    SLQ060    DPQ010  ## 1.0000000 0.7596818 0.6759724 ## [1] \"Simlr weights physical\" ##    BPXSY1    BPXSY2    BPXML1  ## 1.0000000 0.7270506 0.6626029 ## *** result end *********************************** ########################################################################################## ########################################################################################## # https://wwwn.cdc.gov/nchs/nhanes/search/default.aspx # > interpret_simlr_vector2( resultNH$v[['exposures']], 1, n2show=5, shortnames=F ) #   LBXVBZ    LBXVOX    LBXVFN    LBX2DF  # benzene, Xylene, furan, Dimethylfuran # 1.0000000 0.3346728 0.1868323 0.0586727  ##########################################################################################"},{"path":"https://github.com/stnava/simlr_nhanes/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Brian Avants. Maintainer.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"c, \"Avants\", role=c, ) e (2025). simlr.nhanes: SiMLR example using NHANES data. R package version 1.0.0, https://github.com/stnava/simlr_nhanes.","code":"@Manual{,   title = {simlr.nhanes: SiMLR example using NHANES data},   author = {{c} and {\"Avants\"} and {role=c} and email=\"stnava@gmail.com\") )},   year = {2025},   note = {R package version 1.0.0},   url = {https://github.com/stnava/simlr_nhanes}, }"},{"path":"https://github.com/stnava/simlr_nhanes/index.html","id":"simlr_nhanes","dir":"","previous_headings":"","what":"Helper package for simlr NHANES example analyses","title":"Helper package for simlr NHANES example analyses","text":"documentation page ","code":""},{"path":"https://github.com/stnava/simlr_nhanes/index.html","id":"simlr-nhanes","dir":"","previous_headings":"","what":"SiMLR NHANES","title":"Helper package for simlr NHANES example analyses","text":"TODO Data sources: NHANES raw CAPRA curated data nhanesA Code sources: haven ","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Formula Factors — check_formula_factors","title":"Check Formula Factors — check_formula_factors","text":"Identifies factor variables formula fewer two levels.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Formula Factors — check_formula_factors","text":"","code":"check_formula_factors(formula, dataframe)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Formula Factors — check_formula_factors","text":"formula formula object. dataframe data frame containing variables formula.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Formula Factors — check_formula_factors","text":"vector factor variable names fewer two levels.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/check_formula_factors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Formula Factors — check_formula_factors","text":"","code":"check_formula_factors(mpg ~ cyl + gear, mtcars) #> character(0)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"Converts data frame categorical numeric columns numeric matrix, using one-hot encoding categorical variables.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"","code":"convert_to_numeric_matrix(df)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"df data frame.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"numeric matrix.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/convert_to_numeric_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Data Frame to Numeric Matrix — convert_to_numeric_matrix","text":"","code":"df <- data.frame(a = c(1, 2), b = c(\"yes\", \"no\")) convert_to_numeric_matrix(df) #>      a b_no b_yes #> [1,] 1    0     1 #> [2,] 2    1     0"},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Count Unique Values and Filter Columns — count_unique_values","title":"Count Unique Values and Filter Columns — count_unique_values","text":"Counts unique values column data frame retains columns exceeding specified threshold.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count Unique Values and Filter Columns — count_unique_values","text":"","code":"count_unique_values(df, threshold)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count Unique Values and Filter Columns — count_unique_values","text":"df data frame. threshold integer specifying minimum number unique values retain column.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count Unique Values and Filter Columns — count_unique_values","text":"data frame filtered columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/count_unique_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count Unique Values and Filter Columns — count_unique_values","text":"","code":"df <- data.frame(a = c(1, 1, 2), b = c(\"x\", \"y\", \"z\")) count_unique_values(df, 1) #> a : 2 unique values #> b : 3 unique values #>   a b #> 1 1 x #> 2 1 y #> 3 2 z"},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Regression Formula — create_formula","title":"Create Regression Formula — create_formula","text":"Creates regression formula data frame, excluding specified columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Regression Formula — create_formula","text":"","code":"create_formula(dataframe, outcome, exclusions)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Regression Formula — create_formula","text":"dataframe input data frame. outcome outcome variable. exclusions vector columns exclude formula.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Regression Formula — create_formula","text":"formula object regression.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/create_formula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Regression Formula — create_formula","text":"","code":"create_formula(mtcars, \"mpg\", exclusions = c(\"cyl\", \"gear\")) #> mpg ~ disp + hp + drat + wt + qsec + vs + am + carb #> <environment: 0x106b87210>"},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Columns with High NA Percentage — filter_na_columns","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"Filters columns data frame higher percentage NA values specified threshold.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"","code":"filter_na_columns(df, max_na_percent = 0.2)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"df data frame. max_na_percent Maximum allowed proportion NA values per column. Default 0.2.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"data frame filtered columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/filter_na_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter Columns with High NA Percentage — filter_na_columns","text":"","code":"filter_na_columns(data.frame(a = c(1, NA, 3), b = c(NA, NA, 3)), max_na_percent = 0.5) #>    a #> 1  1 #> 2 NA #> 3  3"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute Missing Values and Report NA Counts — impute_and_report_na","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"function imputes missing values matrix column means reports count missing values per column.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"","code":"impute_and_report_na(mat)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"mat numeric matrix.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"matrix imputed values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_and_report_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute Missing Values and Report NA Counts — impute_and_report_na","text":"","code":"mat <- matrix(c(1, NA, 3, 4, 5, NA), ncol = 2) impute_and_report_na(mat) #> No missing values detected. #>      [,1] [,2] #> [1,]    1    4 #> [2,]   NA    5 #> [3,]    3   NA"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Impute Missing Data — impute_data","title":"Impute Missing Data — impute_data","text":"Imputes missing values data frame. Numeric columns imputed median, categorical columns frequent category.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Impute Missing Data — impute_data","text":"","code":"impute_data(df)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Impute Missing Data — impute_data","text":"df data frame missing values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Impute Missing Data — impute_data","text":"data frame imputed values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/impute_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Impute Missing Data — impute_data","text":"","code":"impute_data(data.frame(a = c(1, NA, 3), b = c(\"x\", \"y\", NA))) #>   a b #> 1 1 x #> 2 2 y #> 3 3 x"},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"Maps specific frequency categories numeric values, error handling invalid categories.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"","code":"map_freq_to_numeric(df, colname)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"df data frame containing column mapped. colname name column mapped.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"numeric vector mapped values.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/map_freq_to_numeric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map Frequency Categories to Numeric Values — map_freq_to_numeric","text":"","code":"map_freq_to_numeric(data.frame(freq = c(\"Not at all\", \"Several days\")), \"freq\") #> [1] 0 1"},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"function generates new matrix applying random linear transformation given latent matrix adding Gaussian noise.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"","code":"matrix_from_latent(latent_matrix, target_p, noise_sd = 0.3)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"latent_matrix numeric matrix representing latent structure (n x k). target_p integer specifying number columns output matrix. noise_sd numeric value indicating standard deviation Gaussian noise added. Default 0.3.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"numeric matrix dimensions (n x target_p), generated latent matrix random linear transformation added Gaussian noise.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/matrix_from_latent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Matrix from a Latent Matrix with Added Noise — matrix_from_latent","text":"","code":"latent <- matrix(rnorm(20), nrow = 5, ncol = 4) generated_matrix <- matrix_from_latent(latent, target_p = 3, noise_sd = 0.2) print(generated_matrix) #>            [,1]        [,2]       [,3] #> [1,] -0.8420428 -2.26384990 -1.4360201 #> [2,] -1.4226564  0.01670062  2.9901238 #> [3,] -3.9410985 -6.29693119  4.4003814 #> [4,]  2.4102664  1.54497778 -0.5047176 #> [5,] -1.5365092  0.60855535  0.2409585"},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"function loops list matrices returns maximum number columns found across matrices list.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"","code":"max_columns_list(matrix_list)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"matrix_list list containing matrices. Non-matrix elements ignored warning.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"integer representing maximum number columns across matrices list.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/max_columns_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Maximum Number of Columns in a List of Matrices — max_columns_list","text":"","code":"mat1 <- matrix(1:6, nrow = 2) mat2 <- matrix(1:12, nrow = 3) mat3 <- matrix(1:4, nrow = 2) max_columns_list(list(mat1, mat2, mat3)) # Returns 2 #> [1] 4"},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"Merges columns type two data frames based common column names.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"","code":"merge_same_type_columns(df1, df2)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"df1 First data frame. df2 Second data frame.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"merged data frame containing matching columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/merge_same_type_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge Columns of the Same Type from Two Data Frames — merge_same_type_columns","text":"","code":"merge_same_type_columns(data.frame(a = 1:3), data.frame(a = 4:6)) #>   a #> 1 1 #> 2 2 #> 3 3 #> 4 4 #> 5 5 #> 6 6"},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"function loops list matrices returns minimum number columns found across matrices list.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"","code":"min_columns_list(matrix_list)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"matrix_list list containing matrices. Non-matrix elements ignored warning.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"integer representing minimum number columns across matrices list.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/min_columns_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Minimum Number of Columns in a List of Matrices — min_columns_list","text":"","code":"mat1 <- matrix(1:6, nrow = 2) mat2 <- matrix(1:12, nrow = 3) mat3 <- matrix(1:4, nrow = 2) min_columns_list(list(mat1, mat2, mat3)) # Returns 2 #> [1] 2"},{"path":"https://github.com/stnava/simlr_nhanes/reference/nhanescog.html","id":null,"dir":"Reference","previous_headings":"","what":"NHANES cognition data — nhanescog","title":"NHANES cognition data — nhanescog","text":"NHANES cognition data","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/nhanescog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NHANES cognition data — nhanescog","text":"","code":"nhanescog"},{"path":"https://github.com/stnava/simlr_nhanes/reference/nhanescog.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"NHANES cognition data — nhanescog","text":"Curated nhanes cognition data CAPRA","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/nhanescog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"NHANES cognition data — nhanescog","text":"","code":"if (FALSE) { # \\dontrun{  data(\"nhanescog_2011_2014\") } # }"},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and Filter XPT File — read_and_filter_xpt","title":"Read and Filter XPT File — read_and_filter_xpt","text":"Reads XPT file, converts data frame, renames first column \"ID\", filters based unique value counts.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and Filter XPT File — read_and_filter_xpt","text":"","code":"read_and_filter_xpt(file_path, threshold = 100)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and Filter XPT File — read_and_filter_xpt","text":"file_path Path XPT file. threshold Numeric threshold filter columns based unique value counts. Default 100.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and Filter XPT File — read_and_filter_xpt","text":"data frame filtered columns.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/read_and_filter_xpt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and Filter XPT File — read_and_filter_xpt","text":"","code":"read_and_filter_xpt(\"data.xpt\", threshold = 50) #> Error in read_xpt(file_path): could not find function \"read_xpt\""},{"path":"https://github.com/stnava/simlr_nhanes/reference/remove_perfectly_correlated.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Perfectly Correlated Columns from a Data Frame — remove_perfectly_correlated","title":"Remove Perfectly Correlated Columns from a Data Frame — remove_perfectly_correlated","text":"function identifies columns data frame perfectly correlated (correlation coefficient 1 -1) removes second instance pair, ensuring two columns resulting data frame perfectly correlated.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/remove_perfectly_correlated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Perfectly Correlated Columns from a Data Frame — remove_perfectly_correlated","text":"","code":"remove_perfectly_correlated(df, tolerance = 1e-06)"},{"path":"https://github.com/stnava/simlr_nhanes/reference/remove_perfectly_correlated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Perfectly Correlated Columns from a Data Frame — remove_perfectly_correlated","text":"df data frame containing numeric columns checked perfect correlation. tolerance float tolerance value","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/remove_perfectly_correlated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Perfectly Correlated Columns from a Data Frame — remove_perfectly_correlated","text":"data frame redundant perfectly correlated columns removed.","code":""},{"path":"https://github.com/stnava/simlr_nhanes/reference/remove_perfectly_correlated.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove Perfectly Correlated Columns from a Data Frame — remove_perfectly_correlated","text":"","code":"df <- data.frame(a = 1:5, b = 1:5, c = 5:1+rnorm(5), d = c(2, 1, 6, 8, 10)) remove_perfectly_correlated(df) #>   a         c  d #> 1 1 5.5777091  2 #> 2 2 4.1181949  1 #> 3 3 1.0882795  6 #> 4 4 2.8620865  8 #> 5 5 0.7567633 10"}]
